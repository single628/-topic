{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var wrap = require('wordwrap'),\n  align = {\n    right: require('right-align'),\n    center: require('center-align')\n  },\n  top = 0,\n  right = 1,\n  bottom = 2,\n  left = 3\n\nfunction UI (opts) {\n  this.width = opts.width\n  this.wrap = opts.wrap\n  this.rows = []\n}\n\nUI.prototype.span = function () {\n  var cols = this.div.apply(this, arguments)\n  cols.span = true\n}\n\nUI.prototype.div = function () {\n  if (arguments.length === 0) this.div('')\n  if (this.wrap && this._shouldApplyLayoutDSL.apply(this, arguments)) {\n    return this._applyLayoutDSL(arguments[0])\n  }\n\n  var cols = []\n\n  for (var i = 0, arg; (arg = arguments[i]) !== undefined; i++) {\n    if (typeof arg === 'string') cols.push(this._colFromString(arg))\n    else cols.push(arg)\n  }\n\n  this.rows.push(cols)\n  return cols\n}\n\nUI.prototype._shouldApplyLayoutDSL = function () {\n  return arguments.length === 1 && typeof arguments[0] === 'string' &&\n    /[\\t\\n]/.test(arguments[0])\n}\n\nUI.prototype._applyLayoutDSL = function (str) {\n  var _this = this,\n    rows = str.split('\\n'),\n    leftColumnWidth = 0\n\n  // simple heuristic for layout, make sure the\n  // second column lines up along the left-hand.\n  // don't allow the first column to take up more\n  // than 50% of the screen.\n  rows.forEach(function (row) {\n    var columns = row.split('\\t')\n    if (columns.length > 1 && columns[0].length > leftColumnWidth) {\n      leftColumnWidth = Math.min(\n        Math.floor(_this.width * 0.5),\n        columns[0].length\n      )\n    }\n  })\n\n  // generate a table:\n  //  replacing ' ' with padding calculations.\n  //  using the algorithmically generated width.\n  rows.forEach(function (row) {\n    var columns = row.split('\\t')\n    _this.div.apply(_this, columns.map(function (r, i) {\n      return {\n        text: r.trim(),\n        padding: [0, r.match(/\\s*$/)[0].length, 0, r.match(/^\\s*/)[0].length],\n        width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined\n      }\n    }))\n  })\n\n  return this.rows[this.rows.length - 1]\n}\n\nUI.prototype._colFromString = function (str) {\n  return {\n    text: str\n  }\n}\n\nUI.prototype.toString = function () {\n  var _this = this,\n    lines = []\n\n  _this.rows.forEach(function (row, i) {\n    _this.rowToString(row, lines)\n  })\n\n  // don't display any lines with the\n  // hidden flag set.\n  lines = lines.filter(function (line) {\n    return !line.hidden\n  })\n\n  return lines.map(function (line) {\n    return line.text\n  }).join('\\n')\n}\n\nUI.prototype.rowToString = function (row, lines) {\n  var _this = this,\n    paddingLeft,\n    rrows = this._rasterize(row),\n    str = '',\n    ts,\n    width,\n    wrapWidth\n\n  rrows.forEach(function (rrow, r) {\n    str = ''\n    rrow.forEach(function (col, c) {\n      ts = '' // temporary string used during alignment/padding.\n      width = row[c].width // the width with padding.\n      wrapWidth = _this._negatePadding(row[c]) // the width without padding.\n\n      for (var i = 0; i < Math.max(wrapWidth, col.length); i++) {\n        ts += col.charAt(i) || ' '\n      }\n\n      // align the string within its column.\n      if (row[c].align && row[c].align !== 'left' && _this.wrap) {\n        ts = align[row[c].align](ts.trim() + '\\n' + new Array(wrapWidth + 1).join(' '))\n          .split('\\n')[0]\n        if (ts.length < wrapWidth) ts += new Array(width - ts.length).join(' ')\n      }\n\n      // add left/right padding and print string.\n      paddingLeft = (row[c].padding || [0, 0, 0, 0])[left]\n      if (paddingLeft) str += new Array(row[c].padding[left] + 1).join(' ')\n      str += ts\n      if (row[c].padding && row[c].padding[right]) str += new Array(row[c].padding[right] + 1).join(' ')\n\n      // if prior row is span, try to render the\n      // current row on the prior line.\n      if (r === 0 && lines.length > 0) {\n        str = _this._renderInline(str, lines[lines.length - 1], paddingLeft)\n      }\n    })\n\n    // remove trailing whitespace.\n    lines.push({\n      text: str.replace(/ +$/, ''),\n      span: row.span\n    })\n  })\n\n  return lines\n}\n\n// if the full 'source' can render in\n// the target line, do so.\nUI.prototype._renderInline = function (source, previousLine, paddingLeft) {\n  var target = previousLine.text,\n    str = ''\n\n  if (!previousLine.span) return source\n\n  // if we're not applying wrapping logic,\n  // just always append to the span.\n  if (!this.wrap) {\n    previousLine.hidden = true\n    return target + source\n  }\n\n  for (var i = 0, tc, sc; i < Math.max(source.length, target.length); i++) {\n    tc = target.charAt(i) || ' '\n    sc = source.charAt(i) || ' '\n    // we tried to overwrite a character in the other string.\n    if (tc !== ' ' && sc !== ' ') return source\n    // there is not enough whitespace to maintain padding.\n    if (sc !== ' ' && i < paddingLeft + target.length) return source\n    // :thumbsup:\n    if (tc === ' ') str += sc\n    else str += tc\n  }\n\n  previousLine.hidden = true\n\n  return str\n}\n\nUI.prototype._rasterize = function (row) {\n  var _this = this,\n    i,\n    rrow,\n    rrows = [],\n    widths = this._columnWidths(row),\n    wrapped\n\n  // word wrap all columns, and create\n  // a data-structure that is easy to rasterize.\n  row.forEach(function (col, c) {\n    // leave room for left and right padding.\n    col.width = widths[c]\n    if (_this.wrap) wrapped = wrap.hard(_this._negatePadding(col))(col.text).split('\\n')\n    else wrapped = col.text.split('\\n')\n\n    // add top and bottom padding.\n    if (col.padding) {\n      for (i = 0; i < (col.padding[top] || 0); i++) wrapped.unshift('')\n      for (i = 0; i < (col.padding[bottom] || 0); i++) wrapped.push('')\n    }\n\n    wrapped.forEach(function (str, r) {\n      if (!rrows[r]) rrows.push([])\n\n      rrow = rrows[r]\n\n      for (var i = 0; i < c; i++) {\n        if (rrow[i] === undefined) rrow.push('')\n      }\n      rrow.push(str)\n    })\n  })\n\n  return rrows\n}\n\nUI.prototype._negatePadding = function (col) {\n  var wrapWidth = col.width\n  if (col.padding) wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0)\n  return wrapWidth\n}\n\nUI.prototype._columnWidths = function (row) {\n  var _this = this,\n    widths = [],\n    unset = row.length,\n    unsetWidth,\n    remainingWidth = this.width\n\n  // column widths can be set in config.\n  row.forEach(function (col, i) {\n    if (col.width) {\n      unset--\n      widths[i] = col.width\n      remainingWidth -= col.width\n    } else {\n      widths[i] = undefined\n    }\n  })\n\n  // any unset widths should be calculated.\n  if (unset) unsetWidth = Math.floor(remainingWidth / unset)\n  widths.forEach(function (w, i) {\n    if (!_this.wrap) widths[i] = row[i].width || row[i].text.length\n    else if (w === undefined) widths[i] = Math.max(unsetWidth, _minWidth(row[i]))\n  })\n\n  return widths\n}\n\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth (col) {\n  var padding = col.padding || []\n\n  return 1 + (padding[left] || 0) + (padding[right] || 0)\n}\n\nmodule.exports = function (opts) {\n  opts = opts || {}\n\n  return new UI({\n    width: (opts || {}).width || 80,\n    wrap: typeof opts.wrap === 'boolean' ? opts.wrap : true\n  })\n}\n"]}