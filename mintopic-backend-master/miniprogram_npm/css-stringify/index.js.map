{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n/**\n * Stringfy the given AST `node`.\n *\n * @param {Object} node\n * @param {Object} options\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(node, options){\n  return new Compiler(options).compile(node);\n};\n\n/**\n * Initialize a new `Compiler`.\n */\n\nfunction Compiler(options) {\n  options = options || {};\n  this.compress = options.compress;\n  this.indentation = options.indent;\n}\n\n/**\n * Compile `node`.\n */\n\nCompiler.prototype.compile = function(node){\n  return node.stylesheet.rules.map(this.visit, this)\n    .join(this.compress ? '' : '\\n\\n');\n};\n\n/**\n * Visit `node`.\n */\n\nCompiler.prototype.visit = function(node){\n  if (node.charset) return this.charset(node);\n  if (node.keyframes) return this.keyframes(node);\n  if (node.media) return this.media(node);\n  if (node.import) return this.import(node);\n  return this.rule(node);\n};\n\n/**\n * Visit import node.\n */\n\nCompiler.prototype.import = function(node){\n  return '@import ' + node.import + ';';\n};\n\n/**\n * Visit media node.\n */\n\nCompiler.prototype.media = function(node){\n  if (this.compress) {\n    return '@media '\n      + node.media\n      + '{'\n      + node.rules.map(this.visit, this).join('')\n      + '}';\n  }\n\n  return '@media '\n    + node.media\n    + ' {\\n'\n    + this.indent(1)\n    + node.rules.map(this.visit, this).join('\\n\\n')\n    + this.indent(-1)\n    + '\\n}';\n};\n\n/**\n * Visit charset node.\n */\n\nCompiler.prototype.charset = function(node){\n  if (this.compress) {\n    return '@charset ' + node.charset + ';';\n  }\n\n  return '@charset ' + node.charset + ';\\n';\n};\n\n/**\n * Visit keyframes node.\n */\n\nCompiler.prototype.keyframes = function(node){\n  if (this.compress) {\n    return '@'\n      + (node.vendor || '')\n      + 'keyframes '\n      + node.name\n      + '{'\n      + node.keyframes.map(this.keyframe, this).join('')\n      + '}';\n  }\n\n  return '@'\n    + (node.vendor || '')\n    + 'keyframes '\n    + node.name\n    + ' {\\n'\n    + this.indent(1)\n    + node.keyframes.map(this.keyframe, this).join('\\n')\n    + this.indent(-1)\n    + '}';\n};\n\n/**\n * Visit keyframe node.\n */\n\nCompiler.prototype.keyframe = function(node){\n  if (this.compress) {\n    return node.values.join(',')\n      + '{'\n      + node.declarations.map(this.declaration, this).join(';')\n      + '}';\n  }\n\n  return this.indent()\n    + node.values.join(', ')\n    + ' {\\n'\n    + this.indent(1)\n    + node.declarations.map(this.declaration, this).join(';\\n')\n    + this.indent(-1)\n    + '\\n' + this.indent() + '}\\n';\n};\n\n/**\n * Visit rule node.\n */\n\nCompiler.prototype.rule = function(node){\n  var indent = this.indent();\n\n  if (this.compress) {\n    return node.selectors.join(',')\n      + '{'\n      + node.declarations.map(this.declaration, this).join(';')\n      + '}';\n  }\n\n  return node.selectors.map(function(s){ return indent + s }).join(',\\n')\n    + ' {\\n'\n    + this.indent(1)\n    + node.declarations.map(this.declaration, this).join(';\\n')\n    + this.indent(-1)\n    + '\\n' + this.indent() + '}';\n};\n\n/**\n * Visit declaration node.\n */\n\nCompiler.prototype.declaration = function(node){\n  if (this.compress) {\n    return node.property + ':' + node.value;\n  }\n\n  return this.indent() + node.property + ': ' + node.value;\n};\n\n/**\n * Increase, decrease or return current indentation.\n */\n\nCompiler.prototype.indent = function(level) {\n  this.level = this.level || 1;\n\n  if (null != level) {\n    this.level += level;\n    return '';\n  }\n\n  return Array(this.level).join(this.indentation || '  ');\n};\n"]}