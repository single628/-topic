{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nvar fs = require('fs')\r\nvar PassThrough = require('stream').PassThrough\r\nvar Transform = require('stream').Transform\r\n\r\nif (typeof Transform === 'undefined') {\r\n  throw new Error('UglifyJS only supports browserify when using node >= 0.10.x')\r\n}\r\n\r\nvar cache = {}\r\nmodule.exports = transform\r\nfunction transform(file) {\r\n  if (!/tools\\/node\\.js$/.test(file.replace(/\\\\/g,'/'))) return new PassThrough();\r\n  if (cache[file]) return makeStream(cache[file])\r\n  var uglify = require(file)\r\n  var src = 'var sys = require(\"util\");\\nvar MOZ_SourceMap = require(\"source-map\");\\nvar UglifyJS = exports;\\n' + uglify.FILES.map(function (path) { return fs.readFileSync(path, 'utf8') }).join('\\n')\r\n\r\n  var ast = uglify.parse(src)\r\n  ast.figure_out_scope()\r\n\r\n  var variables = ast.variables\r\n    .map(function (node, name) {\r\n      return name\r\n    })\r\n\r\n  src += '\\n\\n' + variables.map(function (v) { return 'exports.' + v + ' = ' + v + ';' }).join('\\n') + '\\n\\n'\r\n\r\n  src += 'exports.AST_Node.warn_function = function (txt) { if (typeof console != \"undefined\" && typeof console.warn === \"function\") console.warn(txt) }\\n\\n'\r\n\r\n  src += 'exports.minify = ' + uglify.minify.toString() + ';\\n\\n'\r\n  src += 'exports.describe_ast = ' + uglify.describe_ast.toString() + ';'\r\n\r\n  // TODO: remove once https://github.com/substack/node-browserify/issues/631 is resolved\r\n  src = src.replace(/\"for\"/g, '\"fo\" + \"r\"')\r\n\r\n  cache[file] = src\r\n  return makeStream(src);\r\n}\r\n\r\nfunction makeStream(src) {\r\n  var res = new Transform();\r\n  res._transform = function (chunk, encoding, callback) { callback() }\r\n  res._flush = function (callback) {\r\n    res.push(src)\r\n    callback()\r\n  }\r\n  return res;\r\n}\r\n"]}