{"version":3,"sources":["index.js","lib/index.js","lib/driver.js","lib/drivers/node-mongodb-native/index.js","lib/drivers/node-mongodb-native/binary.js","lib/drivers/node-mongodb-native/collection.js","lib/collection.js","lib/connectionstate.js","lib/helpers/immediate.js","lib/error/mongooseError.js","lib/drivers/node-mongodb-native/objectid.js","lib/helpers/get.js","lib/helpers/getConstructorName.js","lib/helpers/clone.js","lib/types/decimal128.js","lib/types/objectid.js","lib/helpers/symbols.js","lib/helpers/specialProperties.js","lib/helpers/isMongooseObject.js","lib/helpers/getFunctionName.js","lib/helpers/isBsonType.js","lib/helpers/isObject.js","lib/helpers/query/trusted.js","lib/utils.js","lib/options/PopulateOptions.js","lib/helpers/promiseOrCallback.js","lib/promise_provider.js","lib/helpers/schema/merge.js","lib/document.js","lib/internal.js","lib/statemachine.js","lib/error/index.js","lib/error/messages.js","lib/error/notFound.js","lib/error/cast.js","lib/error/validation.js","lib/error/validator.js","lib/error/version.js","lib/error/parallelSave.js","lib/error/overwriteModel.js","lib/error/missingSchema.js","lib/error/divergentArray.js","lib/error/strict.js","lib/schema/mixed.js","lib/schematype.js","lib/options/SchemaTypeOptions.js","lib/options/propertyOptions.js","lib/schema/operators/exists.js","lib/cast/boolean.js","lib/schema/operators/type.js","lib/helpers/schematype/handleImmutable.js","lib/helpers/isAsyncFunction.js","lib/schema/symbols.js","lib/error/objectExpected.js","lib/error/objectParameter.js","lib/error/parallelValidate.js","lib/schema.js","lib/options/VirtualOptions.js","lib/virtualtype.js","lib/helpers/schema/addAutoId.js","lib/helpers/schema/getIndexes.js","lib/helpers/schema/idGetter.js","lib/helpers/timestamps/setupTimestamps.js","lib/helpers/update/applyTimestampsToChildren.js","lib/helpers/schema/cleanPositionalOperators.js","lib/helpers/schema/handleTimestampOption.js","lib/helpers/update/applyTimestampsToUpdate.js","lib/helpers/populate/validateRef.js","lib/helpers/query/applyQueryMiddleware.js","lib/helpers/query/validOps.js","lib/helpers/model/applyHooks.js","lib/schema/index.js","lib/schema/string.js","lib/options/SchemaStringOptions.js","lib/cast/string.js","lib/schema/number.js","lib/options/SchemaNumberOptions.js","lib/cast/number.js","lib/schema/operators/bitwise.js","lib/schema/boolean.js","lib/schema/documentarray.js","lib/schema/array.js","lib/options/SchemaArrayOptions.js","lib/helpers/arrayDepth.js","lib/cast.js","lib/schema/operators/text.js","lib/helpers/discriminator/getSchemaDiscriminatorByValue.js","lib/helpers/discriminator/areDiscriminatorValuesEqual.js","lib/helpers/query/isOperator.js","lib/schema/operators/helpers.js","lib/schema/operators/geospatial.js","lib/helpers/discriminator/getDiscriminatorByValue.js","lib/types/index.js","lib/types/array/index.js","lib/types/array/methods/index.js","lib/types/ArraySubdocument.js","lib/types/subdocument.js","lib/options.js","lib/helpers/document/cleanModifiedSubpaths.js","lib/types/buffer.js","lib/types/DocumentArray/index.js","lib/types/DocumentArray/methods/index.js","lib/cast/objectid.js","lib/types/map.js","lib/helpers/document/handleSpreadDoc.js","lib/options/SchemaDocumentArrayOptions.js","lib/helpers/model/discriminator.js","lib/helpers/document/compile.js","lib/helpers/schema/handleIdOption.js","lib/helpers/discriminator/getConstructor.js","lib/schema/SubdocumentPath.js","lib/options/SchemaSubdocumentOptions.js","lib/schema/buffer.js","lib/options/SchemaBufferOptions.js","lib/schema/date.js","lib/options/SchemaDateOptions.js","lib/cast/date.js","lib/schema/objectid.js","lib/options/SchemaObjectIdOptions.js","lib/schema/decimal128.js","lib/cast/decimal128.js","lib/schema/map.js","lib/options/SchemaMapOptions.js","lib/helpers/common.js","lib/helpers/path/flattenObjectWithDottedPaths.js","lib/helpers/path/setDottedPath.js","lib/helpers/document/getEmbeddedDiscriminatorPath.js","lib/helpers/schema/getKeysInSchemaOrder.js","lib/helpers/projection/isDefiningProjection.js","lib/helpers/projection/isExclusive.js","lib/helpers/populate/markArraySubdocsPopulated.js","lib/queryhelpers.js","lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js","lib/helpers/isPromise.js","lib/helpers/path/parentPaths.js","lib/drivers/node-mongodb-native/decimal128.js","lib/drivers/node-mongodb-native/ReadPreference.js","lib/drivers/node-mongodb-native/connection.js","lib/connection.js","lib/cursor/ChangeStream.js","lib/error/serverSelection.js","lib/helpers/topology/allServersUnknown.js","lib/helpers/topology/isAtlas.js","lib/helpers/topology/isSSLError.js","lib/helpers/schema/applyPlugins.js","package.json","lib/helpers/processConnectionOptions.js","lib/helpers/timers.js","lib/validoptions.js","lib/query.js","lib/cursor/QueryCursor.js","lib/helpers/cursor/eachAsync.js","lib/helpers/query/applyGlobalMaxTimeMS.js","lib/helpers/schema/applyWriteConcern.js","lib/helpers/update/castArrayFilters.js","lib/helpers/query/castFilterPath.js","lib/helpers/schema/getPath.js","lib/helpers/update/updatedPathsByArrayFilter.js","lib/helpers/update/modifiedPaths.js","lib/helpers/query/castUpdate.js","lib/helpers/query/getEmbeddedDiscriminatorPath.js","lib/helpers/query/handleImmutable.js","lib/helpers/update/moveImmutableProperties.js","lib/helpers/query/completeMany.js","lib/helpers/query/hasDollarKeys.js","lib/helpers/projection/isInclusive.js","lib/helpers/projection/isSubpath.js","lib/helpers/projection/parseProjection.js","lib/helpers/update/removeUnusedArrayFilters.js","lib/helpers/query/sanitizeFilter.js","lib/helpers/query/sanitizeProjection.js","lib/helpers/query/selectPopulatedFields.js","lib/helpers/setDefaultsOnInsert.js","lib/helpers/updateValidators.js","lib/helpers/query/wrapThunk.js","lib/model.js","lib/aggregate.js","lib/cursor/AggregationCursor.js","lib/helpers/aggregate/prepareDiscriminatorPipeline.js","lib/helpers/aggregate/stringifyFunctionOperators.js","lib/options/removeOptions.js","lib/options/saveOptions.js","lib/helpers/model/applyMethods.js","lib/helpers/model/applyStaticHooks.js","lib/helpers/model/applyStatics.js","lib/helpers/populate/assignVals.js","lib/helpers/populate/SkipPopulateValue.js","lib/helpers/populate/assignRawDocsToIdStructure.js","lib/helpers/populate/leanPopulateMap.js","lib/helpers/populate/getVirtual.js","lib/helpers/populate/lookupLocalFields.js","lib/helpers/model/castBulkWrite.js","lib/helpers/populate/createPopulateQueryFilter.js","lib/helpers/getDefaultBulkwriteResult.js","lib/helpers/each.js","lib/helpers/populate/getModelsMapForPopulate.js","lib/helpers/populate/getSchemaTypes.js","lib/helpers/populate/modelNamesFromRefPath.js","lib/helpers/projection/isPathExcluded.js","lib/helpers/indexes/isDefaultIdIndex.js","lib/helpers/indexes/isIndexEqual.js","lib/helpers/projection/isPathSelectedInclusive.js","lib/helpers/parallelLimit.js","lib/helpers/populate/removeDeselectedForeignField.js","lib/helpers/pluralize.js","lib/plugins/clearValidating.js","lib/plugins/removeSubdocs.js","lib/plugins/saveSubdocs.js","lib/plugins/trackTransaction.js","lib/plugins/validateBeforeSave.js","lib/plugins/sharding.js","lib/helpers/printJestWarning.js","lib/document_provider.js","lib/browserDocument.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ACHA,AFMA,AFMA;ACFA,AENA,ACHA,AFMA,AFMA;ACFA,AENA,ACHA,AFMA,AFMA;AKdA,AJYA,AENA,ACHA,AFMA,AFMA;AKdA,AJYA,AENA,ACHA,AFMA,AFMA;AKdA,AJYA,AENA,ACHA,AFMA,AFMA;AKdA,ACHA,ALeA,AENA,ACHA,AJYA;AKdA,ACHA,AHSA,ACHA,AJYA;AKdA,ACHA,AFMA,AJYA;AKdA,ACHA,AFMA,AGTA,APqBA;AKdA,ACHA,AFMA,AGTA,APqBA;AKdA,ACHA,AFMA,AGTA,APqBA;AKdA,ACHA,AFMA,AIZA,ADGA,APqBA;AKdA,ACHA,AFMA,AIZA,ADGA,APqBA;AKdA,ACHA,AFMA,AIZA,ADGA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,ADGA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,ADGA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,ADGA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,AHSA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,AHSA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,AHSA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,ACHA,AJYA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,ACHA,AJYA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AENA,ACHA,AJYA,APqBA;AKdA,ACHA,AFMA,AKfA,ADGA,AIZA,AFMA,ACHA,AXiCA;AKdA,ACHA,AFMA,AKfA,ADGA,AIZA,AFMA,ACHA,AXiCA;AKdA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA;AKdA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA,AavCA;ARyBA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA,AavCA;ARyBA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA,AavCA;ARyBA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA,AavCA,ACHA;AT4BA,ACHA,AFMA,AKfA,AGTA,AFMA,ACHA,AXiCA,AavCA,ACHA;AT4BA,ACHA,AFMA,AQxBA,AFMA,ACHA,AXiCA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,ACHA,AIZA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,ACHA,AIZA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,ACHA,AIZA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AMlBA,ADGA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AMlBA,ADGA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AMlBA,ADGA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AOrBA,AFMA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AOrBA,AFMA,Af6CA,AavCA,ACHA;AT4BA,ADGA,AQxBA,AFMA,AOrBA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ADGA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ADGA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ADGA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AFMA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AGTA,ALeA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AGTA,ALeA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AQxBA,ACHA,AFMA,AGTA,ALeA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ANkBA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ANkBA,Af6CA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,Ac1CA;AT4BA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,Ac1CA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,Ac1CA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,Ac1CA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AS3BA,AFMA,AGTA,ACHA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AOrBA,AGTA,ACHA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AU9BA,AIZA,AHSA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AU9BA,AIZA,AHSA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AU9BA,AIZA,AHSA,ArB+DA,AuBrEA,AT2BA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,AU9BA,AIZA,AHSA,ArB+DA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,Ac1CA,AxBwEA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,Ac1CA,AxBwEA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,ADGA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,AuBrEA,AENA,AXiCA,AQxBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AHSA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AHSA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AHSA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,AQxBA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,AlBsDA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,AlBsDA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,AlBsDA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,AnByDA,AFMA,Ac1CA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,AnByDA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,AnByDA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A0B9EA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,ApB4DA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,AtBkEA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,AtBkEA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,AtBkEA,AYpCA,AENA,A1B8EA,A4BpFA,ALeA,AENA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,AvBqEA,AYpCA,AENA,A1B8EA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,AvBqEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,AvBqEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AENA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AKfA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AKfA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AKfA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,ACHA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AYpCA,AxBwEA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AHSA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AZoCA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AZoCA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AZoCA,A4BpFA,AHSA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AHSA,ACHA,ACHA,AxBwEA,AZoCA,AyB3EA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,AyB3EA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,AyB3EA,AIZA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A6BvFA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,AbuCA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,AbuCA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,AbuCA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A0C9HA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,AFMA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,AFMA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,AFMA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,ACHA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,AIZA,AHSA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,AIZA,AHSA,Ad0CA,APqBA;AjBoDA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,ACHA,AQxBA,APqBA,AMlBA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,AIZA,AHSA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,ADGA,ADGA,AIZA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,AIZA,AHSA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,ADGA,AGTA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,ACHA,AHSA,AIZA,AHSA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,ADGA,AGTA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,AFMA,AIZA,AHSA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,AENA,APqBA,ACHA,ACHA,AxBwEA,AZoCA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,AENA,APqBA,ACHA,AvBqEA,AZoCA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,AENA,APqBA,ACHA,AvBqEA,AZoCA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AS3BA,AENA,APqBA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AIZA,AENA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,AGTA,ARwBA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,AGTA,ARwBA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AWjCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,AGTA,ARwBA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AsBlEA,AXiCA,APqBA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,AGTA,ARwBA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AOrBA,AV8BA,AsBlEA,AlBsDA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,AGTA,ARwBA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,AlBsDA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,AnByDA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,AnByDA,ACHA,AvBqEA,AsClHA,ADGA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,AnByDA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AFMA,AMlBA,ALeA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AWjCA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AWjCA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AWjCA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA;AyB1EA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;AV+BA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;AV+BA,A1C8HA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,AqC/GA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,AT2BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,AT2BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,AT2BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,ACHA,AV8BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,ACHA,AV8BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,ACHA,AV8BA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A8C1IA,ACHA,ACHA,AXiCA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A+C7IA,ACHA,AXiCA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A+C7IA,ACHA,AXiCA,AjDmJA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AvBqEA,A+C7IA,ACHA,AXiCA,AYpCA,A7DuLA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AwBxEA,ACHA,AXiCA,AYpCA,A7DuLA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AwBxEA,ACHA,AXiCA,AYpCA,A7DuLA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AsBlEA,ACHA,ACHA,ApB4DA,ACHA,AwBxEA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuBrEA,ACHA,ApB4DA,ACHA,AwBxEA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuBrEA,ACHA,ApB4DA,ACHA,AwBxEA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuBrEA,ACHA,ApB4DA,ACHA,A4BpFA,AJYA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AwBxEA,ApB4DA,ACHA,A4BpFA,AJYA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AwBxEA,ApB4DA,ACHA,A4BpFA,AJYA,ACHA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AwBxEA,ApB4DA,ACHA,A4BpFA,AJYA,AKfA,AJYA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A4BpFA,AJYA,AKfA,AJYA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A4BpFA,AJYA,AKfA,AJYA,AXiCA,AYpCA,ACHA,A9D0LA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A4BpFA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A4BpFA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A4BpFA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A+B7FA,AHSA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,ACHA,A+B7FA,AHSA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,AHSA,AJYA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ARwBA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ARwBA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ARwBA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AgChGA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,AbuCA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AJYA,ACHA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AHSA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,ACHA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AHSA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AIZA,AmCzGA,AHSA,ACHA,ACHA,AT2BA,AKfA,AHSA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AHSA,ACHA,ACHA,AT2BA,AKfA,AHSA,ACHA,AGTA,AjEmMA,A4CpIA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AHSA,ACHA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;ApD6JA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,A6BvFA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,AwExNA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AgB/CA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ACHA,AT2BA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AHSA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,Ae7CA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ARwBA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ARwBA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ARwBA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AuBrEA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AuCrHA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,AT2BA,A5BoFA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;AmBxDA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A6BvFA,AHSA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,ANkBA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AbuCA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AGTA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AHSA,ApE4MA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AGTA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AGTA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ArC+GA,AgChGA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AOrBA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AWjCA,AJYA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AWjCA,AJYA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AWjCA,AJYA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AYpCA,ADGA,AJYA,AbuCA,A5BoFA,Ad0CA,APqBA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AYpCA,ADGA,AJYA,AbuCA,A5BoFA,ArB+DA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,ADGA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,AGTA,AYpCA,ADGA,AJYA,AbuCA,A5BoFA,ArB+DA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,AIZA,ALeA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,ArB+DA,AmCzGA;A0B7EA,APqBA,AvEqNA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,AIZA,ALeA,AhBgDA,AFMA,AoB5DA,A5BoFA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,ArB+DA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,AIZA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,ArB+DA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AIZA,AIZA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AgDhJA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AQxBA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AgDhJA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AQxBA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AgDhJA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AQxBA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ADGA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AQxBA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ADGA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,AoD5JA,AQxBA,ALeA,AhBgDA,AFMA,ARwBA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ADGA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ALeA,AhBgDA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ALeA,AhBgDA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AiDnJA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,ArE+MA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AiFnPA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AENA,ACHA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,ArB+DA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AJYA,AbuCA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AjBmDA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AjBmDA,A5BoFA,AmDzJA,AFMA,ACHA,AFMA,AIZA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AjBmDA,A5BoFA,AmDzJA,AFMA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A0B9EA,A4DpLA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AjBmDA,A5BoFA,AmDzJA,AFMA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,AsFlQA,AOrBA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,ADGA,AjBmDA,A5BoFA,AmDzJA,AFMA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,APqBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,APqBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,APqBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,Af6CA,ANkBA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,ArB+DA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,AgGhSA,ArB+DA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AHSA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,A5BoFA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,AGTA,AjEmMA,A2EjOA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,AGTA,AjEmMA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,AGTA,AjEmMA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AV8BA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AMlBA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AGTA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,A6FvRA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,A7BuFA,AHSA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AXiCA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AXiCA,AS3BA,AHSA,AlCsGA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AyB3EA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,A5BoFA,AYpCA,ADGA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AYpCA,ADGA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AkBtDA,AhGgSA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AYpCA,ADGA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A9C0IA,AgDhJA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,ACHA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,A9E0OA,AsBlEA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AwGxTA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AhCgGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,AENA,A7CuIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A3CiIA,A9D0LA,AgHhVA,ARwBA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AxDwKA,AvBqEA,AwGxTA,AFMA,ArC+GA,AoC5GA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AgChGA,AxFwQA,AvBqEA,AwGxTA,AFMA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AgChGA,AxFwQA,AvBqEA,AwGxTA,AFMA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AgChGA,AxFwQA,AvBqEA,AwGxTA,AFMA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,Ae7CA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA,AmCzGA;A0B7EA,AgChGA,AxFwQA,AvBqEA,AwGxTA,AFMA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AhCgGA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,A7CuIA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,A7CuIA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,A7CuIA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AlCsGA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,A7CuIA,AsClHA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AxFwQA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AavCA,APqBA,AlEsMA,AWjCA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsGlTA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,A3CiIA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,A7DuLA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,A7DuLA,A9D0LA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,A3HiXA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,APqBA,AvDqKA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,ACHA,A5HoXA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,ACHA,A5HoXA,AgHhVA,AENA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,ADGA,AkBtDA,ACHA,A5HoXA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A3BiFA,AlBsDA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,A5HoXA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,A5HoXA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,A5HoXA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AENA,A9H0XA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AENA,A9H0XA,AkHtVA,AV8BA,AiBnDA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AENA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ADGA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ADGA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ADGA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AgChGA,AIZA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AGTA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,ACHA,AKfA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,A9D0LA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,ARwBA,ACHA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AoC5GA,A5FoRA,AvBqEA,AsHlWA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AMlBA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AU9BA,AJYA,AFMA,ACHA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AsHlWA,AS3BA,AzB2EA,AmBzDA,AOrBA,A3BiFA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AkItYA,AZoCA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AkItYA,AZoCA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,AvBqEA,AkItYA,AZoCA,AS3BA,AzB2EA,AmBzDA,ApB4DA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AkItYA,AZoCA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AU9BA,AJYA,ADGA,AFMA,A9H0XA,AkHtVA,AOrBA,AJYA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AkItYA,AZoCA,AhBgDA,AmBzDA,ApB4DA,AkBtDA,AU9BA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AkItYA,AZoCA,AhBgDA,AmBzDA,ApB4DA,A4BpFA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AoI5YA,AFMA,AZoCA,AhBgDA,AmBzDA,ApB4DA,A4BpFA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AoI5YA,AFMA,AZoCA,AhBgDA,AmBzDA,ApB4DA,A4BpFA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AxDwKA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,A4BpFA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,A9G0UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,A4BpFA,AJYA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,A9G0UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,A9G0UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,ADGA,AhIgYA,AqH/VA,AavCA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,ADGA,AhIgYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,ADGA,AhIgYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,Ad0CA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,ADGA,AhIgYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,AGTA,AjBmDA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,AjImYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,AGTA,AjBmDA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,AjImYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,AGTA,AjBmDA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,AjImYA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,AnIyYA,AoI5YA,AGTA,AjBmDA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,AWjCA,A5IoaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,AmBzDA,ApB4DA,AwBxEA,AWjCA,A5IoaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwBxEA,AWjCA,A5IoaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwBxEA,AWjCA,ACHA,A7IuaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwBxEA,AWjCA,ACHA,A7IuaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwBxEA,AWjCA,ACHA,A7IuaA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwBxEA,AWjCA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AmCzGA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AKfA,ACHA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AmCzGA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AHSA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AHSA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AHSA,ACHA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA;A6DtLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AFMA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AFMA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AsClHA,AFMA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,AFMA,ACHA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,ADGA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,AyC3HA,A9C0IA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,ADGA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,AGTA,AJYA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,AGTA,AJYA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,AGTA,AJYA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,ADGA,A9I0aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AkItYA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,A/G6UA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,AhBgDA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AmDzJA,AMlBA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A4GpUA,ACHA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AFMA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,A/I6aA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,AxJwcA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,AxJwcA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,AxJwcA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,ARwBA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,ACHA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,AGTA,AFMA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,AGTA,AFMA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AMlBA,AGTA,AXiCA,AS3BA,AGTA,AFMA,AzJ2cA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AXiCA,AS3BA,AGTA,AFMA,AGTA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AXiCA,AS3BA,AGTA,AFMA,AGTA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AXiCA,AS3BA,AGTA,AFMA,AGTA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AXiCA,AS3BA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AXiCA,AS3BA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AFMA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ANkBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A6HvXA,AHSA;A7DwLA,AsDlKA,ACHA,AWjCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ANkBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ANkBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,APqBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,AGTA,AjBmDA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,APqBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ad0CA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,APqBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ad0CA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ad0CA,A4BpFA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,ADGA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,ACHA,ACHA,ARwBA,AGTA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,ARwBA,AGTA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,ALeA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,ALeA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AS3BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,AV8BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,AV8BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,AV8BA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,ALeA,A5JodA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,ACHA,AXiCA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,ACHA,AXiCA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,ACHA,AXiCA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,AwCxHA,AmBzDA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,ARwBA,AFMA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AV8BA,AIZA,AIZA,AjKmeA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AV8BA,AIZA,AIZA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AFMA,AiCnGA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AV8BA,AIZA,AIZA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AV8BA,AIZA,AIZA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AKfA,Af6CA,AIZA,AIZA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AKfA,Af6CA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AKfA,Af6CA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AKfA,ACHA,AhBgDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,ACHA,ACHA,AZoCA,AIZA,AIZA,AHSA,ACHA,AGTA,AKfA,ACHA,AhBgDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,AhBgDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,AjBmDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,AjBmDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,AjBmDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AvKqfA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,AZoCA,AIZA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,ACHA,ACHA,ACHA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,ACHA,ACHA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,ACHA,ACHA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,AoJ5bA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A7DwLA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,ADGA,A2DjLA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,A5CoIA,A0D9KA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,Ac1CA,AENA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AYpCA,A1H8WA,A6GvUA,Ac1CA,AgBhDA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,Ac1CA,AgBhDA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,Ac1CA,AgBhDA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,Ac1CA,AgBhDA,ARwBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,A3BiFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,A3BiFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AMlBA,AKfA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,A3BiFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AWjCA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AWjCA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AQxBA,AWjCA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AmBzDA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,AIZA,AHSA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AmBzDA,A5KogBA,A8K1gBA,AKfA,A/B6FA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,ACHA,AS3BA,AENA,AGTA,AFMA,AlBsDA,AmBzDA,A5KogBA,A8K1gBA,AKfA,A/B6FA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,ACHA,AS3BA,AENA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,A/B6FA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,ACHA,AS3BA,AENA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,ACHA,AS3BA,AENA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,AQxBA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,AvBqEA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,AvBqEA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,AvBqEA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,AxBwEA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,AxBwEA,ACHA,AWjCA,AGTA,AFMA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,AxBwEA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AzB2EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AzB2EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AKfA,ACHA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AzB2EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AMlBA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,ACHA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AMlBA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,ACHA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,AMlBA,AhCgGA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,ACHA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AIZA,APqBA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ADGA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ADGA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ADGA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ACHA,AFMA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ACHA,AFMA,A1B8EA,ACHA,AWjCA,ACHA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ACHA,AFMA,A1B8EA,ACHA,AYpCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,ACHA,AENA,ACHA,AFMA,AGTA,A7BuFA,ACHA,AYpCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,AGTA,ACHA,AFMA,AGTA,A7BuFA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A6GvUA,AyC3HA,ACHA,A5BoFA,A+B7FA,ACHA,AGTA,ACHA,AFMA,AGTA,A7BuFA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AsJlcA,ACHA,A5BoFA,A+B7FA,ACHA,AGTA,ACHA,AFMA,AIZA,ADGA,A7BuFA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AKfA,AvCqHA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AsJlcA,ACHA,A5BoFA,A+B7FA,ACHA,AIZA,AFMA,AIZA,ADGA,A7BuFA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AsJlcA,ACHA,A5BoFA,A+B7FA,ACHA,AIZA,AFMA,AIZA,ADGA,A7BuFA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AsJlcA,ACHA,A5BoFA,A+B7FA,ACHA,AIZA,AFMA,AIZA,ADGA,AENA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AKfA,AHSA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AIZA,AFMA,AIZA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AIZA,AFMA,AIZA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AIZA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AIZA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AIZA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A+B7FA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A0C9HA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A0C9HA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A0C9HA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AHSA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ANkBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,AuJrcA,A5BoFA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ANkBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ANkBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,A/B6FA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,AtCkHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,AtCkHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,AtCkHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AXiCA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,AjBmDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,AjBmDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,AjBmDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AlBsDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AlBsDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AlBsDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AvCqHA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AlBsDA,ACHA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AjBmDA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,ADGA,AMlBA,ACHA,AjBmDA,AQxBA,AJYA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,A+B7FA,AENA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,A2CjIA,AKfA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,AgDhJA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,AgDhJA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,ACHA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,AgDhJA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,ACHA,AOrBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2HjXA,AgDhJA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2KjgBA,ACHA,AjBmDA,AQxBA,AWjCA,Af6CA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2KjgBA,ACHA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2KjgBA,ACHA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A2KjgBA,ACHA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,AxDwKA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,AxDwKA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,AxDwKA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,AzD2KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AjBmDA,AQxBA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,AzD2KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,A5FoRA,AsDlKA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,AzD2KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,A1D8KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,A1D8KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,A1D8KA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,AavCA,ACHA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,ALeA,AGTA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,ACHA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AFMA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AFMA,A1C8HA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,A5CoIA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,APqBA,AQxBA,AMlBA,AQxBA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A8B1FA,ACHA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,Ac1CA,ApD4JA,Ac1CA,A5KogBA,A8K1gBA,A+B7FA,ACHA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,A0C9HA,A7CuIA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AOrBA,AGTA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ACHA,AtCkHA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AWjCA,AENA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AyD3KA,APqBA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AwLxiBA,AZoCA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AjBmDA,AFMA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ALeA,AHSA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AENA,AzE2NA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,ACHA,A5DoLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AsDlKA,A7BuFA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AgChGA,AGTA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,A4KpgBA,AT2BA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,AavCA,AnByDA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AmCzGA,AFMA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA,A0H9WA;A+B5FA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,AiCnGA,A3DiLA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,AlBsDA,A3EiOA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AqC/GA,A3EiOA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AiCnGA,AlCsGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,Ac1CA,A5KogBA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AmKzeA,ANkBA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ACHA,ArC+GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ADGA,ARwBA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,A6JvdA,AU9BA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,AT2BA,A5BoFA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AyB3EA,ArC+GA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AuCrHA,A3BiFA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,AYpCA,A1H8WA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,ApC4GA,A9J0dA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA,AvEqNA;AyJ1cA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,AlMskBA,A8K1gBA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA,AkDtJA;AkFrPA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AuKrfA,ApB4DA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;AoI3YA,AtCkHA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA,AZoCA;A8FzRA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;AkFrPA,A9G0UA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA,A7FuRA;A5BqFA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;AzH4WA,AmJzbA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;A0B7EA,A1B8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n/**\n * Export lib/mongoose\n *\n */\n\n\n\nmodule.exports = require('./lib/');\n","\n\n/*!\n * Module dependencies.\n */\n\nrequire('./driver').set(require('./drivers/node-mongodb-native'));\n\nconst Document = require('./document');\nconst EventEmitter = require('events').EventEmitter;\nconst Schema = require('./schema');\nconst SchemaType = require('./schematype');\nconst SchemaTypes = require('./schema/index');\nconst VirtualType = require('./virtualtype');\nconst STATES = require('./connectionstate');\nconst VALID_OPTIONS = require('./validoptions');\nconst Types = require('./types');\nconst Query = require('./query');\nconst Model = require('./model');\nconst applyPlugins = require('./helpers/schema/applyPlugins');\nconst driver = require('./driver');\nconst get = require('./helpers/get');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst legacyPluralize = require('./helpers/pluralize');\nconst utils = require('./utils');\nconst pkg = require('../package.json');\nconst cast = require('./cast');\nconst clearValidating = require('./plugins/clearValidating');\nconst removeSubdocs = require('./plugins/removeSubdocs');\nconst saveSubdocs = require('./plugins/saveSubdocs');\nconst trackTransaction = require('./plugins/trackTransaction');\nconst validateBeforeSave = require('./plugins/validateBeforeSave');\n\nconst Aggregate = require('./aggregate');\nconst PromiseProvider = require('./promise_provider');\nconst shardingPlugin = require('./plugins/sharding');\nconst trusted = require('./helpers/query/trusted').trusted;\nconst sanitizeFilter = require('./helpers/query/sanitizeFilter');\n\nconst defaultMongooseSymbol = Symbol.for('mongoose:default');\n\nrequire('./helpers/printJestWarning');\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * ####Example:\n *     const mongoose = require('mongoose');\n *     mongoose instanceof mongoose.Mongoose; // true\n *\n *     // Create a new Mongoose instance with its own `connect()`, `set()`, `model()`, etc.\n *     const m = new mongoose.Mongoose();\n *\n * @api public\n * @param {Object} options see [`Mongoose#set()` docs](/docs/api/mongoose.html#mongoose_Mongoose-set)\n */\nfunction Mongoose(options) {\n  this.connections = [];\n  this.models = {};\n  this.events = new EventEmitter();\n  // default global options\n  this.options = Object.assign({\n    pluralization: true,\n    autoIndex: true,\n    autoCreate: true\n  }, options);\n  const conn = this.createConnection(); // default connection\n  conn.models = this.models;\n\n  if (this.options.pluralization) {\n    this._pluralize = legacyPluralize;\n  }\n\n  // If a user creates their own Mongoose instance, give them a separate copy\n  // of the `Schema` constructor so they get separate custom types. (gh-6933)\n  if (!options || !options[defaultMongooseSymbol]) {\n    const _this = this;\n    this.Schema = function() {\n      this.base = _this;\n      return Schema.apply(this, arguments);\n    };\n    this.Schema.prototype = Object.create(Schema.prototype);\n\n    Object.assign(this.Schema, Schema);\n    this.Schema.base = this;\n    this.Schema.Types = Object.assign({}, Schema.Types);\n  } else {\n    // Hack to work around babel's strange behavior with\n    // `import mongoose, { Schema } from 'mongoose'`. Because `Schema` is not\n    // an own property of a Mongoose global, Schema will be undefined. See gh-5648\n    for (const key of ['Schema', 'model']) {\n      this[key] = Mongoose.prototype[key];\n    }\n  }\n  this.Schema.prototype.base = this;\n\n  Object.defineProperty(this, 'plugins', {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: [\n      [saveSubdocs, { deduplicate: true }],\n      [validateBeforeSave, { deduplicate: true }],\n      [shardingPlugin, { deduplicate: true }],\n      [removeSubdocs, { deduplicate: true }],\n      [trackTransaction, { deduplicate: true }],\n      [clearValidating, { deduplicate: true }]\n    ]\n  });\n}\nMongoose.prototype.cast = cast;\n/**\n * Expose connection states for user-land\n *\n * @memberOf Mongoose\n * @property STATES\n * @api public\n */\nMongoose.prototype.STATES = STATES;\n\n/**\n * Expose connection states for user-land\n *\n * @memberOf Mongoose\n * @property ConnectionStates\n * @api public\n */\nMongoose.prototype.ConnectionStates = STATES;\n\n/**\n * Object with `get()` and `set()` containing the underlying driver this Mongoose instance\n * uses to communicate with the database. A driver is a Mongoose-specific interface that defines functions\n * like `find()`.\n *\n * @memberOf Mongoose\n * @property driver\n * @api public\n */\n\nMongoose.prototype.driver = driver;\n\n/**\n * Sets mongoose options\n *\n * ####Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n *     mongoose.set('debug', true) // enable logging collection methods + arguments to the console/file\n *\n *     mongoose.set('debug', function(collectionName, methodName, ...methodArgs) {}); // use custom function to log collection methods + arguments\n *\n * Currently supported options are:\n * - 'debug': If `true`, prints the operations mongoose sends to MongoDB to the console. If a writable stream is passed, it will log to that stream, without colorization. If a callback function is passed, it will receive the collection name, the method name, then all arugments passed to the method. For example, if you wanted to replicate the default logging, you could output from the callback `Mongoose: ${collectionName}.${methodName}(${methodArgs.join(', ')})`.\n * - 'returnOriginal': If `false`, changes the default `returnOriginal` option to `findOneAndUpdate()`, `findByIdAndUpdate`, and `findOneAndReplace()` to false. This is equivalent to setting the `new` option to `true` for `findOneAndX()` calls by default. Read our [`findOneAndUpdate()` tutorial](/docs/tutorials/findoneandupdate.html) for more information.\n * - 'bufferCommands': enable/disable mongoose's buffering mechanism for all connections and models\n * - 'cloneSchemas': false by default. Set to `true` to `clone()` all schemas before compiling into a model.\n * - 'applyPluginsToDiscriminators': false by default. Set to true to apply global plugins to discriminator schemas. This typically isn't necessary because plugins are applied to the base schema and discriminators copy all middleware, methods, statics, and properties from the base schema.\n * - 'applyPluginsToChildSchemas': true by default. Set to false to skip applying global plugins to child schemas\n * - 'objectIdGetter': true by default. Mongoose adds a getter to MongoDB ObjectId's called `_id` that returns `this` for convenience with populate. Set this to false to remove the getter.\n * - 'runValidators': false by default. Set to true to enable [update validators](/docs/validation.html#update-validators) for all validators by default.\n * - 'toObject': `{ transform: true, flattenDecimals: true }` by default. Overwrites default objects to [`toObject()`](/docs/api.html#document_Document-toObject)\n * - 'toJSON': `{ transform: true, flattenDecimals: true }` by default. Overwrites default objects to [`toJSON()`](/docs/api.html#document_Document-toJSON), for determining how Mongoose documents get serialized by `JSON.stringify()`\n * - 'strict': true by default, may be `false`, `true`, or `'throw'`. Sets the default strict mode for schemas.\n * - 'strictQuery': same value as 'strict' by default (`true`), may be `false`, `true`, or `'throw'`. Sets the default [strictQuery](/docs/guide.html#strictQuery) mode for schemas.\n * - 'selectPopulatedPaths': true by default. Set to false to opt out of Mongoose adding all fields that you `populate()` to your `select()`. The schema-level option `selectPopulatedPaths` overwrites this one.\n * - 'maxTimeMS': If set, attaches [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/) to every query\n * - 'autoIndex': true by default. Set to false to disable automatic index creation for all models associated with this Mongoose instance.\n * - 'autoCreate': Set to `true` to make Mongoose call [`Model.createCollection()`](/docs/api/model.html#model_Model.createCollection) automatically when you create a model with `mongoose.model()` or `conn.model()`. This is useful for testing transactions, change streams, and other features that require the collection to exist.\n * - 'overwriteModels': Set to `true` to default to overwriting models with the same name when calling `mongoose.model()`, as opposed to throwing an `OverwriteModelError`.\n *\n * @param {String} key\n * @param {String|Function|Boolean} value\n * @api public\n */\n\nMongoose.prototype.set = function(key, value) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (VALID_OPTIONS.indexOf(key) === -1) throw new Error(`\\`${key}\\` is an invalid option.`);\n\n  if (arguments.length === 1) {\n    return _mongoose.options[key];\n  }\n\n  _mongoose.options[key] = value;\n\n  if (key === 'objectIdGetter') {\n    if (value) {\n      Object.defineProperty(mongoose.Types.ObjectId.prototype, '_id', {\n        enumerable: false,\n        configurable: true,\n        get: function() {\n          return this;\n        }\n      });\n    } else {\n      delete mongoose.Types.ObjectId.prototype._id;\n    }\n  }\n\n  return _mongoose;\n};\n\n/**\n * Gets mongoose options\n *\n * ####Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when managing multiple db connections.\n *\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n *\n *     // and options\n *     const opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database');\n *\n *     // and options\n *     const opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database', opts);\n *\n *     // and options\n *     const opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\n *     db = mongoose.createConnection('localhost', 'database', port, opts)\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.openUri('localhost', 'database', port, [opts]);\n *\n * @param {String} [uri] a mongodb:// URI\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html), except for 4 mongoose-specific options explained below.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](http://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {String} [options.dbName] The name of the database you want to use. If not provided, Mongoose uses the database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Number} [options.reconnectTries=30] If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every `reconnectInterval` milliseconds for `reconnectTries` times, and give up afterward. When the driver gives up, the mongoose connection emits a `reconnectFailed` event. This option does nothing for replica set connections.\n * @param {Number} [options.reconnectInterval=1000] See `reconnectTries` option above.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html).\n * @param {Number} [options.maxPoolSize=5] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=1] The minimum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.connectTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _during initial connection_. Defaults to 30000. This option is passed transparently to [Node.js' `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback).\n * @param {Number} [options.socketTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. A socket may be inactive because of either no activity or a long-running operation. This is set to `30000` by default, you should set this to 2-3x your longest running operation if you expect some of your database operations to run longer than 20 seconds. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0`, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @return {Connection} the created Connection object. Connections are thenable, so you can do `await mongoose.createConnection()`\n * @api public\n */\n\nMongoose.prototype.createConnection = function(uri, options, callback) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  const conn = new Connection(_mongoose);\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  _mongoose.connections.push(conn);\n  _mongoose.events.emit('createConnection', conn);\n\n  if (arguments.length > 0) {\n    conn.openUri(uri, options, callback);\n  }\n\n  return conn;\n};\n\n/**\n * Opens the default mongoose connection.\n *\n * ####Example:\n *\n *     mongoose.connect('mongodb://user:pass@localhost:port/database');\n *\n *     // replica sets\n *     const uri = 'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase';\n *     mongoose.connect(uri);\n *\n *     // with options\n *     mongoose.connect(uri, options);\n *\n *     // optional callback that gets fired when initial connection completed\n *     const uri = 'mongodb://nonexistent.domain:27000';\n *     mongoose.connect(uri, function(error) {\n *       // if error is truthy, the initial connection failed.\n *     })\n *\n * @param {String} uri(s)\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html), except for 4 mongoose-specific options explained below.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](http://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {Number} [options.bufferTimeoutMS=10000] Mongoose specific option. If `bufferCommands` is true, Mongoose will throw an error after `bufferTimeoutMS` if the operation is still buffered.\n * @param {String} [options.dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Number} [options.maxPoolSize=100] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=0] The minimum number of sockets the MongoDB driver will keep open for this connection.\n * @param {Number} [options.serverSelectionTimeoutMS] If `useUnifiedTopology = true`, the MongoDB driver will try to find a server to send any given operation to, and keep retrying for `serverSelectionTimeoutMS` milliseconds before erroring out. If not set, the MongoDB driver defaults to using `30000` (30 seconds).\n * @param {Number} [options.heartbeatFrequencyMS] If `useUnifiedTopology = true`, the MongoDB driver sends a heartbeat every `heartbeatFrequencyMS` to check on the status of the connection. A heartbeat is subject to `serverSelectionTimeoutMS`, so the MongoDB driver will retry failed heartbeats for up to 30 seconds by default. Mongoose only emits a `'disconnected'` event after a heartbeat has failed, so you may want to decrease this setting to reduce the time between when your server goes down and when Mongoose emits `'disconnected'`. We recommend you do **not** set this setting below 1000, too many heartbeats can lead to performance degradation.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Number} [options.reconnectTries=30] If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every `reconnectInterval` milliseconds for `reconnectTries` times, and give up afterward. When the driver gives up, the mongoose connection emits a `reconnectFailed` event. This option does nothing for replica set connections.\n * @param {Number} [options.reconnectInterval=1000] See `reconnectTries` option above.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html).\n * @param {Number} [options.connectTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _during initial connection_. Defaults to 30000. This option is passed transparently to [Node.js' `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback).\n * @param {Number} [options.socketTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. A socket may be inactive because of either no activity or a long-running operation. This is set to `30000` by default, you should set this to 2-3x your longest running operation if you expect some of your database operations to run longer than 20 seconds. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0`, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @param {Boolean} [options.autoCreate=false] Set to `true` to make Mongoose automatically call `createCollection()` on every model created on this connection.\n * @param {Function} [callback]\n * @see Mongoose#createConnection #index_Mongoose-createConnection\n * @api public\n * @return {Promise} resolves to `this` if connection succeeded\n */\n\nMongoose.prototype.connect = function(uri, options, callback) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n  const conn = _mongoose.connection;\n\n  return _mongoose._promiseOrCallback(callback, cb => {\n    conn.openUri(uri, options, err => {\n      if (err != null) {\n        return cb(err);\n      }\n      return cb(null, _mongoose);\n    });\n  });\n};\n\n/**\n * Runs `.close()` on all connections in parallel.\n *\n * @param {Function} [callback] called after all connection close, or when first error occurred.\n * @return {Promise} resolves when all connections are closed, or rejects with the first error that occurred.\n * @api public\n */\n\nMongoose.prototype.disconnect = function(callback) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  return _mongoose._promiseOrCallback(callback, cb => {\n    let remaining = _mongoose.connections.length;\n    if (remaining <= 0) {\n      return cb(null);\n    }\n    _mongoose.connections.forEach(conn => {\n      conn.close(function(error) {\n        if (error) {\n          return cb(error);\n        }\n        if (!--remaining) {\n          cb(null);\n        }\n      });\n    });\n  });\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://docs.mongodb.com/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://docs.mongodb.com/manual/core/retryable-writes/),\n * and [transactions](http://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `mongoose.startSession()` is equivalent to calling `mongoose.connection.startSession()`.\n * Sessions are scoped to a connection, so calling `mongoose.startSession()`\n * starts a session on the [default mongoose connection](/docs/api.html#mongoose_Mongoose-connection).\n *\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @param {Function} [callback]\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nMongoose.prototype.startSession = function() {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  return _mongoose.connection.startSession.apply(_mongoose.connection, arguments);\n};\n\n/**\n * Getter/setter around function for pluralizing collection names.\n *\n * @param {Function|null} [fn] overwrites the function used to pluralize collection names\n * @return {Function|null} the current function used to pluralize collection names, defaults to the legacy function from `mongoose-legacy-pluralize`.\n * @api public\n */\n\nMongoose.prototype.pluralize = function(fn) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (arguments.length > 0) {\n    _mongoose._pluralize = fn;\n  }\n  return _mongoose._pluralize;\n};\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection\n * created by the same `mongoose` instance.\n *\n * If you call `mongoose.model()` with twice the same name but a different schema,\n * you will get an `OverwriteModelError`. If you call `mongoose.model()` with\n * the same name and same schema, you'll get the same schema back.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     const schema = new Schema({ name: String });\n *     mongoose.model('Actor', schema);\n *\n *     // create a new connection\n *     const conn = mongoose.createConnection(..);\n *\n *     // create Actor model\n *     const Actor = conn.model('Actor', schema);\n *     conn.model('Actor') === Actor; // true\n *     conn.model('Actor', schema) === Actor; // true, same schema\n *     conn.model('Actor', schema, 'actors') === Actor; // true, same schema and collection name\n *\n *     // This throws an `OverwriteModelError` because the schema is different.\n *     conn.model('Actor', new Schema({ name: String }));\n *\n * _When no `collection` argument is passed, Mongoose uses the model name. If you don't like this behavior, either pass a collection name, use `mongoose.pluralize()`, or set your schemas collection name option._\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     const collectionName = 'actor'\n *     const M = mongoose.model('Actor', schema, collectionName)\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} [schema] the schema to use.\n * @param {String} [collection] name (optional, inferred from model name)\n * @return {Model} The model associated with `name`. Mongoose will create the model if it doesn't already exist.\n * @api public\n */\n\nMongoose.prototype.model = function(name, schema, collection, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !(schema instanceof Schema)) {\n    schema = new Schema(schema);\n  }\n  if (schema && !(schema instanceof Schema)) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  // handle internal options from connection.model()\n  options = options || {};\n\n  const originalSchema = schema;\n  if (schema) {\n    if (_mongoose.get('cloneSchemas')) {\n      schema = schema.clone();\n    }\n    _mongoose._applyPlugins(schema);\n  }\n\n  // connection.model() may be passing a different schema for\n  // an existing model name. in this case don't read from cache.\n  const overwriteModels = _mongoose.options.hasOwnProperty('overwriteModels') ?\n    _mongoose.options.overwriteModels :\n    options.overwriteModels;\n  if (_mongoose.models.hasOwnProperty(name) && options.cache !== false && overwriteModels !== true) {\n    if (originalSchema &&\n        originalSchema.instanceOfSchema &&\n        originalSchema !== _mongoose.models[name].schema) {\n      throw new _mongoose.Error.OverwriteModelError(name);\n    }\n    if (collection && collection !== _mongoose.models[name].collection.name) {\n      // subclass current model with alternate collection\n      const model = _mongoose.models[name];\n      schema = model.prototype.schema;\n      const sub = model.__subclass(_mongoose.connection, schema, collection);\n      // do not cache the sub model\n      return sub;\n    }\n    return _mongoose.models[name];\n  }\n  if (schema == null) {\n    throw new _mongoose.Error.MissingSchemaError(name);\n  }\n\n  const model = _mongoose._model(name, schema, collection, options);\n\n  _mongoose.connection.models[name] = model;\n  _mongoose.models[name] = model;\n\n  return model;\n};\n\n/*!\n * ignore\n */\n\nMongoose.prototype._model = function(name, schema, collection, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = model.name;\n    if (!(model.prototype instanceof Model)) {\n      throw new _mongoose.Error('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  if (schema) {\n    if (_mongoose.get('cloneSchemas')) {\n      schema = schema.clone();\n    }\n    _mongoose._applyPlugins(schema);\n  }\n\n  // Apply relevant \"global\" options to the schema\n  if (schema == null || !('pluralization' in schema.options)) {\n    schema.options.pluralization = _mongoose.options.pluralization;\n  }\n\n  if (!collection) {\n    collection = schema.get('collection') ||\n      utils.toCollectionName(name, _mongoose.pluralize());\n  }\n\n  const connection = options.connection || _mongoose.connection;\n  model = _mongoose.Model.compile(model || name, schema, collection, connection, _mongoose);\n\n  // Errors handled internally, so safe to ignore error\n  model.init(function $modelInitNoop() {});\n\n  connection.emit('model', model);\n\n  return model;\n};\n\n/**\n * Removes the model named `name` from the default connection, if it exists.\n * You can use this function to clean up any models you created in your tests to\n * prevent OverwriteModelErrors.\n *\n * Equivalent to `mongoose.connection.deleteModel(name)`.\n *\n * ####Example:\n *\n *     mongoose.model('User', new Schema({ name: String }));\n *     console.log(mongoose.model('User')); // Model object\n *     mongoose.deleteModel('User');\n *     console.log(mongoose.model('User')); // undefined\n *\n *     // Usually useful in a Mocha `afterEach()` hook\n *     afterEach(function() {\n *       mongoose.deleteModel(/.+/); // Delete every model\n *     });\n *\n * @api public\n * @param {String|RegExp} name if string, the name of the model to remove. If regexp, removes all models whose name matches the regexp.\n * @return {Mongoose} this\n */\n\nMongoose.prototype.deleteModel = function(name) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  _mongoose.connection.deleteModel(name);\n  delete _mongoose.models[name];\n  return _mongoose;\n};\n\n/**\n * Returns an array of model names created on this instance of Mongoose.\n *\n * ####Note:\n *\n * _Does not include names of models created using `connection.model()`._\n *\n * @api public\n * @return {Array}\n */\n\nMongoose.prototype.modelNames = function() {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  const names = Object.keys(_mongoose.models);\n  return names;\n};\n\n/**\n * Applies global plugins to `schema`.\n *\n * @param {Schema} schema\n * @api private\n */\n\nMongoose.prototype._applyPlugins = function(schema, options) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  options = options || {};\n  options.applyPluginsToDiscriminators = get(_mongoose,\n    'options.applyPluginsToDiscriminators', false);\n  options.applyPluginsToChildSchemas = get(_mongoose,\n    'options.applyPluginsToChildSchemas', true);\n  applyPlugins(schema, _mongoose.plugins, options, '$globalPluginsApplied');\n};\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @see plugins ./plugins.html\n * @api public\n */\n\nMongoose.prototype.plugin = function(fn, opts) {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n\n  _mongoose.plugins.push([fn, opts]);\n  return _mongoose;\n};\n\n/**\n * The Mongoose module's default connection. Equivalent to `mongoose.connections[0]`, see [`connections`](#mongoose_Mongoose-connections).\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](#index_Mongoose-model).\n *\n * To create a new connection, use [`createConnection()`](#mongoose_Mongoose-createConnection).\n *\n * @memberOf Mongoose\n * @instance\n * @property {Connection} connection\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function() {\n  return this.connections[0];\n});\n\nMongoose.prototype.__defineSetter__('connection', function(v) {\n  if (v instanceof Connection) {\n    this.connections[0] = v;\n    this.models = v.models;\n  }\n});\n\n/**\n * An array containing all [connections](connections.html) associated with this\n * Mongoose instance. By default, there is 1 connection. Calling\n * [`createConnection()`](#mongoose_Mongoose-createConnection) adds a connection\n * to this array.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     mongoose.connections.length; // 1, just the default connection\n *     mongoose.connections[0] === mongoose.connection; // true\n *\n *     mongoose.createConnection('mongodb://localhost:27017/test');\n *     mongoose.connections.length; // 2\n *\n * @memberOf Mongoose\n * @instance\n * @property {Array} connections\n * @api public\n */\n\nMongoose.prototype.connections;\n\n/*!\n * Connection\n */\n\nconst Connection = driver.get().getConnection();\n\n/*!\n * Collection\n */\n\nconst Collection = driver.get().Collection;\n\n/**\n * The Mongoose Aggregate constructor\n *\n * @method Aggregate\n * @api public\n */\n\nMongoose.prototype.Aggregate = Aggregate;\n\n/**\n * The Mongoose Collection constructor\n *\n * @method Collection\n * @api public\n */\n\nMongoose.prototype.Collection = Collection;\n\n/**\n * The Mongoose [Connection](#connection_Connection) constructor\n *\n * @memberOf Mongoose\n * @instance\n * @method Connection\n * @api public\n */\n\nMongoose.prototype.Connection = Connection;\n\n/**\n * The Mongoose version\n *\n * #### Example\n *\n *     console.log(mongoose.version); // '5.x.x'\n *\n * @property version\n * @api public\n */\n\nMongoose.prototype.version = pkg.version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const mongoose2 = new mongoose.Mongoose();\n *\n * @method Mongoose\n * @api public\n */\n\nMongoose.prototype.Mongoose = Mongoose;\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nMongoose.prototype.Schema = Schema;\n\n/**\n * The Mongoose [SchemaType](#schematype_SchemaType) constructor\n *\n * @method SchemaType\n * @api public\n */\n\nMongoose.prototype.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nMongoose.prototype.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nMongoose.prototype.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Embedded](/docs/schematypes.html#schemas)\n * - [DocumentArray](/docs/api/documentarraypath.html)\n * - [Decimal128](/docs/api.html#mongoose_Mongoose-Decimal128)\n * - [ObjectId](/docs/schematypes.html#objectids)\n * - [Map](/docs/schematypes.html#maps)\n * - [Subdocument](/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nMongoose.prototype.Types = Types;\n\n/**\n * The Mongoose [Query](#query_Query) constructor.\n *\n * @method Query\n * @api public\n */\n\nMongoose.prototype.Query = Query;\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @memberOf Mongoose\n * @instance\n * @property Promise\n * @api public\n */\n\nObject.defineProperty(Mongoose.prototype, 'Promise', {\n  get: function() {\n    return PromiseProvider.get();\n  },\n  set: function(lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nMongoose.prototype.PromiseProvider = PromiseProvider;\n\n/**\n * The Mongoose [Model](#model_Model) constructor.\n *\n * @method Model\n * @api public\n */\n\nMongoose.prototype.Model = Model;\n\n/**\n * The Mongoose [Document](/docs/api.html#Document) constructor.\n *\n * @method Document\n * @api public\n */\n\nMongoose.prototype.Document = Document;\n\n/**\n * The Mongoose DocumentProvider constructor. Mongoose users should not have to\n * use this directly\n *\n * @method DocumentProvider\n * @api public\n */\n\nMongoose.prototype.DocumentProvider = require('./document_provider');\n\n/**\n * The Mongoose ObjectId [SchemaType](/docs/schematypes.html). Used for\n * declaring paths in your schema that should be\n * [MongoDB ObjectIds](https://docs.mongodb.com/manual/reference/method/ObjectId/).\n * Do not use this to create a new ObjectId instance, use `mongoose.Types.ObjectId`\n * instead.\n *\n * ####Example:\n *\n *     const childSchema = new Schema({ parentId: mongoose.ObjectId });\n *\n * @property ObjectId\n * @api public\n */\n\nMongoose.prototype.ObjectId = SchemaTypes.ObjectId;\n\n/**\n * Returns true if Mongoose can cast the given value to an ObjectId, or\n * false otherwise.\n *\n * ####Example:\n *\n *     mongoose.isValidObjectId(new mongoose.Types.ObjectId()); // true\n *     mongoose.isValidObjectId('0123456789ab'); // true\n *     mongoose.isValidObjectId(6); // false\n *\n * @method isValidObjectId\n * @api public\n */\n\nMongoose.prototype.isValidObjectId = function(v) {\n  if (v == null) {\n    return true;\n  }\n  const base = this || mongoose;\n  const ObjectId = base.driver.get().ObjectId;\n  if (v instanceof ObjectId) {\n    return true;\n  }\n\n  if (v._id != null) {\n    if (v._id instanceof ObjectId) {\n      return true;\n    }\n    if (v._id.toString instanceof Function) {\n      v = v._id.toString();\n      if (typeof v === 'string' && v.length === 12) {\n        return true;\n      }\n      if (typeof v === 'string' && /^[0-9A-Fa-f]{24}$/.test(v)) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  if (v.toString instanceof Function) {\n    v = v.toString();\n  }\n\n  if (typeof v === 'string' && v.length === 12) {\n    return true;\n  }\n  if (typeof v === 'string' && /^[0-9A-Fa-f]{24}$/.test(v)) {\n    return true;\n  }\n\n  return false;\n};\n\nMongoose.prototype.syncIndexes = function() {\n  const _mongoose = this instanceof Mongoose ? this : mongoose;\n  return _mongoose.connection.syncIndexes();\n};\n\n/**\n * The Mongoose Decimal128 [SchemaType](/docs/schematypes.html). Used for\n * declaring paths in your schema that should be\n * [128-bit decimal floating points](http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html).\n * Do not use this to create a new Decimal128 instance, use `mongoose.Types.Decimal128`\n * instead.\n *\n * ####Example:\n *\n *     const vehicleSchema = new Schema({ fuelLevel: mongoose.Decimal128 });\n *\n * @property Decimal128\n * @api public\n */\n\nMongoose.prototype.Decimal128 = SchemaTypes.Decimal128;\n\n/**\n * The Mongoose Mixed [SchemaType](/docs/schematypes.html). Used for\n * declaring paths in your schema that Mongoose's change tracking, casting,\n * and validation should ignore.\n *\n * ####Example:\n *\n *     const schema = new Schema({ arbitrary: mongoose.Mixed });\n *\n * @property Mixed\n * @api public\n */\n\nMongoose.prototype.Mixed = SchemaTypes.Mixed;\n\n/**\n * The Mongoose Date [SchemaType](/docs/schematypes.html).\n *\n * ####Example:\n *\n *     const schema = new Schema({ test: Date });\n *     schema.path('test') instanceof mongoose.Date; // true\n *\n * @property Date\n * @api public\n */\n\nMongoose.prototype.Date = SchemaTypes.Date;\n\n/**\n * The Mongoose Number [SchemaType](/docs/schematypes.html). Used for\n * declaring paths in your schema that Mongoose should cast to numbers.\n *\n * ####Example:\n *\n *     const schema = new Schema({ num: mongoose.Number });\n *     // Equivalent to:\n *     const schema = new Schema({ num: 'number' });\n *\n * @property Number\n * @api public\n */\n\nMongoose.prototype.Number = SchemaTypes.Number;\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.Error = require('./error/index');\n\n/**\n * Mongoose uses this function to get the current time when setting\n * [timestamps](/docs/guide.html#timestamps). You may stub out this function\n * using a tool like [Sinon](https://www.npmjs.com/package/sinon) for testing.\n *\n * @method now\n * @returns Date the current time\n * @api public\n */\n\nMongoose.prototype.now = function now() { return new Date(); };\n\n/**\n * The Mongoose CastError constructor\n *\n * @method CastError\n * @param {String} type The name of the type\n * @param {Any} value The value that failed to cast\n * @param {String} path The path `a.b.c` in the doc where this cast error occurred\n * @param {Error} [reason] The original error that was thrown\n * @api public\n */\n\nMongoose.prototype.CastError = require('./error/cast');\n\n/**\n * The constructor used for schematype options\n *\n * @method SchemaTypeOptions\n * @api public\n */\n\nMongoose.prototype.SchemaTypeOptions = require('./options/SchemaTypeOptions');\n\n/**\n * The [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver Mongoose uses.\n *\n * @property mongo\n * @api public\n */\n\nMongoose.prototype.mongo = require('mongodb');\n\n/**\n * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.\n *\n * @property mquery\n * @api public\n */\n\nMongoose.prototype.mquery = require('mquery');\n\n/**\n * Sanitizes query filters against [query selector injection attacks](https://thecodebarbarian.com/2014/09/04/defending-against-query-selector-injection-attacks.html)\n * by wrapping any nested objects that have a property whose name starts with `$` in a `$eq`.\n *\n * ```javascript\n * const obj = { username: 'val', pwd: { $ne: null } };\n * sanitizeFilter(obj);\n * obj; // { username: 'val', pwd: { $eq: { $ne: null } } });\n * ```\n *\n * @method sanitizeFilter\n * @param {Object} filter\n * @returns Object the sanitized object\n * @api public\n */\n\nMongoose.prototype.sanitizeFilter = sanitizeFilter;\n\n/**\n * Tells `sanitizeFilter()` to skip the given object when filtering out potential [query selector injection attacks](https://thecodebarbarian.com/2014/09/04/defending-against-query-selector-injection-attacks.html).\n * Use this method when you have a known query selector that you want to use.\n *\n * ```javascript\n * const obj = { username: 'val', pwd: trusted({ $type: 'string', $eq: 'my secret' }) };\n * sanitizeFilter(obj);\n *\n * // Note that `sanitizeFilter()` did not add `$eq` around `$type`.\n * obj; // { username: 'val', pwd: { $type: 'string', $eq: 'my secret' } });\n * ```\n *\n * @method trusted\n * @param {Object} obj\n * @returns Object the passed in object\n * @api public\n */\n\nMongoose.prototype.trusted = trusted;\n\n/*!\n * ignore\n */\n\nMongoose.prototype._promiseOrCallback = function(callback, fn, ee) {\n  return promiseOrCallback(callback, fn, ee, this.Promise);\n};\n\n/*!\n * The exports object is an instance of Mongoose.\n *\n * @api public\n */\n\nconst mongoose = module.exports = exports = new Mongoose({\n  [defaultMongooseSymbol]: true\n});\n","\n\n/*!\n * ignore\n */\n\nlet driver = null;\n\nmodule.exports.get = function() {\n  return driver;\n};\n\nmodule.exports.set = function(v) {\n  driver = v;\n};\n","/*!\n * Module exports.\n */\n\n\n\nexports.Binary = require('./binary');\nexports.Collection = require('./collection');\nexports.Decimal128 = require('./decimal128');\nexports.ObjectId = require('./objectid');\nexports.ReadPreference = require('./ReadPreference');\nexports.getConnection = () => require('./connection');","\n/*!\n * Module dependencies.\n */\n\n\n\nconst Binary = require('mongodb').Binary;\n\nmodule.exports = exports = Binary;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseCollection = require('../../collection');\nconst MongooseError = require('../../error/mongooseError');\nconst Collection = require('mongodb').Collection;\nconst ObjectId = require('./objectid');\nconst get = require('../../helpers/get');\nconst getConstructorName = require('../../helpers/getConstructorName');\nconst sliced = require('sliced');\nconst stream = require('stream');\nconst util = require('util');\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) collection implementation.\n *\n * All methods methods from the [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver are copied and wrapped in queue management.\n *\n * @inherits Collection\n * @api private\n */\n\nfunction NativeCollection(name, conn, options) {\n  this.collection = null;\n  this.Promise = options.Promise || Promise;\n  this.modelName = options.modelName;\n  delete options.modelName;\n  this._closed = false;\n  MongooseCollection.apply(this, arguments);\n}\n\n/*!\n * Inherit from abstract Collection.\n */\n\nNativeCollection.prototype.__proto__ = MongooseCollection.prototype;\n\n/**\n * Called when the connection opens.\n *\n * @api private\n */\n\nNativeCollection.prototype.onOpen = function() {\n  const _this = this;\n\n  _this.collection = _this.conn.db.collection(_this.name);\n  MongooseCollection.prototype.onOpen.call(_this);\n  return _this.collection;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nNativeCollection.prototype.onClose = function(force) {\n  MongooseCollection.prototype.onClose.call(this, force);\n};\n\n/*!\n * ignore\n */\n\nconst syncCollectionMethods = { watch: true, find: true, aggregate: true };\n\n/*!\n * Copy the collection methods and make them subject to queues\n */\n\nfunction iter(i) {\n  NativeCollection.prototype[i] = function() {\n    const collection = this.collection;\n    const args = Array.from(arguments);\n    const _this = this;\n    const debug = get(_this, 'conn.base.options.debug');\n    const lastArg = arguments[arguments.length - 1];\n    const opId = new ObjectId();\n\n    // If user force closed, queueing will hang forever. See #5664\n    if (this.conn.$wasForceClosed) {\n      const error = new MongooseError('Connection was force closed');\n      if (args.length > 0 &&\n          typeof args[args.length - 1] === 'function') {\n        args[args.length - 1](error);\n        return;\n      } else {\n        throw error;\n      }\n    }\n\n    let _args = args;\n    let callback = null;\n    if (this._shouldBufferCommands() && this.buffer) {\n      if (syncCollectionMethods[i] && typeof lastArg !== 'function') {\n        throw new Error('Collection method ' + i + ' is synchronous');\n      }\n\n      this.conn.emit('buffer', {\n        _id: opId,\n        modelName: _this.modelName,\n        collectionName: _this.name,\n        method: i,\n        args: args\n      });\n\n      let callback;\n      let _args = args;\n      let promise = null;\n      let timeout = null;\n      if (syncCollectionMethods[i]) {\n        this.addQueue(() => {\n          lastArg.call(this, null, this[i].apply(this, _args.slice(0, _args.length - 1)));\n        }, []);\n      } else if (typeof lastArg === 'function') {\n        callback = function collectionOperationCallback() {\n          if (timeout != null) {\n            clearTimeout(timeout);\n          }\n          return lastArg.apply(this, arguments);\n        };\n        _args = args.slice(0, args.length - 1).concat([callback]);\n      } else {\n        promise = new this.Promise((resolve, reject) => {\n          callback = function collectionOperationCallback(err, res) {\n            if (timeout != null) {\n              clearTimeout(timeout);\n            }\n            if (err != null) {\n              return reject(err);\n            }\n            resolve(res);\n          };\n          _args = args.concat([callback]);\n          this.addQueue(i, _args);\n        });\n      }\n\n      const bufferTimeoutMS = this._getBufferTimeoutMS();\n      timeout = setTimeout(() => {\n        const removed = this.removeQueue(i, _args);\n        if (removed) {\n          const message = 'Operation `' + this.name + '.' + i + '()` buffering timed out after ' +\n            bufferTimeoutMS + 'ms';\n          const err = new MongooseError(message);\n          this.conn.emit('buffer-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, error: err });\n          callback(err);\n        }\n      }, bufferTimeoutMS);\n\n      if (!syncCollectionMethods[i] && typeof lastArg === 'function') {\n        this.addQueue(i, _args);\n        return;\n      }\n\n      return promise;\n    } else if (!syncCollectionMethods[i] && typeof lastArg === 'function') {\n      callback = function collectionOperationCallback(err, res) {\n        if (err != null) {\n          _this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, error: err });\n        } else {\n          _this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: _this.name, method: i, result: res });\n        }\n        return lastArg.apply(this, arguments);\n      };\n      _args = args.slice(0, args.length - 1).concat([callback]);\n    }\n\n    if (debug) {\n      if (typeof debug === 'function') {\n        debug.apply(_this,\n          [_this.name, i].concat(sliced(args, 0, args.length - 1)));\n      } else if (debug instanceof stream.Writable) {\n        this.$printToStream(_this.name, i, args, debug);\n      } else {\n        const color = debug.color == null ? true : debug.color;\n        const shell = debug.shell == null ? false : debug.shell;\n        this.$print(_this.name, i, args, color, shell);\n      }\n    }\n\n    this.conn.emit('operation-start', { _id: opId, modelName: _this.modelName, collectionName: this.name, method: i, params: _args });\n\n    try {\n      if (collection == null) {\n        const message = 'Cannot call `' + this.name + '.' + i + '()` before initial connection ' +\n          'is complete if `bufferCommands = false`. Make sure you `await mongoose.connect()` if ' +\n          'you have `bufferCommands = false`.';\n        throw new MongooseError(message);\n      }\n\n      if (syncCollectionMethods[i] && typeof lastArg === 'function') {\n        return lastArg.call(this, null, collection[i].apply(collection, _args.slice(0, _args.length - 1)));\n      }\n\n      const ret = collection[i].apply(collection, _args);\n      if (ret != null && typeof ret.then === 'function') {\n        return ret.then(\n          res => {\n            this.conn.emit('operation-end', { _id: opId, modelName: this.modelName, collectionName: this.name, method: i, result: res });\n            return res;\n          },\n          err => {\n            this.conn.emit('operation-end', { _id: opId, modelName: this.modelName, collectionName: this.name, method: i, error: err });\n            throw err;\n          }\n        );\n      }\n      return ret;\n    } catch (error) {\n      // Collection operation may throw because of max bson size, catch it here\n      // See gh-3906\n      if (typeof lastArg === 'function') {\n        return lastArg(error);\n      } else {\n        this.conn.emit('operation-end', { _id: opId, modelName: _this.modelName, collectionName: this.name, method: i, error: error });\n\n        throw error;\n      }\n    }\n  };\n}\n\nfor (const key of Object.getOwnPropertyNames(Collection.prototype)) {\n  // Janky hack to work around gh-3005 until we can get rid of the mongoose\n  // collection abstraction\n  const descriptor = Object.getOwnPropertyDescriptor(Collection.prototype, key);\n  // Skip properties with getters because they may throw errors (gh-8528)\n  if (descriptor.get !== undefined) {\n    continue;\n  }\n  if (typeof Collection.prototype[key] !== 'function') {\n    continue;\n  }\n\n  iter(key);\n}\n\n/**\n * Debug print helper\n *\n * @api public\n * @method $print\n */\n\nNativeCollection.prototype.$print = function(name, i, args, color, shell) {\n  const moduleName = color ? '\\x1B[0;36mMongoose:\\x1B[0m ' : 'Mongoose: ';\n  const functionCall = [name, i].join('.');\n  const _args = [];\n  for (let j = args.length - 1; j >= 0; --j) {\n    if (this.$format(args[j]) || _args.length) {\n      _args.unshift(this.$format(args[j], color, shell));\n    }\n  }\n  const params = '(' + _args.join(', ') + ')';\n\n  console.info(moduleName + functionCall + params);\n};\n\n/**\n * Debug print helper\n *\n * @api public\n * @method $print\n */\n\nNativeCollection.prototype.$printToStream = function(name, i, args, stream) {\n  const functionCall = [name, i].join('.');\n  const _args = [];\n  for (let j = args.length - 1; j >= 0; --j) {\n    if (this.$format(args[j]) || _args.length) {\n      _args.unshift(this.$format(args[j]));\n    }\n  }\n  const params = '(' + _args.join(', ') + ')';\n\n  stream.write(functionCall + params, 'utf8');\n};\n\n/**\n * Formatter for debug print args\n *\n * @api public\n * @method $format\n */\n\nNativeCollection.prototype.$format = function(arg, color, shell) {\n  const type = typeof arg;\n  if (type === 'function' || type === 'undefined') return '';\n  return format(arg, false, color, shell);\n};\n\n/*!\n * Debug print helper\n */\n\nfunction inspectable(representation) {\n  const ret = {\n    inspect: function() { return representation; }\n  };\n  if (util.inspect.custom) {\n    ret[util.inspect.custom] = ret.inspect;\n  }\n  return ret;\n}\nfunction map(o) {\n  return format(o, true);\n}\nfunction formatObjectId(x, key) {\n  x[key] = inspectable('ObjectId(\"' + x[key].toHexString() + '\")');\n}\nfunction formatDate(x, key, shell) {\n  if (shell) {\n    x[key] = inspectable('ISODate(\"' + x[key].toUTCString() + '\")');\n  } else {\n    x[key] = inspectable('new Date(\"' + x[key].toUTCString() + '\")');\n  }\n}\nfunction format(obj, sub, color, shell) {\n  if (obj && typeof obj.toBSON === 'function') {\n    obj = obj.toBSON();\n  }\n  if (obj == null) {\n    return obj;\n  }\n\n  const clone = require('../../helpers/clone');\n  let x = clone(obj, { transform: false });\n  const constructorName = getConstructorName(x);\n\n  if (constructorName === 'Binary') {\n    x = 'BinData(' + x.sub_type + ', \"' + x.toString('base64') + '\")';\n  } else if (constructorName === 'ObjectID') {\n    x = inspectable('ObjectId(\"' + x.toHexString() + '\")');\n  } else if (constructorName === 'Date') {\n    x = inspectable('new Date(\"' + x.toUTCString() + '\")');\n  } else if (constructorName === 'Object') {\n    const keys = Object.keys(x);\n    const numKeys = keys.length;\n    let key;\n    for (let i = 0; i < numKeys; ++i) {\n      key = keys[i];\n      if (x[key]) {\n        let error;\n        if (typeof x[key].toBSON === 'function') {\n          try {\n            // `session.toBSON()` throws an error. This means we throw errors\n            // in debug mode when using transactions, see gh-6712. As a\n            // workaround, catch `toBSON()` errors, try to serialize without\n            // `toBSON()`, and rethrow if serialization still fails.\n            x[key] = x[key].toBSON();\n          } catch (_error) {\n            error = _error;\n          }\n        }\n        const _constructorName = getConstructorName(x[key]);\n        if (_constructorName === 'Binary') {\n          x[key] = 'BinData(' + x[key].sub_type + ', \"' +\n            x[key].buffer.toString('base64') + '\")';\n        } else if (_constructorName === 'Object') {\n          x[key] = format(x[key], true);\n        } else if (_constructorName === 'ObjectID') {\n          formatObjectId(x, key);\n        } else if (_constructorName === 'Date') {\n          formatDate(x, key, shell);\n        } else if (_constructorName === 'ClientSession') {\n          x[key] = inspectable('ClientSession(\"' +\n            get(x[key], 'id.id.buffer', '').toString('hex') + '\")');\n        } else if (Array.isArray(x[key])) {\n          x[key] = x[key].map(map);\n        } else if (error != null) {\n          // If there was an error with `toBSON()` and the object wasn't\n          // already converted to a string representation, rethrow it.\n          // Open to better ideas on how to handle this.\n          throw error;\n        }\n      }\n    }\n  }\n  if (sub) {\n    return x;\n  }\n\n  return util.\n    inspect(x, false, 10, color).\n    replace(/\\n/g, '').\n    replace(/\\s{2,}/g, ' ');\n}\n\n/**\n * Retrieves information about this collections indexes.\n *\n * @param {Function} callback\n * @method getIndexes\n * @api public\n */\n\nNativeCollection.prototype.getIndexes = NativeCollection.prototype.indexInformation;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeCollection;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst STATES = require('./connectionstate');\nconst immediate = require('./helpers/immediate');\n\n/**\n * Abstract Collection constructor\n *\n * This is the base class that drivers inherit from and implement.\n *\n * @param {String} name name of the collection\n * @param {Connection} conn A MongooseConnection instance\n * @param {Object} opts optional collection options\n * @api public\n */\n\nfunction Collection(name, conn, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  if (opts.capped === void 0) {\n    opts.capped = {};\n  }\n\n  if (typeof opts.capped === 'number') {\n    opts.capped = { size: opts.capped };\n  }\n\n  this.opts = opts;\n  this.name = name;\n  this.collectionName = name;\n  this.conn = conn;\n  this.queue = [];\n  this.buffer = true;\n  this.emitter = new EventEmitter();\n\n  if (STATES.connected === this.conn.readyState) {\n    this.onOpen();\n  }\n}\n\n/**\n * The collection name\n *\n * @api public\n * @property name\n */\n\nCollection.prototype.name;\n\n/**\n * The collection name\n *\n * @api public\n * @property collectionName\n */\n\nCollection.prototype.collectionName;\n\n/**\n * The Connection instance\n *\n * @api public\n * @property conn\n */\n\nCollection.prototype.conn;\n\n/**\n * Called when the database connects\n *\n * @api private\n */\n\nCollection.prototype.onOpen = function() {\n  this.buffer = false;\n  immediate(() => this.doQueue());\n};\n\n/**\n * Called when the database disconnects\n *\n * @api private\n */\n\nCollection.prototype.onClose = function() {};\n\n/**\n * Queues a method for later execution when its\n * database connection opens.\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.addQueue = function(name, args) {\n  this.queue.push([name, args]);\n  return this;\n};\n\n/**\n * Removes a queued method\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.removeQueue = function(name, args) {\n  const index = this.queue.findIndex(v => v[0] === name && v[1] === args);\n  if (index === -1) {\n    return false;\n  }\n  this.queue.splice(index, 1);\n  return true;\n};\n\n/**\n * Executes all queued methods and clears the queue.\n *\n * @api private\n */\n\nCollection.prototype.doQueue = function() {\n  for (const method of this.queue) {\n    if (typeof method[0] === 'function') {\n      method[0].apply(this, method[1]);\n    } else {\n      this[method[0]].apply(this, method[1]);\n    }\n  }\n  this.queue = [];\n  const _this = this;\n  immediate(function() {\n    _this.emitter.emit('queue');\n  });\n  return this;\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.ensureIndex = function() {\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.createIndex = function() {\n  throw new Error('Collection#createIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findAndModify = function() {\n  throw new Error('Collection#findAndModify unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndUpdate = function() {\n  throw new Error('Collection#findOneAndUpdate unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndDelete = function() {\n  throw new Error('Collection#findOneAndDelete unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndReplace = function() {\n  throw new Error('Collection#findOneAndReplace unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOne = function() {\n  throw new Error('Collection#findOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.find = function() {\n  throw new Error('Collection#find unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insert = function() {\n  throw new Error('Collection#insert unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insertOne = function() {\n  throw new Error('Collection#insertOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insertMany = function() {\n  throw new Error('Collection#insertMany unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.save = function() {\n  throw new Error('Collection#save unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.update = function() {\n  throw new Error('Collection#update unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.getIndexes = function() {\n  throw new Error('Collection#getIndexes unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.mapReduce = function() {\n  throw new Error('Collection#mapReduce unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.watch = function() {\n  throw new Error('Collection#watch unimplemented by driver');\n};\n\n/*!\n * ignore\n */\n\nCollection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\n  const opts = this.opts;\n\n  if (opts.bufferCommands != null) {\n    return opts.bufferCommands;\n  }\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferCommands != null) {\n    return opts.schemaUserProvidedOptions.bufferCommands;\n  }\n\n  return this.conn._shouldBufferCommands();\n};\n\n/*!\n * ignore\n */\n\nCollection.prototype._getBufferTimeoutMS = function _getBufferTimeoutMS() {\n  const conn = this.conn;\n  const opts = this.opts;\n\n  if (opts.bufferTimeoutMS != null) {\n    return opts.bufferTimeoutMS;\n  }\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferTimeoutMS != null) {\n    return opts.schemaUserProvidedOptions.bufferTimeoutMS;\n  }\n  if (conn.config.bufferTimeoutMS != null) {\n    return conn.config.bufferTimeoutMS;\n  }\n  if (conn.base != null && conn.base.get('bufferTimeoutMS') != null) {\n    return conn.base.get('bufferTimeoutMS');\n  }\n  return 10000;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Collection;\n","\n/*!\n * Connection states\n */\n\n\n\nconst STATES = module.exports = exports = Object.create(null);\n\nconst disconnected = 'disconnected';\nconst connected = 'connected';\nconst connecting = 'connecting';\nconst disconnecting = 'disconnecting';\nconst uninitialized = 'uninitialized';\n\nSTATES[0] = disconnected;\nSTATES[1] = connected;\nSTATES[2] = connecting;\nSTATES[3] = disconnecting;\nSTATES[99] = uninitialized;\n\nSTATES[disconnected] = 0;\nSTATES[connected] = 1;\nSTATES[connecting] = 2;\nSTATES[disconnecting] = 3;\nSTATES[uninitialized] = 99;\n","/*!\n * Centralize this so we can more easily work around issues with people\n * stubbing out `process.nextTick()` in tests using sinon:\n * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time\n * See gh-6074\n */\n\n\n\nconst nextTick = process.nextTick.bind(process);\n\nmodule.exports = function immediate(cb) {\n  return nextTick(cb);\n};\n","\n\n/*!\n * ignore\n */\n\nclass MongooseError extends Error { }\n\nObject.defineProperty(MongooseError.prototype, 'name', {\n  value: 'MongooseError'\n});\n\nmodule.exports = MongooseError;\n","\n/*!\n * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId\n * @constructor NodeMongoDbObjectId\n * @see ObjectId\n */\n\n\n\nconst ObjectId = require('mongodb').ObjectId;\n\n/*!\n * ignore\n */\n\nmodule.exports = exports = ObjectId;\n","\n\n/*!\n * Simplified lodash.get to work around the annoying null quirk. See:\n * https://github.com/lodash/lodash/issues/3659\n */\n\nmodule.exports = function get(obj, path, def) {\n  let parts;\n  let isPathArray = false;\n  if (typeof path === 'string') {\n    if (path.indexOf('.') === -1) {\n      const _v = getProperty(obj, path);\n      if (_v == null) {\n        return def;\n      }\n      return _v;\n    }\n\n    parts = path.split('.');\n  } else {\n    isPathArray = true;\n    parts = path;\n\n    if (parts.length === 1) {\n      const _v = getProperty(obj, parts[0]);\n      if (_v == null) {\n        return def;\n      }\n      return _v;\n    }\n  }\n  let rest = path;\n  let cur = obj;\n  for (const part of parts) {\n    if (cur == null) {\n      return def;\n    }\n\n    // `lib/cast.js` depends on being able to get dotted paths in updates,\n    // like `{ $set: { 'a.b': 42 } }`\n    if (!isPathArray && cur[rest] != null) {\n      return cur[rest];\n    }\n\n    cur = getProperty(cur, part);\n\n    if (!isPathArray) {\n      rest = rest.substr(part.length + 1);\n    }\n  }\n\n  return cur == null ? def : cur;\n};\n\nfunction getProperty(obj, prop) {\n  if (obj == null) {\n    return obj;\n  }\n  if (obj instanceof Map) {\n    return obj.get(prop);\n  }\n  return obj[prop];\n}","\n\n/*!\n * If `val` is an object, returns constructor name, if possible. Otherwise returns undefined.\n */\n\nmodule.exports = function getConstructorName(val) {\n  if (val == null) {\n    return void 0;\n  }\n  if (typeof val.constructor !== 'function') {\n    return void 0;\n  }\n  return val.constructor.name;\n};","\n\n\nconst cloneRegExp = require('regexp-clone');\nconst Decimal = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst specialProperties = require('./specialProperties');\nconst isMongooseObject = require('./isMongooseObject');\nconst getFunctionName = require('./getFunctionName');\nconst isBsonType = require('./isBsonType');\nconst isObject = require('./isObject');\nconst symbols = require('./symbols');\nconst trustedSymbol = require('./query/trusted').trustedSymbol;\nconst utils = require('../utils');\n\n\n/*!\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.\n * @return {Object} the cloned object\n * @api private\n */\n\nfunction clone(obj, options, isArrayChild) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    // Single nested subdocs should apply getters later in `applyGetters()`\n    // when calling `toObject()`. See gh-7442, gh-8295\n    if (options && options._skipSingleNestedGetters && obj.$isSingleNested) {\n      options = Object.assign({}, options, { getters: false });\n    }\n\n    if (utils.isPOJO(obj) && obj.$__ != null && obj._doc != null) {\n      return obj._doc;\n    }\n\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      return obj.toJSON(options);\n    }\n    return obj.toObject(options);\n  }\n\n  if (obj.constructor) {\n    switch (getFunctionName(obj.constructor)) {\n      case 'Object':\n        return cloneObject(obj, options, isArrayChild);\n      case 'Date':\n        return new obj.constructor(+obj);\n      case 'RegExp':\n        return cloneRegExp(obj);\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (obj instanceof ObjectId) {\n    return new ObjectId(obj.id);\n  }\n\n  if (isBsonType(obj, 'Decimal128')) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n    return Decimal.fromString(obj.toString());\n  }\n\n  if (!obj.constructor && isObject(obj)) {\n    // object created with Object.create(null)\n    return cloneObject(obj, options, isArrayChild);\n  }\n\n  if (obj[symbols.schemaTypeSymbol]) {\n    return obj.clone();\n  }\n\n  // If we're cloning this object to go into a MongoDB command,\n  // and there's a `toBSON()` function, assume this object will be\n  // stored as a primitive in MongoDB and doesn't need to be cloned.\n  if (options && options.bson && typeof obj.toBSON === 'function') {\n    return obj;\n  }\n\n  if (obj.valueOf != null) {\n    return obj.valueOf();\n  }\n\n  return cloneObject(obj, options, isArrayChild);\n}\nmodule.exports = clone;\n\n/*!\n * ignore\n */\n\nfunction cloneObject(obj, options, isArrayChild) {\n  const minimize = options && options.minimize;\n  const ret = {};\n  let hasKeys;\n\n  if (obj[trustedSymbol]) {\n    ret[trustedSymbol] = obj[trustedSymbol];\n  }\n\n  for (const k of Object.keys(obj)) {\n    if (specialProperties.has(k)) {\n      continue;\n    }\n\n    // Don't pass `isArrayChild` down\n    const val = clone(obj[k], options);\n\n    if (!minimize || (typeof val !== 'undefined')) {\n      if (minimize === false && typeof val === 'undefined') {\n        delete ret[k];\n      } else {\n        hasKeys || (hasKeys = true);\n        ret[k] = val;\n      }\n    }\n  }\n\n  return minimize && !isArrayChild ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  const ret = [];\n\n  for (const item of arr) {\n    ret.push(clone(item, options, true));\n  }\n\n  return ret;\n}","/**\n * ObjectId type constructor\n *\n * ####Example\n *\n *     const id = new mongoose.Types.ObjectId;\n *\n * @constructor ObjectId\n */\n\n\n\nmodule.exports = require('../driver').get().Decimal128;\n","/**\n * ObjectId type constructor\n *\n * ####Example\n *\n *     const id = new mongoose.Types.ObjectId;\n *\n * @constructor ObjectId\n */\n\n\n\nconst ObjectId = require('../driver').get().ObjectId;\nconst objectIdSymbol = require('../helpers/symbols').objectIdSymbol;\n\n/*!\n * Getter for convenience with populate, see gh-6115\n */\n\nObject.defineProperty(ObjectId.prototype, '_id', {\n  enumerable: false,\n  configurable: true,\n  get: function() {\n    return this;\n  }\n});\n\n/*!\n * Convenience `valueOf()` to allow comparing ObjectIds using double equals re: gh-7299\n */\n\n\nif (!ObjectId.prototype.hasOwnProperty('valueOf')) {\n  ObjectId.prototype.valueOf = function objectIdValueOf() {\n    return this.toString();\n  };\n}\n\nObjectId.prototype[objectIdSymbol] = true;\n\nmodule.exports = ObjectId;\n","\n\nexports.arrayAtomicsBackupSymbol = Symbol('mongoose#Array#atomicsBackup');\nexports.arrayAtomicsSymbol = Symbol('mongoose#Array#_atomics');\nexports.arrayParentSymbol = Symbol('mongoose#Array#_parent');\nexports.arrayPathSymbol = Symbol('mongoose#Array#_path');\nexports.arraySchemaSymbol = Symbol('mongoose#Array#_schema');\nexports.documentArrayParent = Symbol('mongoose:documentArrayParent');\nexports.documentIsSelected = Symbol('mongoose#Document#isSelected');\nexports.documentIsModified = Symbol('mongoose#Document#isModified');\nexports.documentModifiedPaths = Symbol('mongoose#Document#modifiedPaths');\nexports.documentSchemaSymbol = Symbol('mongoose#Document#schema');\nexports.getSymbol = Symbol('mongoose#Document#get');\nexports.modelSymbol = Symbol('mongoose#Model');\nexports.objectIdSymbol = Symbol('mongoose#ObjectId');\nexports.populateModelSymbol = Symbol('mongoose.PopulateOptions#Model');\nexports.schemaTypeSymbol = Symbol('mongoose#schemaType');\nexports.sessionNewDocuments = Symbol('mongoose:ClientSession#newDocuments');\nexports.scopeSymbol = Symbol('mongoose#Document#scope');\nexports.validatorErrorSymbol = Symbol('mongoose:validatorError');","\n\nmodule.exports = new Set(['__proto__', 'constructor', 'prototype']);","\n\n/*!\n * Returns if `v` is a mongoose object that has a `toObject()` method we can use.\n *\n * This is for compatibility with libs like Date.js which do foolish things to Natives.\n *\n * @param {any} v\n * @api private\n */\n\nmodule.exports = function(v) {\n  if (v == null) {\n    return false;\n  }\n\n  return v.$__ != null || // Document\n    v.isMongooseArray || // Array or Document Array\n    v.isMongooseBuffer || // Buffer\n    v.$isMongooseMap; // Map\n};","\n\nmodule.exports = function(fn) {\n  if (fn.name) {\n    return fn.name;\n  }\n  return (fn.toString().trim().match(/^function\\s*([^\\s(]+)/) || [])[1];\n};\n","\n\nconst get = require('./get');\n\n/*!\n * Get the bson type, if it exists\n */\n\nfunction isBsonType(obj, typename) {\n  return get(obj, '_bsontype', void 0) === typename;\n}\n\nmodule.exports = isBsonType;\n","\n\n/*!\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nmodule.exports = function(arg) {\n  if (Buffer.isBuffer(arg)) {\n    return true;\n  }\n  return Object.prototype.toString.call(arg) === '[object Object]';\n};","\n\nconst trustedSymbol = Symbol('mongoose#trustedSymbol');\n\nexports.trustedSymbol = trustedSymbol;\n\nexports.trusted = function trusted(obj) {\n  if (obj == null || typeof obj !== 'object') {\n    return obj;\n  }\n  obj[trustedSymbol] = true;\n  return obj;\n};","\n\n/*!\n * Module dependencies.\n */\n\nconst ms = require('ms');\nconst mpath = require('mpath');\nconst sliced = require('sliced');\nconst Decimal = require('./types/decimal128');\nconst ObjectId = require('./types/objectid');\nconst PopulateOptions = require('./options/PopulateOptions');\nconst clone = require('./helpers/clone');\nconst immediate = require('./helpers/immediate');\nconst isObject = require('./helpers/isObject');\nconst isBsonType = require('./helpers/isBsonType');\nconst getFunctionName = require('./helpers/getFunctionName');\nconst isMongooseObject = require('./helpers/isMongooseObject');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst schemaMerge = require('./helpers/schema/merge');\nconst specialProperties = require('./helpers/specialProperties');\nconst { trustedSymbol } = require('./helpers/query/trusted');\n\nlet Document;\n\nexports.specialProperties = specialProperties;\n\n/*!\n * Produces a collection name from model `name`. By default, just returns\n * the model name\n *\n * @param {String} name a model name\n * @param {Function} pluralize function that pluralizes the collection name\n * @return {String} a collection name\n * @api private\n */\n\nexports.toCollectionName = function(name, pluralize) {\n  if (name === 'system.profile') {\n    return name;\n  }\n  if (name === 'system.indexes') {\n    return name;\n  }\n  if (typeof pluralize === 'function') {\n    return pluralize(name);\n  }\n  return name;\n};\n\n/*!\n * Determines if `a` and `b` are deep equal.\n *\n * Modified from node/lib/assert.js\n *\n * @param {any} a a value to compare to `b`\n * @param {any} b a value to compare to `a`\n * @return {Boolean}\n * @api private\n */\n\nexports.deepEqual = function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' && typeof b !== 'object') {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n\n  if ((isBsonType(a, 'ObjectID') && isBsonType(b, 'ObjectID')) ||\n      (isBsonType(a, 'Decimal128') && isBsonType(b, 'Decimal128'))) {\n    return a.toString() === b.toString();\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return a.source === b.source &&\n        a.ignoreCase === b.ignoreCase &&\n        a.multiline === b.multiline &&\n        a.global === b.global;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  if (a instanceof Map && b instanceof Map) {\n    return deepEqual(Array.from(a.keys()), Array.from(b.keys())) &&\n      deepEqual(Array.from(a.values()), Array.from(b.values()));\n  }\n\n  // Handle MongooseNumbers\n  if (a instanceof Number && b instanceof Number) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (Buffer.isBuffer(a)) {\n    return exports.buffer.areEqual(a, b);\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    const len = a.length;\n    if (len !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < len; ++i) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (a.$__ != null) {\n    a = a._doc;\n  } else if (isMongooseObject(a)) {\n    a = a.toObject();\n  }\n\n  if (b.$__ != null) {\n    b = b._doc;\n  } else if (isMongooseObject(b)) {\n    b = b.toObject();\n  }\n\n  const ka = Object.keys(a);\n  const kb = Object.keys(b);\n  const kaLength = ka.length;\n\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (kaLength !== kb.length) {\n    return false;\n  }\n\n  // ~~~cheap key test\n  for (let i = kaLength - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) {\n      return false;\n    }\n  }\n\n  // equivalent values for every corresponding key, and\n  // ~~~possibly expensive deep test\n  for (const key of ka) {\n    if (!deepEqual(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*!\n * Get the last element of an array\n */\n\nexports.last = function(arr) {\n  if (arr.length > 0) {\n    return arr[arr.length - 1];\n  }\n  return void 0;\n};\n\nexports.clone = clone;\n\n/*!\n * ignore\n */\n\nexports.promiseOrCallback = promiseOrCallback;\n\n/*!\n * ignore\n */\n\nexports.cloneArrays = function cloneArrays(arr) {\n  if (!Array.isArray(arr)) {\n    return arr;\n  }\n\n  return arr.map(el => exports.cloneArrays(el));\n};\n\n/*!\n * ignore\n */\n\nexports.omit = function omit(obj, keys) {\n  if (keys == null) {\n    return Object.assign({}, obj);\n  }\n  if (!Array.isArray(keys)) {\n    keys = [keys];\n  }\n\n  const ret = Object.assign({}, obj);\n  for (const key of keys) {\n    delete ret[key];\n  }\n  return ret;\n};\n\n\n/*!\n * Shallow copies defaults into options.\n *\n * @param {Object} defaults\n * @param {Object} options\n * @return {Object} the merged object\n * @api private\n */\n\nexports.options = function(defaults, options) {\n  const keys = Object.keys(defaults);\n  let i = keys.length;\n  let k;\n\n  options = options || {};\n\n  while (i--) {\n    k = keys[i];\n    if (!(k in options)) {\n      options[k] = defaults[k];\n    }\n  }\n\n  return options;\n};\n\n/*!\n * Generates a random string\n *\n * @api private\n */\n\nexports.random = function() {\n  return Math.random().toString().substr(3);\n};\n\n/*!\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */\n\nexports.merge = function merge(to, from, options, path) {\n  options = options || {};\n\n  const keys = Object.keys(from);\n  let i = 0;\n  const len = keys.length;\n  let key;\n\n  if (from[trustedSymbol]) {\n    to[trustedSymbol] = from[trustedSymbol];\n  }\n\n  path = path || '';\n  const omitNested = options.omitNested || {};\n\n  while (i < len) {\n    key = keys[i++];\n    if (options.omit && options.omit[key]) {\n      continue;\n    }\n    if (omitNested[path]) {\n      continue;\n    }\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    if (to[key] == null) {\n      to[key] = from[key];\n    } else if (exports.isObject(from[key])) {\n      if (!exports.isObject(to[key])) {\n        to[key] = {};\n      }\n      if (from[key] != null) {\n        // Skip merging schemas if we're creating a discriminator schema and\n        // base schema has a given path as a single nested but discriminator schema\n        // has the path as a document array, or vice versa (gh-9534)\n        if (options.isDiscriminatorSchemaMerge &&\n            (from[key].$isSingleNested && to[key].$isMongooseDocumentArray) ||\n            (from[key].$isMongooseDocumentArray && to[key].$isSingleNested)) {\n          continue;\n        } else if (from[key].instanceOfSchema) {\n          if (to[key].instanceOfSchema) {\n            schemaMerge(to[key], from[key].clone(), options.isDiscriminatorSchemaMerge);\n          } else {\n            to[key] = from[key].clone();\n          }\n          continue;\n        } else if (from[key] instanceof ObjectId) {\n          to[key] = new ObjectId(from[key]);\n          continue;\n        }\n      }\n      merge(to[key], from[key], options, path ? path + '.' + key : key);\n    } else if (options.overwrite) {\n      to[key] = from[key];\n    }\n  }\n};\n\n/*!\n * Applies toObject recursively.\n *\n * @param {Document|Array|Object} obj\n * @return {Object}\n * @api private\n */\n\nexports.toObject = function toObject(obj) {\n  Document || (Document = require('./document'));\n  let ret;\n\n  if (obj == null) {\n    return obj;\n  }\n\n  if (obj instanceof Document) {\n    return obj.toObject();\n  }\n\n  if (Array.isArray(obj)) {\n    ret = [];\n\n    for (const doc of obj) {\n      ret.push(toObject(doc));\n    }\n\n    return ret;\n  }\n\n  if (exports.isPOJO(obj)) {\n    ret = {};\n\n    if (obj[trustedSymbol]) {\n      ret[trustedSymbol] = obj[trustedSymbol];\n    }\n\n    for (const k of Object.keys(obj)) {\n      if (specialProperties.has(k)) {\n        continue;\n      }\n      ret[k] = toObject(obj[k]);\n    }\n\n    return ret;\n  }\n\n  return obj;\n};\n\nexports.isObject = isObject;\n\n/*!\n * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,\n * `arg` must be an object but not an instance of any special class, like String,\n * ObjectId, etc.\n *\n * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nexports.isPOJO = function isPOJO(arg) {\n  if (arg == null || typeof arg !== 'object') {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(arg);\n  // Prototype may be null if you used `Object.create(null)`\n  // Checking `proto`'s constructor is safe because `getPrototypeOf()`\n  // explicitly crosses the boundary from object data to object metadata\n  return !proto || proto.constructor.name === 'Object';\n};\n\n/*!\n * Determines if `arg` is an object that isn't an instance of a built-in value\n * class, like Array, Buffer, ObjectId, etc.\n */\n\nexports.isNonBuiltinObject = function isNonBuiltinObject(val) {\n  return typeof val === 'object' &&\n    !exports.isNativeObject(val) &&\n    !exports.isMongooseType(val) &&\n    val != null;\n};\n\n/*!\n * Determines if `obj` is a built-in object like an array, date, boolean,\n * etc.\n */\n\nexports.isNativeObject = function(arg) {\n  return Array.isArray(arg) ||\n    arg instanceof Date ||\n    arg instanceof Boolean ||\n    arg instanceof Number ||\n    arg instanceof String;\n};\n\n/*!\n * Determines if `val` is an object that has no own keys\n */\n\nexports.isEmptyObject = function(val) {\n  return val != null &&\n    typeof val === 'object' &&\n    Object.keys(val).length === 0;\n};\n\n/*!\n * Search if `obj` or any POJOs nested underneath `obj` has a property named\n * `key`\n */\n\nexports.hasKey = function hasKey(obj, key) {\n  const props = Object.keys(obj);\n  for (const prop of props) {\n    if (prop === key) {\n      return true;\n    }\n    if (exports.isPOJO(obj[prop]) && exports.hasKey(obj[prop], key)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*!\n * A faster Array.prototype.slice.call(arguments) alternative\n * @api private\n */\n\nexports.args = sliced;\n\n/*!\n * process.nextTick helper.\n *\n * Wraps `callback` in a try/catch + nextTick.\n *\n * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.\n *\n * @param {Function} callback\n * @api private\n */\n\nexports.tick = function tick(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n  return function() {\n    try {\n      callback.apply(this, arguments);\n    } catch (err) {\n      // only nextTick on err to get out of\n      // the event loop and avoid state corruption.\n      immediate(function() {\n        throw err;\n      });\n    }\n  };\n};\n\n/*!\n * Returns true if `v` is an object that can be serialized as a primitive in\n * MongoDB\n */\n\nexports.isMongooseType = function(v) {\n  return v instanceof ObjectId || v instanceof Decimal || v instanceof Buffer;\n};\n\nexports.isMongooseObject = isMongooseObject;\n\n/*!\n * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.\n *\n * @param {Object} object\n * @api private\n */\n\nexports.expires = function expires(object) {\n  if (!(object && object.constructor.name === 'Object')) {\n    return;\n  }\n  if (!('expires' in object)) {\n    return;\n  }\n\n  let when;\n  if (typeof object.expires !== 'string') {\n    when = object.expires;\n  } else {\n    when = Math.round(ms(object.expires) / 1000);\n  }\n  object.expireAfterSeconds = when;\n  delete object.expires;\n};\n\n/*!\n * populate helper\n */\n\nexports.populate = function populate(path, select, model, match, options, subPopulate, justOne, count) {\n  // might have passed an object specifying all arguments\n  let obj = null;\n  if (arguments.length === 1) {\n    if (path instanceof PopulateOptions) {\n      return [path];\n    }\n\n    if (Array.isArray(path)) {\n      const singles = makeSingles(path);\n      return singles.map(o => exports.populate(o)[0]);\n    }\n\n    if (exports.isObject(path)) {\n      obj = Object.assign({}, path);\n    } else {\n      obj = { path: path };\n    }\n  } else if (typeof model === 'object') {\n    obj = {\n      path: path,\n      select: select,\n      match: model,\n      options: match\n    };\n  } else {\n    obj = {\n      path: path,\n      select: select,\n      model: model,\n      match: match,\n      options: options,\n      populate: subPopulate,\n      justOne: justOne,\n      count: count\n    };\n  }\n\n  if (typeof obj.path !== 'string') {\n    throw new TypeError('utils.populate: invalid path. Expected string. Got typeof `' + typeof path + '`');\n  }\n\n  return _populateObj(obj);\n\n  // The order of select/conditions args is opposite Model.find but\n  // necessary to keep backward compatibility (select could be\n  // an array, string, or object literal).\n  function makeSingles(arr) {\n    const ret = [];\n    arr.forEach(function(obj) {\n      if (/[\\s]/.test(obj.path)) {\n        const paths = obj.path.split(' ');\n        paths.forEach(function(p) {\n          const copy = Object.assign({}, obj);\n          copy.path = p;\n          ret.push(copy);\n        });\n      } else {\n        ret.push(obj);\n      }\n    });\n\n    return ret;\n  }\n};\n\nfunction _populateObj(obj) {\n  if (Array.isArray(obj.populate)) {\n    const ret = [];\n    obj.populate.forEach(function(obj) {\n      if (/[\\s]/.test(obj.path)) {\n        const copy = Object.assign({}, obj);\n        const paths = copy.path.split(' ');\n        paths.forEach(function(p) {\n          copy.path = p;\n          ret.push(exports.populate(copy)[0]);\n        });\n      } else {\n        ret.push(exports.populate(obj)[0]);\n      }\n    });\n    obj.populate = exports.populate(ret);\n  } else if (obj.populate != null && typeof obj.populate === 'object') {\n    obj.populate = exports.populate(obj.populate);\n  }\n\n  const ret = [];\n  const paths = obj.path.split(' ');\n  if (obj.options != null) {\n    obj.options = exports.clone(obj.options);\n  }\n\n  for (const path of paths) {\n    ret.push(new PopulateOptions(Object.assign({}, obj, { path: path })));\n  }\n\n  return ret;\n}\n\n/*!\n * Return the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Object} obj\n */\n\nexports.getValue = function(path, obj, map) {\n  return mpath.get(path, obj, '_doc', map);\n};\n\n/*!\n * Sets the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} obj\n */\n\nexports.setValue = function(path, val, obj, map, _copying) {\n  mpath.set(path, val, obj, '_doc', map, _copying);\n};\n\n/*!\n * Returns an array of values from object `o`.\n *\n * @param {Object} o\n * @return {Array}\n * @private\n */\n\nexports.object = {};\nexports.object.vals = function vals(o) {\n  const keys = Object.keys(o);\n  let i = keys.length;\n  const ret = [];\n\n  while (i--) {\n    ret.push(o[keys[i]]);\n  }\n\n  return ret;\n};\n\n/*!\n * @see exports.options\n */\n\nexports.object.shallowCopy = exports.options;\n\n/*!\n * Safer helper for hasOwnProperty checks\n *\n * @param {Object} obj\n * @param {String} prop\n */\n\nconst hop = Object.prototype.hasOwnProperty;\nexports.object.hasOwnProperty = function(obj, prop) {\n  return hop.call(obj, prop);\n};\n\n/*!\n * Determine if `val` is null or undefined\n *\n * @return {Boolean}\n */\n\nexports.isNullOrUndefined = function(val) {\n  return val === null || val === undefined;\n};\n\n/*!\n * ignore\n */\n\nexports.array = {};\n\n/*!\n * Flattens an array.\n *\n * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]\n *\n * @param {Array} arr\n * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsy value, the item will not be included in the results.\n * @return {Array}\n * @private\n */\n\nexports.array.flatten = function flatten(arr, filter, ret) {\n  ret || (ret = []);\n\n  arr.forEach(function(item) {\n    if (Array.isArray(item)) {\n      flatten(item, filter, ret);\n    } else {\n      if (!filter || filter(item)) {\n        ret.push(item);\n      }\n    }\n  });\n\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexports.hasUserDefinedProperty = function(obj, key) {\n  if (obj == null) {\n    return false;\n  }\n\n  if (Array.isArray(key)) {\n    for (const k of key) {\n      if (exports.hasUserDefinedProperty(obj, k)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if (_hasOwnProperty.call(obj, key)) {\n    return true;\n  }\n  if (typeof obj === 'object' && key in obj) {\n    const v = obj[key];\n    return v !== Object.prototype[key] && v !== Array.prototype[key];\n  }\n\n  return false;\n};\n\n/*!\n * ignore\n */\n\nconst MAX_ARRAY_INDEX = Math.pow(2, 32) - 1;\n\nexports.isArrayIndex = function(val) {\n  if (typeof val === 'number') {\n    return val >= 0 && val <= MAX_ARRAY_INDEX;\n  }\n  if (typeof val === 'string') {\n    if (!/^\\d+$/.test(val)) {\n      return false;\n    }\n    val = +val;\n    return val >= 0 && val <= MAX_ARRAY_INDEX;\n  }\n\n  return false;\n};\n\n/*!\n * Removes duplicate values from an array\n *\n * [1, 2, 3, 3, 5] => [1, 2, 3, 5]\n * [ ObjectId(\"550988ba0c19d57f697dc45e\"), ObjectId(\"550988ba0c19d57f697dc45e\") ]\n *    => [ObjectId(\"550988ba0c19d57f697dc45e\")]\n *\n * @param {Array} arr\n * @return {Array}\n * @private\n */\n\nexports.array.unique = function(arr) {\n  const primitives = new Set();\n  const ids = new Set();\n  const ret = [];\n\n  for (const item of arr) {\n    if (typeof item === 'number' || typeof item === 'string' || item == null) {\n      if (primitives.has(item)) {\n        continue;\n      }\n      ret.push(item);\n      primitives.add(item);\n    } else if (item instanceof ObjectId) {\n      if (ids.has(item.toString())) {\n        continue;\n      }\n      ret.push(item);\n      ids.add(item.toString());\n    } else {\n      ret.push(item);\n    }\n  }\n\n  return ret;\n};\n\n/*!\n * Determines if two buffers are equal.\n *\n * @param {Buffer} a\n * @param {Object} b\n */\n\nexports.buffer = {};\nexports.buffer.areEqual = function(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    return false;\n  }\n  if (!Buffer.isBuffer(b)) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0, len = a.length; i < len; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.getFunctionName = getFunctionName;\n/*!\n * Decorate buffers\n */\n\nexports.decorate = function(destination, source) {\n  for (const key in source) {\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    destination[key] = source[key];\n  }\n};\n\n/**\n * merges to with a copy of from\n *\n * @param {Object} to\n * @param {Object} fromObj\n * @api private\n */\n\nexports.mergeClone = function(to, fromObj) {\n  if (isMongooseObject(fromObj)) {\n    fromObj = fromObj.toObject({\n      transform: false,\n      virtuals: false,\n      depopulate: true,\n      getters: false,\n      flattenDecimals: false\n    });\n  }\n  const keys = Object.keys(fromObj);\n  const len = keys.length;\n  let i = 0;\n  let key;\n\n  while (i < len) {\n    key = keys[i++];\n    if (specialProperties.has(key)) {\n      continue;\n    }\n    if (typeof to[key] === 'undefined') {\n      to[key] = exports.clone(fromObj[key], {\n        transform: false,\n        virtuals: false,\n        depopulate: true,\n        getters: false,\n        flattenDecimals: false\n      });\n    } else {\n      let val = fromObj[key];\n      if (val != null && val.valueOf && !(val instanceof Date)) {\n        val = val.valueOf();\n      }\n      if (exports.isObject(val)) {\n        let obj = val;\n        if (isMongooseObject(val) && !val.isMongooseBuffer) {\n          obj = obj.toObject({\n            transform: false,\n            virtuals: false,\n            depopulate: true,\n            getters: false,\n            flattenDecimals: false\n          });\n        }\n        if (val.isMongooseBuffer) {\n          obj = Buffer.from(obj);\n        }\n        exports.mergeClone(to[key], obj);\n      } else {\n        to[key] = exports.clone(val, {\n          flattenDecimals: false\n        });\n      }\n    }\n  }\n};\n\n/**\n * Executes a function on each element of an array (like _.each)\n *\n * @param {Array} arr\n * @param {Function} fn\n * @api private\n */\n\nexports.each = function(arr, fn) {\n  for (const item of arr) {\n    fn(item);\n  }\n};\n\n/*!\n * ignore\n */\n\nexports.getOption = function(name) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n\n  for (const source of sources) {\n    if (source[name] != null) {\n      return source[name];\n    }\n  }\n\n  return null;\n};\n\n/*!\n * ignore\n */\n\nexports.noop = function() {};\n\nexports.errorToPOJO = function errorToPOJO(error) {\n  const isError = error instanceof Error;\n  if (!isError) {\n    throw new Error('`error` must be `instanceof Error`.');\n  }\n\n  const ret = {};\n  for (const properyName of Object.getOwnPropertyNames(error)) {\n    ret[properyName] = error[properyName];\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nexports.warn = function warn(message) {\n  return process.emitWarning(message, { code: 'MONGOOSE' });\n};\n","\n\nconst clone = require('../helpers/clone');\n\nclass PopulateOptions {\n  constructor(obj) {\n    this._docs = {};\n    this._childDocs = [];\n\n    if (obj == null) {\n      return;\n    }\n    obj = clone(obj);\n    Object.assign(this, obj);\n    if (typeof obj.subPopulate === 'object') {\n      this.populate = obj.subPopulate;\n    }\n\n\n    if (obj.perDocumentLimit != null && obj.limit != null) {\n      throw new Error('Can not use `limit` and `perDocumentLimit` at the same time. Path: `' + obj.path + '`.');\n    }\n  }\n}\n\n/**\n * The connection used to look up models by name. If not specified, Mongoose\n * will default to using the connection associated with the model in\n * `PopulateOptions#model`.\n *\n * @memberOf PopulateOptions\n * @property {Connection} connection\n * @api public\n */\n\nmodule.exports = PopulateOptions;","\n\nconst PromiseProvider = require('../promise_provider');\nconst immediate = require('./immediate');\n\nconst emittedSymbol = Symbol('mongoose:emitted');\n\nmodule.exports = function promiseOrCallback(callback, fn, ee, Promise) {\n  if (typeof callback === 'function') {\n    return fn(function(error) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n        try {\n          callback(error);\n        } catch (error) {\n          return immediate(() => {\n            throw error;\n          });\n        }\n        return;\n      }\n      callback.apply(this, arguments);\n    });\n  }\n\n  Promise = Promise || PromiseProvider.get();\n\n  return new Promise((resolve, reject) => {\n    fn(function(error, res) {\n      if (error != null) {\n        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n        return reject(error);\n      }\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n      resolve(res);\n    });\n  });\n};\n","/*!\n * ignore\n */\n\n\n\nconst assert = require('assert');\nconst mquery = require('mquery');\n\n/**\n * Helper for multiplexing promise implementations\n *\n * @api private\n */\n\nconst store = {\n  _promise: null\n};\n\n/**\n * Get the current promise constructor\n *\n * @api private\n */\n\nstore.get = function() {\n  return store._promise;\n};\n\n/**\n * Set the current promise constructor\n *\n * @api private\n */\n\nstore.set = function(lib) {\n  assert.ok(typeof lib === 'function',\n    `mongoose.Promise must be a function, got ${lib}`);\n  store._promise = lib;\n  mquery.Promise = lib;\n};\n\n/*!\n * Use native promises by default\n */\n\nstore.set(global.Promise);\n\nmodule.exports = store;\n","\n\nmodule.exports = function merge(s1, s2, skipConflictingPaths) {\n  const paths = Object.keys(s2.tree);\n  const pathsToAdd = {};\n  for (const key of paths) {\n    if (skipConflictingPaths && (s1.paths[key] || s1.nested[key] || s1.singleNestedPaths[key])) {\n      continue;\n    }\n    pathsToAdd[key] = s2.tree[key];\n  }\n  s1.add(pathsToAdd);\n\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n\n  s1.s.hooks.merge(s2.s.hooks, false);\n};\n","\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst InternalCache = require('./internal');\nconst MongooseError = require('./error/index');\nconst MixedSchema = require('./schema/mixed');\nconst ObjectExpectedError = require('./error/objectExpected');\nconst ObjectParameterError = require('./error/objectParameter');\nconst ParallelValidateError = require('./error/parallelValidate');\nconst Schema = require('./schema');\nconst StrictModeError = require('./error/strict');\nconst ValidationError = require('./error/validation');\nconst ValidatorError = require('./error/validator');\nconst VirtualType = require('./virtualtype');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\nconst compile = require('./helpers/document/compile').compile;\nconst defineKey = require('./helpers/document/compile').defineKey;\nconst flatten = require('./helpers/common').flatten;\nconst flattenObjectWithDottedPaths = require('./helpers/path/flattenObjectWithDottedPaths');\nconst get = require('./helpers/get');\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\nconst getKeysInSchemaOrder = require('./helpers/schema/getKeysInSchemaOrder');\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\nconst immediate = require('./helpers/immediate');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst inspect = require('util').inspect;\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst markArraySubdocsPopulated = require('./helpers/populate/markArraySubdocsPopulated');\nconst mpath = require('mpath');\nconst queryhelpers = require('./queryhelpers');\nconst utils = require('./utils');\nconst isPromise = require('./helpers/isPromise');\n\nconst clone = utils.clone;\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\n\nconst arrayAtomicsBackupSymbol = require('./helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\nconst documentModifiedPaths = require('./helpers/symbols').documentModifiedPaths;\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\nconst getSymbol = require('./helpers/symbols').getSymbol;\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\nconst schemaMixedSymbol = require('./schema/symbols').schemaMixedSymbol;\nconst parentPaths = require('./helpers/path/parentPaths');\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\n\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n\n  // Support `browserDocument.js` syntax\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\n      new Schema(fields) :\n      fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache;\n  this.$isNew = 'isNew' in options ? options.isNew : true;\n\n  if ('priorDoc' in options) {\n    this.$__.priorDoc = options.priorDoc;\n  }\n  if (skipId) {\n    this.$__.skipId = skipId;\n  }\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  let defaults = true;\n  if (options.defaults !== undefined) {\n    this.$__.defaults = options.defaults;\n    defaults = options.defaults;\n  }\n\n  const schema = this.$__schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options.strict;\n    if (fields !== undefined) {\n      this.$__.selected = fields;\n    }\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields)) {\n    exclude = isExclusive(fields);\n\n    this.$__.fields = fields;\n    this.$__.exclude = exclude;\n  }\n\n  const hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    {};\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      $__applyDefaults(this, fields, exclude, hasIncludedChildren, true, {\n        isNew: this.$isNew\n      });\n    }\n  }\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n\n    if (obj instanceof Document) {\n      this.$isNew = obj.$isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    if (options.skipDefaults) {\n      this.$__.skipDefaults = options.skipDefaults;\n    }\n  } else if (defaults) {\n    $__applyDefaults(this, fields, exclude, hasIncludedChildren, false, options.skipDefaults, {\n      isNew: this.$isNew\n    });\n  }\n\n  this.$__._id = this._id;\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      // Avoid methods, virtuals, existing fields, and `$` keys. The latter is to avoid overwriting\n      // Mongoose internals.\n      if (!(key in schema.tree) && !(key in schema.methods) && !(key in schema.virtuals) && !key.startsWith('$')) {\n        defineKey({ prop: key, subprops: null, prototype: _this });\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\nObject.defineProperty(Document.prototype, 'isNew', {\n  get: function() {\n    return this.$isNew;\n  },\n  set: function(value) {\n    this.$isNew = value;\n  }\n});\n\nObject.defineProperty(Document.prototype, 'errors', {\n  get: function() {\n    return this.$errors;\n  },\n  set: function(value) {\n    this.$errors = value;\n  }\n});\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      // Delay creating emitter until necessary because emitters take up a lot of memory,\n      // especially for subdocuments.\n      if (!this.$__.emitter) {\n        if (emitterFn === 'emit') {\n          return;\n        }\n        this.$__.emitter = new EventEmitter();\n        this.$__.emitter.setMaxListeners(0);\n      }\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n    Document.prototype[`$${emitterFn}`] = Document.prototype[emitterFn];\n  });\n\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__schema;\n\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * ####Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    if (this.$__.locals == null) {\n      this.$__.locals = {};\n    }\n    return this.$__.locals;\n  },\n  set: function(v) {\n    this.$__.locals = v;\n  }\n});\n\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property $isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$isNew;\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * Set this property to add additional query filters when Mongoose saves this document and `isNew` is false.\n *\n * ####Example:\n *\n *     // Make sure `save()` never updates a soft deleted document.\n *     schema.pre('save', function() {\n *       this.$where = { isDeleted: false };\n *     });\n *\n * @api public\n * @property $where\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$where', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation $errors.\n *\n * @api public\n * @property $errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$errors;\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * ####Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$op', {\n  get: function() {\n    return this.$__.op || null;\n  },\n  set: function(value) {\n    this.$__.op = value;\n  }\n});\n\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n    if (key.indexOf('.') === -1) {\n      hasIncludedChildren[key] = 1;\n      continue;\n    }\n    const parts = key.split('.');\n    let c = parts[0];\n\n    for (let i = 0; i < parts.length; ++i) {\n      hasIncludedChildren[c] = 1;\n      if (i + 1 < parts.length) {\n        c = c + '.' + parts[i + 1];\n      }\n    }\n  }\n\n  return hasIncludedChildren;\n}\n\n/*!\n * ignore\n */\n\nfunction $__applyDefaults(doc, fields, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && doc.$__.skipId) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const path = type.splitPath();\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction $applyDefaultsToNested(val, path, doc) {\n  if (val == null) {\n    return;\n  }\n\n  flattenObjectWithDottedPaths(val);\n\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  const pathPieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  for (let i = 0; i < plen; ++i) {\n    let curPath = '';\n    const p = paths[i];\n\n    if (!p.startsWith(path + '.')) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const pieces = type.splitPath().slice(pathPieces.length);\n    const len = pieces.length;\n\n    if (type.defaultValue === void 0) {\n      continue;\n    }\n\n    let cur = val;\n\n    for (let j = 0; j < len; ++j) {\n      if (cur == null) {\n        break;\n      }\n\n      const piece = pieces[j];\n\n      if (j === len - 1) {\n        if (cur[piece] !== void 0) {\n          break;\n        }\n\n        try {\n          const def = type.getDefault(doc, false);\n          if (def !== void 0) {\n            cur[piece] = def;\n          }\n        } catch (err) {\n          doc.invalidate(path + '.' + curPath, err);\n          break;\n        }\n\n        break;\n      }\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      cur[piece] = cur[piece] || {};\n      cur = cur[piece];\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.$__schema.paths).\n    // Don't build up any paths that are underneath a map, we don't know\n    // what the keys will be\n    filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](/docs/middleware.html).\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\nDocument.prototype.$init = function() {\n  return this.constructor.prototype.init.apply(this, arguments);\n};\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.$isNew = false;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.$populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.$populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n      item._childDocs = [];\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n\n  markArraySubdocsPopulated(this, opts.populated);\n\n  this.$emit('init', this);\n  this.constructor.emit('init', this);\n\n  this.$__._id = this._id;\n\n  const hasIncludedChildren = this.$__.exclude === false && this.$__.fields ?\n    $__hasIncludedChildren(this.$__.fields) :\n    {};\n  $__applyDefaults(this, this.$__.fields, this.$__.exclude, hasIncludedChildren, false, this.$__.skipDefaults);\n\n  return this;\n};\n\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schema;\n  let path;\n  let i;\n  let index = 0;\n  const strict = self.$__.strictMode;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.$__schema.path(path);\n\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (self.$__schema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n      if (!strict && !prefix) {\n        // Set top-level properties that aren't in the schema if strict is false\n        self[i] = obj[i];\n      }\n    } else {\n      // Retain order when overwriting defaults\n      if (doc.hasOwnProperty(i) && obj[i] !== void 0) {\n        delete doc[i];\n      }\n      if (obj[i] === null) {\n        doc[i] = schema._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const wasPopulated = obj[i].$__ == null ? null : obj[i].$__.wasPopulated;\n\n        if (schema && !wasPopulated) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.$isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.update = function update() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  const query = this.constructor.update.apply(this.constructor, args);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  return query;\n};\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.updateOne](#model_Model.updateOne)\n *\n * @see Model.updateOne #model_Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\n  query.pre(cb => {\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\n  });\n  query.post(cb => {\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * ####Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#model_Model.replaceOne)\n *\n * @see Model.replaceOne #model_Model.replaceOne\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * ####Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    if (this.$__.session != null && this.$__.session.hasEnded) {\n      this.$__.session = null;\n      return null;\n    }\n    return this.$__.session;\n  }\n\n  if (session != null && session.hasEnded) {\n    throw new MongooseError('Cannot set a document\\'s session to a session that has ended. Make sure you haven\\'t ' +\n      'called `endSession()` on the session you are passing to `$session()`.');\n  }\n\n  if (session == null && this.$__.session == null) {\n    return;\n  }\n\n  this.$__.session = session;\n\n  if (!this.$isSubdocument) {\n    const subdocs = this.$getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @name overwrite\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  const merge = options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  const typeKey = this.$__schema.options.typeKey;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n\n  const strict = 'strict' in options\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  if (path == null) {\n    [path, val] = [val, path];\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n    if (path == null) {\n      [path, val] = [val, path];\n    }\n\n    prefix = val ? val + '.' : '';\n    keys = getKeysInSchemaOrder(this.$__schema, path);\n\n    const len = keys.length;\n\n    // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n    const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n      if (val) {\n        this.$set(val, {});\n      }\n      return this;\n    }\n\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix + key;\n      pathtype = this.$__schema.pathType(pathName);\n      const valForKey = path[key];\n\n      // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n      if (type === true &&\n          !prefix &&\n          path[key] != null &&\n          pathtype === 'nested' &&\n          this._doc[key] != null) {\n        delete this._doc[key];\n        // Make sure we set `{}` back even if we minimize re: gh-8565\n        options = Object.assign({}, options, { _skipMinimizeTopLevel: true });\n      } else {\n        // Make sure we set `{_skipMinimizeTopLevel: false}` if don't have overwrite: gh-10441\n        options = Object.assign({}, options, { _skipMinimizeTopLevel: false });\n      }\n\n      if (utils.isNonBuiltinObject(valForKey) && pathtype === 'nested') {\n        $applyDefaultsToNested(path[key], prefix + key, this);\n        this.$set(prefix + key, path[key], constructing, Object.assign({}, options, { _skipMarkModified: true }));\n        continue;\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && path[key] === void 0 &&\n            this.$get(pathName) !== void 0) {\n          continue;\n        }\n\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\n        }\n\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          const p = path[key];\n          this.$set(prefix + key, p, constructing, options);\n        } else if (pathtype === 'nested' && path[key] instanceof Document) {\n          this.$set(prefix + key,\n            path[key].toObject({ transform: false }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, path[key]);\n          } else {\n            throw new StrictModeError(key);\n          }\n        }\n      } else if (path[key] !== void 0) {\n        this.$set(prefix + key, path[key], constructing, options);\n      }\n    }\n\n    // Ensure all properties are in correct order by deleting and recreating every property.\n    for (const key of Object.keys(this.$__schema.tree)) {\n      if (this._doc.hasOwnProperty(key)) {\n        const val = this._doc[key];\n        delete this._doc[key];\n        this._doc[key] = val;\n      }\n    }\n\n    return this;\n  }\n\n  let pathType = this.$__schema.pathType(path);\n  if (pathType === 'adhocOrUndefined') {\n    pathType = getEmbeddedDiscriminatorPath(this, path, { typeOnly: true });\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val);\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.priorDoc != null) {\n      return this.$__.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (val.$__ != null) {\n        val = val.toObject(internalToObjectOptions);\n      }\n      if (val == null) {\n        this.invalidate(path, new MongooseError.CastError('Object', val, path));\n        return this;\n      }\n      const hasInitialVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n      if (this.$__.savedState != null && !this.$isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const initialVal = this.$__getValue(path);\n        this.$__.savedState[path] = initialVal;\n\n        const keys = Object.keys(initialVal || {});\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = initialVal[key];\n        }\n      }\n\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = getKeysInSchemaOrder(this.$__schema, val, path);\n\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing, options);\n      }\n      if (priorVal != null && utils.deepEqual(hasInitialVal ? this.$__.savedState[path] : priorVal, val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n      cleanModifiedSubpaths(this, path, { skipDocArrays: true });\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[parts[0]] == 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.$__schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoServerError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.$get(subpath, null, { getters: false }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  if (!schema) {\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (schema.$isSingleNested && val != null && merge) {\n    if (val instanceof Document) {\n      val = val.toObject({ virtuals: false, transform: false });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n    if (refMatches && val instanceof Document) {\n      this.$populated(path, val._id, { [populateModelSymbol]: val.constructor });\n      val.$__.wasPopulated = true;\n      didPopulate = true;\n    }\n\n    let popOpts;\n    if (schema.options &&\n        Array.isArray(schema.options[typeKey]) &&\n        schema.options[typeKey].length &&\n        schema.options[typeKey][0].ref &&\n        _isManuallyPopulatedArray(val, schema.options[typeKey][0].ref)) {\n      popOpts = { [populateModelSymbol]: val[0].constructor };\n      this.$populated(path, val.map(function(v) { return v._id; }), popOpts);\n\n      for (const doc of val) {\n        doc.$__.wasPopulated = true;\n      }\n      didPopulate = true;\n    }\n\n    if (this.$__schema.singleNestedPaths[path] == null && (!refMatches || !schema.$isSingleNested || !val.$__)) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      val = schema.applySetters(val, this, false, priorVal);\n    }\n\n    if (schema.$isMongooseDocumentArray &&\n        Array.isArray(val) &&\n        val.length > 0 &&\n        val[0] != null &&\n        val[0].$__ != null &&\n        val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.$populated(path + '.' + populatedPath,\n          val.map(v => v.$populated(populatedPath)),\n          val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val.set(i, val[i]._id, true);\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n\n    if (schema.$isSingleNested && val != null) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path,\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path,\n        new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    const doc = this.$isSubdocument ? this.ownerDocument() : this;\n    const savedState = doc.$__.savedState;\n    const savedStatePath = this.$isSubdocument ? this.$__.fullPath + '.' + path : path;\n    if (savedState != null) {\n      const firstDot = savedStatePath.indexOf('.');\n      const topLevelPath = firstDot === -1 ? savedStatePath : savedStatePath.slice(0, firstDot);\n      if (!savedState.hasOwnProperty(topLevelPath)) {\n        savedState[topLevelPath] = utils.clone(doc.$__getValue(topLevelPath));\n      }\n    }\n\n    this.$__set(pathToMark, path, options, constructing, parts, schema, val, priorVal);\n\n    if (savedState != null && savedState.hasOwnProperty(savedStatePath) && utils.deepEqual(val, savedState[savedStatePath])) {\n      this.unmarkModified(path);\n    }\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  if (options._skipMarkModified) {\n    return false;\n  }\n  if (this.$isNew) {\n    return true;\n  }\n\n  // Re: the note about gh-7196, `val` is the raw value without casting or\n  // setters if the full path is under a single nested subdoc because we don't\n  // want to double run setters. So don't set it as modified. See gh-7264.\n  if (this.$__schema.singleNestedPaths[path] != null) {\n    return false;\n  }\n\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.$populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || utils.getValue(path, this))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.states.default &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function(pathToMark, path, options, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/ArraySubdocument');\n\n  const shouldModify = this.$__shouldModify(pathToMark, path, options, constructing, parts,\n    schema, val, priorVal);\n  const _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n      this.$__.activePaths.forEach(function(modifiedPath) {\n        if (modifiedPath.startsWith(path + '.')) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  } else if (Array.isArray(val) && val.isMongooseArray && Array.isArray(priorVal) && priorVal.isMongooseArray) {\n    val[arrayAtomicsSymbol] = priorVal[arrayAtomicsSymbol];\n    val[arrayAtomicsBackupSymbol] = priorVal[arrayAtomicsBackupSymbol];\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      if (utils.isPOJO(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\nDocument.prototype.$__getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\nDocument.prototype.$__setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @api public\n */\n\nDocument.prototype.get = function(path, type, options) {\n  let adhoc;\n  options = options || {};\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  let schema = this.$__path(path);\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n  }\n  if (schema instanceof MixedSchema) {\n    const virtual = this.$__schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n  const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    return schema.applyGetters(void 0, this);\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[pieces[0]] == 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], { getters: false });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, utils.clone(obj) || {}, { path: path });\n  }\n\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\nDocument.prototype.$get = Document.prototype.get;\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function(path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.$__schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.$isSubdocument) {\n    this.$__.pathsToScopes = this.$__pathsToScopes || {};\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  if (this.$__.pathsToScopes != null) {\n    delete this.$__.pathsToScopes[path];\n  }\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * ####Example\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function() {\n  return Object.keys(this.$__.activePaths.states.modify);\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](/docs/guide.html#minimize).\n *\n * ####Example:\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function(path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length > 0) {\n    const v = this.$get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  const _this = this;\n  return directModifiedPaths.reduce(function(list, path) {\n    const parts = path.split('.');\n    list = list.concat(parts.reduce(function(chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function(chain) {\n      return (list.indexOf(chain) === -1);\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    let cur = _this.$get(path);\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      if (Array.isArray(cur)) {\n        const len = cur.length;\n        for (let i = 0; i < len; ++i) {\n          if (list.indexOf(path + '.' + i) === -1) {\n            list.push(path + '.' + i);\n            if (cur[i] != null && cur[i].$__) {\n              const modified = cur[i].modifiedPaths();\n              for (const childPath of modified) {\n                list.push(path + '.' + i + '.' + childPath);\n              }\n            }\n          }\n        }\n      } else {\n        Object.keys(cur).\n          filter(function(key) {\n            return list.indexOf(path + '.' + key) === -1;\n          }).\n          forEach(function(key) {\n            list.push(path + '.' + key);\n          });\n      }\n    }\n\n    return list;\n  }, []);\n};\n\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, modifiedPaths) {\n  if (paths) {\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    if (directModifiedPaths.length === 0) {\n      return false;\n    }\n\n    if (!Array.isArray(paths)) {\n      paths = paths.indexOf(' ') === -1 ? [paths] : paths.split(' ');\n    }\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\nDocument.prototype.$isModified = Document.prototype.isModified;\n\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.default.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.default.hasOwnProperty(path));\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     const product = await product.remove();\n *     product.$isDeleted(); // true\n *     product.remove(); // no-op, doesn't send anything to the db\n *\n *     product.$isDeleted(false);\n *     product.$isDeleted(); // false\n *     product.remove(); // will execute a remove against the db\n *\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.modify.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.modify.hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.init.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.init.hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     const doc = await Thing.findOne().select('name');\n *     doc.isSelected('name') // true\n *     doc.isSelected('age')  // false\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n  if (!path) {\n    return false;\n  }\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n\n  const pathDot = path + '.';\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n\n  return !inclusive;\n};\n\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n\n  return !inclusive;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\nDocument.prototype.validate = function(pathsToValidate, options, callback) {\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.$isSubdocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\n  }\n\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      callback = null;\n      pathsToValidate = null;\n    } else if (typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      options = null;\n      pathsToValidate = null;\n    }\n  } else if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = pathsToValidate;\n    pathsToValidate = null;\n  }\n  if (options && typeof options.pathsToSkip === 'string') {\n    const isOnePathOnly = options.pathsToSkip.indexOf(' ') === -1;\n    options.pathsToSkip = isOnePathOnly ? [options.pathsToSkip] : options.pathsToSkip.split(' ');\n  }\n\n  return promiseOrCallback(callback, cb => {\n    if (parallelValidate != null) {\n      return cb(parallelValidate);\n    }\n\n    this.$__validate(pathsToValidate, options, (error) => {\n      this.$op = null;\n      cb(error);\n    });\n  }, this.constructor.events);\n};\n\nDocument.prototype.$validate = Document.prototype.validate;\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\n    const p = doc.$__schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired = doc.$__.cachedRequired || {};\n      try {\n        doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n      } catch (err) {\n        doc.invalidate(path, err);\n      }\n    }\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc) {\n  const skipSchemaValidators = {};\n\n  _evaluateRequiredFunctions(doc);\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\n    if (!doc.$__isSelected(path) && !doc.$isModified(path)) {\n      return false;\n    }\n    if (doc.$__.cachedRequired != null && path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n\n\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\n  function addToPaths(p) { paths.add(p); }\n\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc\n      for (const p of paths) {\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\n          paths.delete(p);\n        }\n      }\n\n      if (doc.$isModified(subdoc.$basePath, modifiedPaths) &&\n            !doc.isDirectModified(subdoc.$basePath) &&\n            !doc.$isDefault(subdoc.$basePath)) {\n        paths.add(subdoc.$basePath);\n\n        skipSchemaValidators[subdoc.$basePath] = true;\n      }\n    }\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType ||\n        !_pathType.$isMongooseArray ||\n        // To avoid potential performance issues, skip doc arrays whose children\n        // are not required. `getPositionalPathType()` may be slow, so avoid\n        // it unless we have a case of #6364\n        (_pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required'))) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = { skipArrays: true };\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType || !_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, skipSchemaValidators];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  const pathsToSkip = get(options, 'pathsToSkip', null);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = undefined;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.$isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.$emit('validate', _this);\n    this.constructor.emit('validate', _this);\n\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] &&\n            validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  } else if (pathsToSkip) {\n    paths = _handlePathsToSkip(paths, pathsToSkip);\n  }\n  if (paths.length === 0) {\n    return immediate(function() {\n      const error = _complete();\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  for (const path of paths) {\n    validatePath(path);\n  }\n\n  function validatePath(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    immediate(function() {\n      const schemaType = _this.$__schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if ((pop = _this.$populated(path))) {\n        val = pop;\n      } else if (val != null && val.$__ != null && val.$__.wasPopulated) {\n        // Array paths, like `somearray.1`, do not show up as populated with `$populated()`,\n        // so in that case pull out the document's id\n        val = val._id;\n      }\n      const scope = _this.$__.pathsToScopes != null && path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      const doValidateOptions = {\n        skipSchemaValidators: skipSchemaValidators[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n\n      schemaType.doValidate(val, function(err) {\n        if (err) {\n          const isSubdoc = schemaType.$isSingleNested ||\n            schemaType.$isArraySubdocument ||\n            schemaType.$isMongooseDocumentArray;\n          if (isSubdoc && err instanceof ValidationError) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  }\n\n  function complete() {\n    const error = _complete();\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  }\n\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = [];\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.push(path);\n    } else if (parentPaths.has(path)) {\n      ret.push(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/*!\n * ignore\n */\nfunction _handlePathsToSkip(paths, pathsToSkip) {\n  pathsToSkip = new Set(pathsToSkip);\n  paths = paths.filter(p => !pathsToSkip.has(p));\n  return paths;\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Array|string} [options.pathsToSkip] list of paths to skip. If set, Mongoose will validate every modified path that is not in this list.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate, options) {\n  const _this = this;\n\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  let pathsToSkip = options && options.pathsToSkip;\n\n  if (typeof pathsToValidate === 'string') {\n    const isOnePathOnly = pathsToValidate.indexOf(' ') === -1;\n    pathsToValidate = isOnePathOnly ? [pathsToValidate] : pathsToValidate.split(' ');\n  } else if (typeof pathsToSkip === 'string' && pathsToSkip.indexOf(' ') !== -1) {\n    pathsToSkip = pathsToSkip.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.$isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  } else if (Array.isArray(pathsToSkip)) {\n    paths = _handlePathsToSkip(paths, pathsToSkip);\n  }\n  const validating = {};\n\n  paths.forEach(function(path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    const p = _this.$__schema.path(path);\n    if (!p) {\n      return;\n    }\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n    if (err) {\n      const isSubdoc = p.$isSingleNested ||\n        p.$isArraySubdocument ||\n        p.$isMongooseDocumentArray;\n      if (isSubdoc && err instanceof ValidationError) {\n        return;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.$emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|Array<String>} path the field to check\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n  if (path == null) {\n    return false;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n\n  return this.$__.validationError.errors[path] == null;\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n  DocumentArray || (DocumentArray = require('./types/DocumentArray'));\n\n  this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    })\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    })\n    .forEach(function(array) {\n      let i = array.length;\n      while (i--) {\n        const doc = array[i];\n        if (!doc) {\n          continue;\n        }\n        doc.$__reset();\n      }\n\n      _this.$__.activePaths.init(array.$path());\n\n      array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n      array[arrayAtomicsSymbol] = {};\n    });\n\n  this.$__.activePaths.\n    map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    }).\n    filter(function(val) {\n      return val && val.$isSingleNested;\n    }).\n    forEach(function(doc) {\n      doc.$__reset();\n      if (doc.$parent() === _this) {\n        _this.$__.activePaths.init(doc.$basePath);\n      } else if (doc.$parent() != null && doc.$parent().$isSubdocument) {\n        // If map path underneath subdocument, may end up with a case where\n        // map path is modified but parent still needs to be reset. See gh-10295\n        doc.$parent().$__reset();\n      }\n    });\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\n    default: Object.assign({}, this.$__.activePaths.states.default)\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.$errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.$errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n\n  this.$__.validationError = this.$__.backup.validationError;\n  this.$errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function() {\n  const _this = this;\n  let all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  const allPaths = new Map(all.filter((el) => el != null).map((el) => [el.path, el.value]));\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n\n    let top = null;\n\n    const array = parentPaths(item.path);\n    for (let i = 0; i < array.length - 1; i++) {\n      if (allPaths.has(array[i])) {\n        top = allPaths.get(array[i]);\n        break;\n      }\n    }\n    if (top == null) {\n      minimal.push(item);\n    } else if (top != null &&\n        top[arrayAtomicsSymbol] != null &&\n        top.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being set.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top[arrayAtomicsSymbol] = {};\n      top[arrayAtomicsSymbol].$set = top;\n    }\n  });\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/DocumentArray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.$__getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = require('./types/DocumentArray'));\n  Embedded = Embedded || require('./types/ArraySubdocument');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n    return seed;\n  }\n\n  const subDocs = [];\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.$listeners('error').length) {\n    this.$emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\n  const schemaOptions = get(this, '$__schema.options', {});\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {}));\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? clone(options) : {};\n  options._calledWithOptions = options._calledWithOptions || clone(options);\n\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  let flattenMaps;\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate ||\n    get(options, '_parentOptions.depopulate', false);\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = true;\n\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = false;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || (schemaOptions.toObject && transform)) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters), defaults to false\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\n * - `minimize` remove empty objects, defaults to true\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\n * - `versionKey` whether to include the version key, defaults to true\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isPOJO(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n    ? obj\n    : undefined;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = get(toObjectOptions, 'aliases', true);\n\n  let virtualsToApply = null;\n  if (Array.isArray(options.virtuals)) {\n    virtualsToApply = new Set(options.virtuals);\n  }\n  else if (options.virtuals && options.virtuals.pathsToSkip) {\n    virtualsToApply = new Set(paths);\n    for (let i = 0; i < options.virtuals.pathsToSkip.length; i++) {\n      if (virtualsToApply.has(options.virtuals.pathsToSkip[i])) {\n        virtualsToApply.delete(options.virtuals.pathsToSkip[i]);\n      }\n    }\n  }\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n\n    if (virtualsToApply != null && !virtualsToApply.has(path)) {\n      continue;\n    }\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substr(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n\n\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.$get(path);\n        branch[part] = clone(val, options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/*!\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.$get(path);\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null &&\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const vals = [].concat(self.$get(path));\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n\nDocument.prototype.ownerDocument = function() {\n  return this;\n};\n\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns the original document if there is no parent.\n *\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function() {\n  if (this.$isSubdocument || this.$__.wasPopulated) {\n    return this.$__.parent;\n  }\n  return this;\n};\n\n/**\n * Alias for `parent()`. If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$parent = Document.prototype.parent;\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function(options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n  const ret = this.toObject(opts);\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function() {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates paths on an existing document.\n *\n * ####Example:\n *\n *     await doc.populate([\n *       'stories',\n *       { path: 'fans', sort: { name: -1 } }\n *     ]);\n *     doc.populated('stories'); // Array of ObjectIds\n *     doc.stories[0].title; // 'Casino Royale'\n *     doc.populated('fans'); // Array of ObjectIds\n *\n *     await doc.populate('fans', '-email');\n *     doc.fans[0].email // not populated\n *\n *     await doc.populate('author fans', '-email');\n *     doc.author.email // not populated\n *     doc.fans[0].email // not populated\n *\n * @param {String|Object|Array} path either the path to populate or an object specifying all parameters, or either an array of those\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [callback] Callback\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @memberOf Document\n * @instance\n * @return {Promise|null}\n * @api public\n */\n\nDocument.prototype.populate = function populate() {\n  const pop = {};\n  const args = utils.args(arguments);\n  let fn;\n\n  if (args.length > 0) {\n    if (typeof args[args.length - 1] === 'function') {\n      fn = args.pop();\n    }\n\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  const paths = utils.object.vals(pop);\n  let topLevelModel = this.constructor;\n  if (this.$__isNested) {\n    topLevelModel = this.$__[scopeSymbol].constructor;\n    const nestedPath = this.$__.nestedPath;\n    paths.forEach(function(populateOptions) {\n      populateOptions.path = nestedPath + '.' + populateOptions.path;\n    });\n  }\n\n  // Use `$session()` by default if the document has an associated session\n  // See gh-6754\n  if (this.$session() != null) {\n    const session = this.$session();\n    paths.forEach(path => {\n      if (path.options == null) {\n        path.options = { session: session };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  paths.forEach(p => {\n    p._localModel = topLevelModel;\n  });\n\n  return topLevelModel.populate(this, paths, fn);\n};\n\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Array<Document>} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @instance\n */\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n  let result = [];\n  for (const key of keys) {\n    const value = this.$get(key);\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    if (typeof path !== 'string') {\n      return undefined;\n    }\n\n    // Map paths can be populated with either `path.$*` or just `path`\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n\n    const v = this.$__.populated[_path];\n    if (v) {\n      return val === true ? v : v.value;\n    }\n    return undefined;\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = { value: val, options: options };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.$get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.$populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.$populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n\n  return val;\n};\n\nDocument.prototype.$populated = Document.prototype.populated;\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not provided, then all populated fields are returned to their unpopulated state.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.indexOf(' ') === -1 ? [path] : path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = get(this, '$__.populated', {});\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.$populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      utils.setValue(key, populatedIds, this._doc);\n    }\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.$populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      utils.setValue(singlePath, populatedIds, this._doc);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function() {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n","/*!\n * Dependencies\n */\n\n\n\nconst StateMachine = require('./statemachine');\nconst ActiveRoster = StateMachine.ctor('require', 'modify', 'init', 'default', 'ignore');\n\nmodule.exports = exports = InternalCache;\n\nfunction InternalCache() {\n  this.activePaths = new ActiveRoster;\n  this.strictMode = undefined;\n}\n\nInternalCache.prototype.fullPath = undefined;\nInternalCache.prototype.strictMode = undefined;\nInternalCache.prototype.selected = undefined;\nInternalCache.prototype.shardval = undefined;\nInternalCache.prototype.saveError = undefined;\nInternalCache.prototype.validationError = undefined;\nInternalCache.prototype.adhocPaths = undefined;\nInternalCache.prototype.removing = undefined;\nInternalCache.prototype.inserting = undefined;\nInternalCache.prototype.saving = undefined;\nInternalCache.prototype.version = undefined;\nInternalCache.prototype._id = undefined;\nInternalCache.prototype.ownerDocument = undefined;\nInternalCache.prototype.populate = undefined; // what we want to populate in this doc\nInternalCache.prototype.populated = undefined;// the _ids that have been populated\nInternalCache.prototype.wasPopulated = false; // if this doc was the result of a population\nInternalCache.prototype.scope = undefined;\n\nInternalCache.prototype.session = null;\nInternalCache.prototype.pathsToScopes = null;\nInternalCache.prototype.cachedRequired = null;\n","\n/*!\n * Module dependencies.\n */\n\n\n\nconst utils = require('./utils');\n\n/*!\n * StateMachine represents a minimal `interface` for the\n * constructors it builds via StateMachine.ctor(...).\n *\n * @api private\n */\n\nconst StateMachine = module.exports = exports = function StateMachine() {\n};\n\n/*!\n * StateMachine.ctor('state1', 'state2', ...)\n * A factory method for subclassing StateMachine.\n * The arguments are a list of states. For each state,\n * the constructor's prototype gets state transition\n * methods named after each state. These transition methods\n * place their path argument into the given state.\n *\n * @param {String} state\n * @param {String} [state]\n * @return {Function} subclass constructor\n * @private\n */\n\nStateMachine.ctor = function() {\n  const states = utils.args(arguments);\n\n  const ctor = function() {\n    StateMachine.apply(this, arguments);\n    this.paths = {};\n    this.states = {};\n    this.stateNames = states;\n\n    let i = states.length,\n        state;\n\n    while (i--) {\n      state = states[i];\n      this.states[state] = {};\n    }\n  };\n\n  ctor.prototype = new StateMachine();\n\n  states.forEach(function(state) {\n    // Changes the `path`'s state to `state`.\n    ctor.prototype[state] = function(path) {\n      this._changeState(path, state);\n    };\n  });\n\n  return ctor;\n};\n\n/*!\n * This function is wrapped by the state change functions:\n *\n * - `require(path)`\n * - `modify(path)`\n * - `init(path)`\n *\n * @api private\n */\n\nStateMachine.prototype._changeState = function _changeState(path, nextState) {\n  const prevBucket = this.states[this.paths[path]];\n  if (prevBucket) delete prevBucket[path];\n\n  this.paths[path] = nextState;\n  this.states[nextState][path] = true;\n};\n\n/*!\n * ignore\n */\n\nStateMachine.prototype.clear = function clear(state) {\n  const keys = Object.keys(this.states[state]);\n  let i = keys.length;\n  let path;\n\n  while (i--) {\n    path = keys[i];\n    delete this.states[state][path];\n    delete this.paths[path];\n  }\n};\n\n/*!\n * Checks to see if at least one path is in the states passed in via `arguments`\n * e.g., this.some('required', 'inited')\n *\n * @param {String} state that we want to check for.\n * @private\n */\n\nStateMachine.prototype.some = function some() {\n  const _this = this;\n  const what = arguments.length ? arguments : this.stateNames;\n  return Array.prototype.some.call(what, function(state) {\n    return Object.keys(_this.states[state]).length;\n  });\n};\n\n/*!\n * This function builds the functions that get assigned to `forEach` and `map`,\n * since both of those methods share a lot of the same logic.\n *\n * @param {String} iterMethod is either 'forEach' or 'map'\n * @return {Function}\n * @api private\n */\n\nStateMachine.prototype._iter = function _iter(iterMethod) {\n  return function() {\n    const numArgs = arguments.length;\n    let states = utils.args(arguments, 0, numArgs - 1);\n    const callback = arguments[numArgs - 1];\n\n    if (!states.length) states = this.stateNames;\n\n    const _this = this;\n\n    const paths = states.reduce(function(paths, state) {\n      return paths.concat(Object.keys(_this.states[state]));\n    }, []);\n\n    return paths[iterMethod](function(path, i, paths) {\n      return callback(path, i, paths);\n    });\n  };\n};\n\n/*!\n * Iterates over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @private\n */\n\nStateMachine.prototype.forEach = function forEach() {\n  this.forEach = this._iter('forEach');\n  return this.forEach.apply(this, arguments);\n};\n\n/*!\n * Maps over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nStateMachine.prototype.map = function map() {\n  this.map = this._iter('map');\n  return this.map.apply(this, arguments);\n};\n","\n\n/**\n * MongooseError constructor. MongooseError is the base class for all\n * Mongoose-specific errors.\n *\n * ####Example:\n *     const Model = mongoose.model('Test', new Schema({ answer: Number }));\n *     const doc = new Model({ answer: 'not a number' });\n *     const err = doc.validateSync();\n *\n *     err instanceof mongoose.Error; // true\n *\n * @constructor Error\n * @param {String} msg Error message\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\n */\n\nconst MongooseError = require('./mongooseError');\n\n/**\n * The name of the error. The name uniquely identifies this Mongoose error. The\n * possible values are:\n *\n * - `MongooseError`: general Mongoose error\n * - `CastError`: Mongoose could not convert a value to the type defined in the schema path. May be in a `ValidationError` class' `errors` property.\n * - `DisconnectedError`: This [connection](connections.html) timed out in trying to reconnect to MongoDB and will not successfully reconnect to MongoDB unless you explicitly reconnect.\n * - `DivergentArrayError`: You attempted to `save()` an array that was modified after you loaded it with a `$elemMatch` or similar projection\n * - `MissingSchemaError`: You tried to access a model with [`mongoose.model()`](api.html#mongoose_Mongoose-model) that was not defined\n * - `DocumentNotFoundError`: The document you tried to [`save()`](api.html#document_Document-save) was not found\n * - `ValidatorError`: error from an individual schema path's validator\n * - `ValidationError`: error returned from [`validate()`](api.html#document_Document-validate) or [`validateSync()`](api.html#document_Document-validateSync). Contains zero or more `ValidatorError` instances in `.errors` property.\n * - `MissingSchemaError`: You called `mongoose.Document()` without a schema\n * - `ObjectExpectedError`: Thrown when you set a nested path to a non-object value with [strict mode set](guide.html#strict).\n * - `ObjectParameterError`: Thrown when you pass a non-object value to a function which expects an object as a paramter\n * - `OverwriteModelError`: Thrown when you call [`mongoose.model()`](api.html#mongoose_Mongoose-model) to re-define a model that was already defined.\n * - `ParallelSaveError`: Thrown when you call [`save()`](api.html#model_Model-save) on a document when the same document instance is already saving.\n * - `StrictModeError`: Thrown when you set a path that isn't the schema and [strict mode](guide.html#strict) is set to `throw`.\n * - `VersionError`: Thrown when the [document is out of sync](guide.html#versionKey)\n *\n * @api public\n * @property {String} name\n * @memberOf Error\n * @instance\n */\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseError;\n\n/**\n * The default built-in validator error messages.\n *\n * @see Error.messages #error_messages_MongooseError-messages\n * @api public\n * @memberOf Error\n * @static messages\n */\n\nMongooseError.messages = require('./messages');\n\n// backward compat\nMongooseError.Messages = MongooseError.messages;\n\n/**\n * An instance of this error class will be returned when `save()` fails\n * because the underlying\n * document was not found. The constructor takes one parameter, the\n * conditions that mongoose passed to `update()` when trying to update\n * the document.\n *\n * @api public\n * @memberOf Error\n * @static DocumentNotFoundError\n */\n\nMongooseError.DocumentNotFoundError = require('./notFound');\n\n/**\n * An instance of this error class will be returned when mongoose failed to\n * cast a value.\n *\n * @api public\n * @memberOf Error\n * @static CastError\n */\n\nMongooseError.CastError = require('./cast');\n\n/**\n * An instance of this error class will be returned when [validation](/docs/validation.html) failed.\n * The `errors` property contains an object whose keys are the paths that failed and whose values are\n * instances of CastError or ValidationError.\n *\n * @api public\n * @memberOf Error\n * @static ValidationError\n */\n\nMongooseError.ValidationError = require('./validation');\n\n/**\n * A `ValidationError` has a hash of `errors` that contain individual\n * `ValidatorError` instances.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: { type: String, required: true } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *\n *     // Top-level error is a ValidationError, **not** a ValidatorError\n *     const err = doc.validateSync();\n *     err instanceof mongoose.Error.ValidationError; // true\n *\n *     // A ValidationError `err` has 0 or more ValidatorErrors keyed by the\n *     // path in the `err.errors` property.\n *     err.errors['name'] instanceof mongoose.Error.ValidatorError;\n *\n *     err.errors['name'].kind; // 'required'\n *     err.errors['name'].path; // 'name'\n *     err.errors['name'].value; // undefined\n *\n * Instances of `ValidatorError` have the following properties:\n *\n * - `kind`: The validator's `type`, like `'required'` or `'regexp'`\n * - `path`: The path that failed validation\n * - `value`: The value that failed validation\n *\n * @api public\n * @memberOf Error\n * @static ValidatorError\n */\n\nMongooseError.ValidatorError = require('./validator');\n\n/**\n * An instance of this error class will be returned when you call `save()` after\n * the document in the database was changed in a potentially unsafe way. See\n * the [`versionKey` option](/docs/guide.html#versionKey) for more information.\n *\n * @api public\n * @memberOf Error\n * @static VersionError\n */\n\nMongooseError.VersionError = require('./version');\n\n/**\n * An instance of this error class will be returned when you call `save()` multiple\n * times on the same document in parallel. See the [FAQ](/docs/faq.html) for more\n * information.\n *\n * @api public\n * @memberOf Error\n * @static ParallelSaveError\n */\n\nMongooseError.ParallelSaveError = require('./parallelSave');\n\n/**\n * Thrown when a model with the given name was already registered on the connection.\n * See [the FAQ about `OverwriteModelError`](/docs/faq.html#overwrite-model-error).\n *\n * @api public\n * @memberOf Error\n * @static OverwriteModelError\n */\n\nMongooseError.OverwriteModelError = require('./overwriteModel');\n\n/**\n * Thrown when you try to access a model that has not been registered yet\n *\n * @api public\n * @memberOf Error\n * @static MissingSchemaError\n */\n\nMongooseError.MissingSchemaError = require('./missingSchema');\n\n/**\n * An instance of this error will be returned if you used an array projection\n * and then modified the array in an unsafe way.\n *\n * @api public\n * @memberOf Error\n * @static DivergentArrayError\n */\n\nMongooseError.DivergentArrayError = require('./divergentArray');\n\n/**\n * Thrown when your try to pass values to model contrtuctor that\n * were not specified in schema or change immutable properties when\n * `strict` mode is `\"throw\"`\n *\n * @api public\n * @memberOf Error\n * @static StrictModeError\n */\n\nMongooseError.StrictModeError = require('./strict');\n","\n/**\n * The default built-in validator error messages. These may be customized.\n *\n *     // customize within each schema or globally like so\n *     const mongoose = require('mongoose');\n *     mongoose.Error.messages.String.enum  = \"Your custom message for {PATH}.\";\n *\n * As you might have noticed, error messages support basic templating\n *\n * - `{PATH}` is replaced with the invalid document path\n * - `{VALUE}` is replaced with the invalid value\n * - `{TYPE}` is replaced with the validator type such as \"regexp\", \"min\", or \"user defined\"\n * - `{MIN}` is replaced with the declared min value for the Number.min validator\n * - `{MAX}` is replaced with the declared max value for the Number.max validator\n *\n * Click the \"show code\" link below to see all defaults.\n *\n * @static messages\n * @receiver MongooseError\n * @api public\n */\n\n\n\nconst msg = module.exports = exports = {};\n\nmsg.DocumentNotFoundError = null;\n\nmsg.general = {};\nmsg.general.default = 'Validator failed for path `{PATH}` with value `{VALUE}`';\nmsg.general.required = 'Path `{PATH}` is required.';\n\nmsg.Number = {};\nmsg.Number.min = 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).';\nmsg.Number.max = 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).';\nmsg.Number.enum = '`{VALUE}` is not a valid enum value for path `{PATH}`.';\n\nmsg.Date = {};\nmsg.Date.min = 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).';\nmsg.Date.max = 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).';\n\nmsg.String = {};\nmsg.String.enum = '`{VALUE}` is not a valid enum value for path `{PATH}`.';\nmsg.String.match = 'Path `{PATH}` is invalid ({VALUE}).';\nmsg.String.minlength = 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).';\nmsg.String.maxlength = 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).';\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./');\nconst util = require('util');\n\nclass DocumentNotFoundError extends MongooseError {\n  /*!\n   * OverwriteModel Error constructor.\n   */\n  constructor(filter, model, numAffected, result) {\n    let msg;\n    const messages = MongooseError.messages;\n    if (messages.DocumentNotFoundError != null) {\n      msg = typeof messages.DocumentNotFoundError === 'function' ?\n        messages.DocumentNotFoundError(filter, model) :\n        messages.DocumentNotFoundError;\n    } else {\n      msg = 'No document found for query \"' + util.inspect(filter) +\n        '\" on model \"' + model + '\"';\n    }\n\n    super(msg);\n\n    this.result = result;\n    this.numAffected = numAffected;\n    this.filter = filter;\n    // Backwards compat\n    this.query = filter;\n  }\n}\n\nObject.defineProperty(DocumentNotFoundError.prototype, 'name', {\n  value: 'DocumentNotFoundError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\nconst get = require('../helpers/get');\nconst util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat, valueType);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /*!\n   * ignore\n   * @param {Readonly<CastError>} other\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path,\n      this.messageFormat, this.valueType);\n  }\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\n\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = get(schemaType, 'options.cast', null);\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat, valueType) {\n  if (messageFormat != null) {\n    let ret = messageFormat.\n      replace('{KIND}', kind).\n      replace('{VALUE}', stringValue).\n      replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else {\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' +\n      stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n","/*!\n * Module requirements\n */\n\n\n\nconst MongooseError = require('./mongooseError');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst util = require('util');\n\nclass ValidationError extends MongooseError {\n  /**\n   * Document Validation Error\n   *\n   * @api private\n   * @param {Document} [instance]\n   * @inherits MongooseError\n   */\n  constructor(instance) {\n    let _message;\n    if (getConstructorName(instance) === 'model') {\n      _message = instance.constructor.modelName + ' validation failed';\n    } else {\n      _message = 'Validation failed';\n    }\n\n    super(_message);\n\n    this.errors = {};\n    this._message = _message;\n\n    if (instance) {\n      instance.$errors = this.errors;\n    }\n  }\n\n  /**\n   * Console.log helper\n   */\n  toString() {\n    return this.name + ': ' + _generateMessage(this);\n  }\n\n  /*!\n   * inspect helper\n   */\n  inspect() {\n    return Object.assign(new Error(this.message), this);\n  }\n\n  /*!\n  * add message\n  */\n  addError(path, error) {\n    this.errors[path] = error;\n    this.message = this._message + ': ' + _generateMessage(this);\n  }\n}\n\n\nif (util.inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  ValidationError.prototype[util.inspect.custom] = ValidationError.prototype.inspect;\n}\n\n/*!\n * Helper for JSON.stringify\n * Ensure `name` and `message` show up in toJSON output re: gh-9847\n */\nObject.defineProperty(ValidationError.prototype, 'toJSON', {\n  enumerable: false,\n  writable: false,\n  configurable: true,\n  value: function() {\n    return Object.assign({}, this, { name: this.name, message: this.message });\n  }\n});\n\n\nObject.defineProperty(ValidationError.prototype, 'name', {\n  value: 'ValidationError'\n});\n\n/*!\n * ignore\n */\n\nfunction _generateMessage(err) {\n  const keys = Object.keys(err.errors || {});\n  const len = keys.length;\n  const msgs = [];\n  let key;\n\n  for (let i = 0; i < len; ++i) {\n    key = keys[i];\n    if (err === err.errors[key]) {\n      continue;\n    }\n    msgs.push(key + ': ' + err.errors[key].message);\n  }\n\n  return msgs.join(', ');\n}\n\n/*!\n * Module exports\n */\n\nmodule.exports = ValidationError;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\n\nclass ValidatorError extends MongooseError {\n  /**\n   * Schema validator error\n   *\n   * @param {Object} properties\n   * @api private\n   */\n  constructor(properties) {\n    let msg = properties.message;\n    if (!msg) {\n      msg = MongooseError.messages.general.default;\n    }\n\n    const message = formatMessage(msg, properties);\n    super(message);\n\n    properties = Object.assign({}, properties, { message: message });\n    this.properties = properties;\n    this.kind = properties.type;\n    this.path = properties.path;\n    this.value = properties.value;\n    this.reason = properties.reason;\n  }\n\n  /*!\n   * toString helper\n   * TODO remove? This defaults to `${this.name}: ${this.message}`\n   */\n  toString() {\n    return this.message;\n  }\n\n  /*!\n   * Ensure `name` and `message` show up in toJSON output re: gh-9296\n   */\n\n  toJSON() {\n    return Object.assign({ name: this.name, message: this.message }, this);\n  }\n}\n\n\nObject.defineProperty(ValidatorError.prototype, 'name', {\n  value: 'ValidatorError'\n});\n\n/*!\n * The object used to define this validator. Not enumerable to hide\n * it from `require('util').inspect()` output re: gh-3925\n */\n\nObject.defineProperty(ValidatorError.prototype, 'properties', {\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n// Exposed for testing\nValidatorError.prototype.formatMessage = formatMessage;\n\n/*!\n * Formats error messages\n */\n\nfunction formatMessage(msg, properties) {\n  if (typeof msg === 'function') {\n    return msg(properties);\n  }\n\n  const propertyNames = Object.keys(properties);\n  for (const propertyName of propertyNames) {\n    if (propertyName === 'message') {\n      continue;\n    }\n    msg = msg.replace('{' + propertyName.toUpperCase() + '}', properties[propertyName]);\n  }\n\n  return msg;\n}\n\n/*!\n * exports\n */\n\nmodule.exports = ValidatorError;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./');\n\nclass VersionError extends MongooseError {\n  /**\n   * Version Error constructor.\n   *\n   * @param {Document} doc\n   * @param {Number} currentVersion\n   * @param {Array<String>} modifiedPaths\n   * @api private\n   */\n  constructor(doc, currentVersion, modifiedPaths) {\n    const modifiedPathsStr = modifiedPaths.join(', ');\n    super('No matching document found for id \"' + doc._id +\n      '\" version ' + currentVersion + ' modifiedPaths \"' + modifiedPathsStr + '\"');\n    this.version = currentVersion;\n    this.modifiedPaths = modifiedPaths;\n  }\n}\n\n\nObject.defineProperty(VersionError.prototype, 'name', {\n  value: 'VersionError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = VersionError;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./');\n\nclass ParallelSaveError extends MongooseError {\n  /**\n   * ParallelSave Error constructor.\n   *\n   * @param {Document} doc\n   * @api private\n   */\n  constructor(doc) {\n    const msg = 'Can\\'t save() the same doc multiple times in parallel. Document: ';\n    super(msg + doc._id);\n  }\n}\n\nObject.defineProperty(ParallelSaveError.prototype, 'name', {\n  value: 'ParallelSaveError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = ParallelSaveError;\n","\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\n\nclass OverwriteModelError extends MongooseError {\n  /*!\n   * OverwriteModel Error constructor.\n   * @param {String} name\n   */\n  constructor(name) {\n    super('Cannot overwrite `' + name + '` model once compiled.');\n  }\n}\n\nObject.defineProperty(OverwriteModelError.prototype, 'name', {\n  value: 'OverwriteModelError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = OverwriteModelError;\n","\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\nclass MissingSchemaError extends MongooseError {\n  /*!\n   * MissingSchema Error constructor.\n   * @param {String} name\n   */\n  constructor(name) {\n    const msg = 'Schema hasn\\'t been registered for model \"' + name + '\".\\n'\n            + 'Use mongoose.model(name, schema)';\n    super(msg);\n  }\n}\n\nObject.defineProperty(MissingSchemaError.prototype, 'name', {\n  value: 'MissingSchemaError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = MissingSchemaError;\n","\n/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\nclass DivergentArrayError extends MongooseError {\n  /*!\n   * DivergentArrayError constructor.\n   * @param {Array<String>} paths\n   */\n  constructor(paths) {\n    const msg = 'For your own good, using `document.save()` to update an array '\n            + 'which was selected using an $elemMatch projection OR '\n            + 'populated using skip, limit, query conditions, or exclusion of '\n            + 'the _id field when the operation results in a $pop or $set of '\n            + 'the entire array is not supported. The following '\n            + 'path(s) would have been modified unsafely:\\n'\n            + '  ' + paths.join('\\n  ') + '\\n'\n            + 'Use Model.update() to update these arrays instead.';\n    // TODO write up a docs page (FAQ) and link to it\n    super(msg);\n  }\n}\n\nObject.defineProperty(DivergentArrayError.prototype, 'name', {\n  value: 'DivergentArrayError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = DivergentArrayError;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\n\nclass StrictModeError extends MongooseError {\n  /**\n   * Strict mode error constructor\n   *\n   * @param {String} path\n   * @param {String} [msg]\n   * @param {Boolean} [immutable]\n   * @inherits MongooseError\n   * @api private\n   */\n  constructor(path, msg, immutable) {\n    msg = msg || 'Field `' + path + '` is not in schema and strict ' +\n      'mode is set to throw.';\n    super(msg);\n    this.isImmutableError = !!immutable;\n    this.path = path;\n  }\n}\n\nObject.defineProperty(StrictModeError.prototype, 'name', {\n  value: 'StrictModeError'\n});\n\nmodule.exports = StrictModeError;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaType = require('../schematype');\nconst symbols = require('./symbols');\nconst isObject = require('../helpers/isObject');\nconst utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nMixed.schemaName = 'Mixed';\n\nMixed.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\n * Attaches a getter for all Mixed paths.\n *\n * ####Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nMixed.get = SchemaType.get;\n\n/**\n * Sets a default option for all Mixed instances.\n *\n * ####Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nMixed.set = SchemaType.set;\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  if (val instanceof Error) {\n    return utils.errorToPOJO(val);\n  }\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./error/index');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst $exists = require('./schema/operators/exists');\nconst $type = require('./schema/operators/type');\nconst get = require('./helpers/get');\nconst handleImmutable = require('./helpers/schematype/handleImmutable');\nconst isAsyncFunction = require('./helpers/isAsyncFunction');\nconst immediate = require('./helpers/immediate');\nconst schemaTypeSymbol = require('./helpers/symbols').schemaTypeSymbol;\nconst utils = require('./utils');\nconst validatorErrorSymbol = require('./helpers/symbols').validatorErrorSymbol;\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\n\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\n\nconst CastError = MongooseError.CastError;\nconst ValidatorError = MongooseError.ValidatorError;\n\n/**\n * SchemaType constructor. Do **not** instantiate `SchemaType` directly.\n * Mongoose converts your schema paths into SchemaTypes automatically.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name') instanceof SchemaType; // true\n *\n * @param {String} path\n * @param {SchemaTypeOptions} [options] See [SchemaTypeOptions docs](/docs/api/schematypeoptions.html)\n * @param {String} [instance]\n * @api public\n */\n\nfunction SchemaType(path, options, instance) {\n  this[schemaTypeSymbol] = true;\n  this.path = path;\n  this.instance = instance;\n  this.validators = [];\n  this.getters = this.constructor.hasOwnProperty('getters') ?\n    this.constructor.getters.slice() :\n    [];\n  this.setters = [];\n\n  this.splitPath();\n\n  options = options || {};\n  const defaultOptions = this.constructor.defaultOptions || {};\n  const defaultOptionsKeys = Object.keys(defaultOptions);\n\n  for (const option of defaultOptionsKeys) {\n    if (defaultOptions.hasOwnProperty(option) && !options.hasOwnProperty(option)) {\n      options[option] = defaultOptions[option];\n    }\n  }\n\n  if (options.select == null) {\n    delete options.select;\n  }\n\n  const Options = this.OptionsConstructor || SchemaTypeOptions;\n  this.options = new Options(options);\n  this._index = null;\n\n\n  if (utils.hasUserDefinedProperty(this.options, 'immutable')) {\n    this.$immutable = this.options.immutable;\n\n    handleImmutable(this);\n  }\n\n  const keys = Object.keys(this.options);\n  for (const prop of keys) {\n    if (prop === 'cast') {\n      this.castFunction(this.options[prop]);\n      continue;\n    }\n    if (utils.hasUserDefinedProperty(this.options, prop) && typeof this[prop] === 'function') {\n      // { unique: true, index: true }\n      if (prop === 'index' && this._index) {\n        if (options.index === false) {\n          const index = this._index;\n          if (typeof index === 'object' && index != null) {\n            if (index.unique) {\n              throw new Error('Path \"' + this.path + '\" may not have `index` ' +\n                'set to false and `unique` set to true');\n            }\n            if (index.sparse) {\n              throw new Error('Path \"' + this.path + '\" may not have `index` ' +\n                'set to false and `sparse` set to true');\n            }\n          }\n\n          this._index = false;\n        }\n        continue;\n      }\n\n      const val = options[prop];\n      // Special case so we don't screw up array defaults, see gh-5780\n      if (prop === 'default') {\n        this.default(val);\n        continue;\n      }\n\n      const opts = Array.isArray(val) ? val : [val];\n\n      this[prop].apply(this, opts);\n    }\n  }\n\n  Object.defineProperty(this, '$$context', {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value: null\n  });\n}\n\n/*!\n * The class that Mongoose uses internally to instantiate this SchemaType's `options` property.\n */\n\nSchemaType.prototype.OptionsConstructor = SchemaTypeOptions;\n\n/*!\n * ignore\n */\n\nSchemaType.prototype.splitPath = function() {\n  if (this._presplitPath != null) {\n    return this._presplitPath;\n  }\n  if (this.path == null) {\n    return undefined;\n  }\n\n  this._presplitPath = this.path.indexOf('.') === -1 ? [this.path] : this.path.split('.');\n  return this._presplitPath;\n};\n\n/**\n * Get/set the function used to cast arbitrary values to this type.\n *\n * ####Example:\n *\n *     // Disallow `null` for numbers, and don't try to cast any values to\n *     // numbers, so even strings like '123' will cause a CastError.\n *     mongoose.Number.cast(function(v) {\n *       assert.ok(v === undefined || typeof v === 'number');\n *       return v;\n *     });\n *\n * @param {Function|false} caster Function that casts arbitrary values to this type, or throws an error if casting failed\n * @return {Function}\n * @static\n * @receiver SchemaType\n * @function cast\n * @api public\n */\n\nSchemaType.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => v;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/**\n * Get/set the function used to cast arbitrary values to this particular schematype instance.\n * Overrides `SchemaType.cast()`.\n *\n * ####Example:\n *\n *     // Disallow `null` for numbers, and don't try to cast any values to\n *     // numbers, so even strings like '123' will cause a CastError.\n *     const number = new mongoose.Number('mypath', {});\n *     number.cast(function(v) {\n *       assert.ok(v === undefined || typeof v === 'number');\n *       return v;\n *     });\n *\n * @param {Function|false} caster Function that casts arbitrary values to this type, or throws an error if casting failed\n * @return {Function}\n * @static\n * @receiver SchemaType\n * @function cast\n * @api public\n */\n\nSchemaType.prototype.castFunction = function castFunction(caster) {\n  if (arguments.length === 0) {\n    return this._castFunction;\n  }\n  if (caster === false) {\n    caster = this.constructor._defaultCaster || (v => v);\n  }\n  this._castFunction = caster;\n\n  return this._castFunction;\n};\n\n/**\n * The function that Mongoose calls to cast arbitrary values to this SchemaType.\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api public\n */\n\nSchemaType.prototype.cast = function cast() {\n  throw new Error('Base SchemaType class does not implement a `cast()` function');\n};\n\n/**\n * Sets a default option for this schema type.\n *\n * ####Example:\n *\n *     // Make all strings be trimmed by default\n *     mongoose.SchemaTypes.String.set('trim', true);\n *\n * @param {String} option The name of the option you'd like to set (e.g. trim, lowercase, etc...)\n * @param {*} value The value of the option you'd like to set.\n * @return {void}\n * @static\n * @receiver SchemaType\n * @function set\n * @api public\n */\n\nSchemaType.set = function set(option, value) {\n  if (!this.hasOwnProperty('defaultOptions')) {\n    this.defaultOptions = Object.assign({}, this.defaultOptions);\n  }\n  this.defaultOptions[option] = value;\n};\n\n/**\n * Attaches a getter for all instances of this schema type.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n * @param {Function} getter\n * @return {this}\n * @static\n * @receiver SchemaType\n * @function get\n * @api public\n */\n\nSchemaType.get = function(getter) {\n  this.getters = this.hasOwnProperty('getters') ? this.getters : [];\n  this.getters.push(getter);\n};\n\n/**\n * Sets a default value for this SchemaType.\n *\n * ####Example:\n *\n *     const schema = new Schema({ n: { type: Number, default: 10 })\n *     const M = db.model('M', schema)\n *     const m = new M;\n *     console.log(m.n) // 10\n *\n * Defaults can be either `functions` which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.\n *\n * ####Example:\n *\n *     // values are cast:\n *     const schema = new Schema({ aNumber: { type: Number, default: 4.815162342 }})\n *     const M = db.model('M', schema)\n *     const m = new M;\n *     console.log(m.aNumber) // 4.815162342\n *\n *     // default unique objects for Mixed types:\n *     const schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default(function () {\n *       return {};\n *     });\n *\n *     // if we don't use a function to return object literals for Mixed defaults,\n *     // each document will receive a reference to the same object literal creating\n *     // a \"shared\" object instance:\n *     const schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default({});\n *     const M = db.model('M', schema);\n *     const m1 = new M;\n *     m1.mixed.added = 1;\n *     console.log(m1.mixed); // { added: 1 }\n *     const m2 = new M;\n *     console.log(m2.mixed); // { added: 1 }\n *\n * @param {Function|any} val the default value\n * @return {defaultValue}\n * @api public\n */\n\nSchemaType.prototype.default = function(val) {\n  if (arguments.length === 1) {\n    if (val === void 0) {\n      this.defaultValue = void 0;\n      return void 0;\n    }\n\n    if (val != null && val.instanceOfSchema) {\n      throw new MongooseError('Cannot set default value of path `' + this.path +\n        '` to a mongoose Schema instance.');\n    }\n\n    this.defaultValue = val;\n    return this.defaultValue;\n  } else if (arguments.length > 1) {\n    this.defaultValue = utils.args(arguments);\n  }\n  return this.defaultValue;\n};\n\n/**\n * Declares the index options for this schematype.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, index: true })\n *     const s = new Schema({ loc: { type: [Number], index: 'hashed' })\n *     const s = new Schema({ loc: { type: [Number], index: '2d', sparse: true })\n *     const s = new Schema({ loc: { type: [Number], index: { type: '2dsphere', sparse: true }})\n *     const s = new Schema({ date: { type: Date, index: { unique: true, expires: '1d' }})\n *     s.path('my.path').index(true);\n *     s.path('my.date').index({ expires: 60 });\n *     s.path('my.path').index({ unique: true, sparse: true });\n *\n * ####NOTE:\n *\n * _Indexes are created [in the background](https://docs.mongodb.com/manual/core/index-creation/#index-creation-background)\n * by default. If `background` is set to `false`, MongoDB will not execute any\n * read/write operations you send until the index build.\n * Specify `background: false` to override Mongoose's default._\n *\n * @param {Object|Boolean|String} options\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.index = function(options) {\n  this._index = options;\n  utils.expires(this._index);\n  return this;\n};\n\n/**\n * Declares an unique index.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, unique: true }});\n *     s.path('name').index({ unique: true });\n *\n * _NOTE: violating the constraint returns an `E11000` error from MongoDB when saving, not a Mongoose validation error._\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.unique = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `unique` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index == null || this._index === true) {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.unique = bool;\n  return this;\n};\n\n/**\n * Declares a full text index.\n *\n * ###Example:\n *\n *      const s = new Schema({name : {type: String, text : true })\n *      s.path('name').index({text : true});\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.text = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `text` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index === null || this._index === undefined ||\n    typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.text = bool;\n  return this;\n};\n\n/**\n * Declares a sparse index.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, sparse: true } });\n *     s.path('name').index({ sparse: true });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.sparse = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `sparse` set to true');\n  }\n\n  if (!this.options.hasOwnProperty('index') && bool === false) {\n    return this;\n  }\n\n  if (this._index == null || typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = { type: this._index };\n  }\n\n  this._index.sparse = bool;\n  return this;\n};\n\n/**\n * Defines this path as immutable. Mongoose prevents you from changing\n * immutable paths unless the parent document has [`isNew: true`](/docs/api.html#document_Document-isNew).\n *\n * ####Example:\n *\n *     const schema = new Schema({\n *       name: { type: String, immutable: true },\n *       age: Number\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     await Model.create({ name: 'test' });\n *     const doc = await Model.findOne();\n *\n *     doc.isNew; // false\n *     doc.name = 'new name';\n *     doc.name; // 'test', because `name` is immutable\n *\n * Mongoose also prevents changing immutable properties using `updateOne()`\n * and `updateMany()` based on [strict mode](/docs/guide.html#strict).\n *\n * ####Example:\n *\n *     // Mongoose will strip out the `name` update, because `name` is immutable\n *     Model.updateOne({}, { $set: { name: 'test2' }, $inc: { age: 1 } });\n *\n *     // If `strict` is set to 'throw', Mongoose will throw an error if you\n *     // update `name`\n *     const err = await Model.updateOne({}, { name: 'test2' }, { strict: 'throw' }).\n *       then(() => null, err => err);\n *     err.name; // StrictModeError\n *\n *     // If `strict` is `false`, Mongoose allows updating `name` even though\n *     // the property is immutable.\n *     Model.updateOne({}, { name: 'test2' }, { strict: false });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @see isNew /docs/api.html#document_Document-isNew\n * @api public\n */\n\nSchemaType.prototype.immutable = function(bool) {\n  this.$immutable = bool;\n  handleImmutable(this);\n\n  return this;\n};\n\n/**\n * Defines a custom function for transforming this path when converting a document to JSON.\n *\n * Mongoose calls this function with one parameter: the current `value` of the path. Mongoose\n * then uses the return value in the JSON output.\n *\n * ####Example:\n *\n *     const schema = new Schema({\n *       date: { type: Date, transform: v => v.getFullYear() }\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     await Model.create({ date: new Date('2016-06-01') });\n *     const doc = await Model.findOne();\n *\n *     doc.date instanceof Date; // true\n *\n *     doc.toJSON().date; // 2016 as a number\n *     JSON.stringify(doc); // '{\"_id\":...,\"date\":2016}'\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.transform = function(fn) {\n  this.options.transform = fn;\n\n  return this;\n};\n\n/**\n * Adds a setter to this schematype.\n *\n * ####Example:\n *\n *     function capitalize (val) {\n *       if (typeof val !== 'string') val = '';\n *       return val.charAt(0).toUpperCase() + val.substring(1);\n *     }\n *\n *     // defining within the schema\n *     const s = new Schema({ name: { type: String, set: capitalize }});\n *\n *     // or with the SchemaType\n *     const s = new Schema({ name: String })\n *     s.path('name').set(capitalize);\n *\n * Setters allow you to transform the data before it gets to the raw mongodb\n * document or query.\n *\n * Suppose you are implementing user registration for a website. Users provide\n * an email and password, which gets saved to mongodb. The email is a string\n * that you will want to normalize to lower case, in order to avoid one email\n * having more than one account -- e.g., otherwise, avenue@q.com can be registered for 2 accounts via avenue@q.com and AvEnUe@Q.CoM.\n *\n * You can set up email lower case normalization easily via a Mongoose setter.\n *\n *     function toLower(v) {\n *       return v.toLowerCase();\n *     }\n *\n *     const UserSchema = new Schema({\n *       email: { type: String, set: toLower }\n *     });\n *\n *     const User = db.model('User', UserSchema);\n *\n *     const user = new User({email: 'AVENUE@Q.COM'});\n *     console.log(user.email); // 'avenue@q.com'\n *\n *     // or\n *     const user = new User();\n *     user.email = 'Avenue@Q.com';\n *     console.log(user.email); // 'avenue@q.com'\n *     User.updateOne({ _id: _id }, { $set: { email: 'AVENUE@Q.COM' } }); // update to 'avenue@q.com'\n *\n * As you can see above, setters allow you to transform the data before it\n * stored in MongoDB, or before executing a query.\n *\n * _NOTE: we could have also just used the built-in `lowercase: true` SchemaType option instead of defining our own function._\n *\n *     new Schema({ email: { type: String, lowercase: true }})\n *\n * Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, priorValue, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return val;\n *       }\n *     }\n *\n *     const VirusSchema = new Schema({\n *       name: { type: String, required: true, set: inspector },\n *       taxonomy: { type: String, set: inspector }\n *     })\n *\n *     const Virus = db.model('Virus', VirusSchema);\n *     const v = new Virus({ name: 'Parvoviridae', taxonomy: 'Parvovirinae' });\n *\n *     console.log(v.name);     // name is required\n *     console.log(v.taxonomy); // Parvovirinae\n *\n * You can also use setters to modify other properties on the document. If\n * you're setting a property `name` on a document, the setter will run with\n * `this` as the document. Be careful, in mongoose 5 setters will also run\n * when querying by `name` with `this` as the query.\n *\n * ```javascript\n * const nameSchema = new Schema({ name: String, keywords: [String] });\n * nameSchema.path('name').set(function(v) {\n *   // Need to check if `this` is a document, because in mongoose 5\n *   // setters will also run on queries, in which case `this` will be a\n *   // mongoose query object.\n *   if (this instanceof Document && v != null) {\n *     this.keywords = v.split(' ');\n *   }\n *   return v;\n * });\n * ```\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.set = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A setter must be a function.');\n  }\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Adds a getter to this schematype.\n *\n * ####Example:\n *\n *     function dob (val) {\n *       if (!val) return val;\n *       return (val.getMonth() + 1) + \"/\" + val.getDate() + \"/\" + val.getFullYear();\n *     }\n *\n *     // defining within the schema\n *     const s = new Schema({ born: { type: Date, get: dob })\n *\n *     // or by retreiving its SchemaType\n *     const s = new Schema({ born: Date })\n *     s.path('born').get(dob)\n *\n * Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.\n *\n * Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:\n *\n *     function obfuscate (cc) {\n *       return '****-****-****-' + cc.slice(cc.length-4, cc.length);\n *     }\n *\n *     const AccountSchema = new Schema({\n *       creditCardNumber: { type: String, get: obfuscate }\n *     });\n *\n *     const Account = db.model('Account', AccountSchema);\n *\n *     Account.findById(id, function (err, found) {\n *       console.log(found.creditCardNumber); // '****-****-****-1234'\n *     });\n *\n * Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, priorValue, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return schematype.path + ' is not';\n *       }\n *     }\n *\n *     const VirusSchema = new Schema({\n *       name: { type: String, required: true, get: inspector },\n *       taxonomy: { type: String, get: inspector }\n *     })\n *\n *     const Virus = db.model('Virus', VirusSchema);\n *\n *     Virus.findById(id, function (err, virus) {\n *       console.log(virus.name);     // name is required\n *       console.log(virus.taxonomy); // taxonomy is not\n *     })\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.get = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A getter must be a function.');\n  }\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds validator(s) for this document path.\n *\n * Validators always receive the value to validate as their first argument and\n * must return `Boolean`. Returning `false` or throwing an error means\n * validation failed.\n *\n * The error message argument is optional. If not passed, the [default generic error message template](#error_messages_MongooseError-messages) will be used.\n *\n * ####Examples:\n *\n *     // make sure every value is equal to \"something\"\n *     function validator (val) {\n *       return val == 'something';\n *     }\n *     new Schema({ name: { type: String, validate: validator }});\n *\n *     // with a custom error message\n *\n *     const custom = [validator, 'Uh oh, {PATH} does not equal \"something\".']\n *     new Schema({ name: { type: String, validate: custom }});\n *\n *     // adding many validators at a time\n *\n *     const many = [\n *         { validator: validator, msg: 'uh oh' }\n *       , { validator: anotherValidator, msg: 'failed' }\n *     ]\n *     new Schema({ name: { type: String, validate: many }});\n *\n *     // or utilizing SchemaType methods directly:\n *\n *     const schema = new Schema({ name: 'string' });\n *     schema.path('name').validate(validator, 'validation of `{PATH}` failed with value `{VALUE}`');\n *\n * ####Error message templates:\n *\n * From the examples above, you may have noticed that error messages support\n * basic templating. There are a few other template keywords besides `{PATH}`\n * and `{VALUE}` too. To find out more, details are available\n * [here](#error_messages_MongooseError.messages).\n *\n * If Mongoose's built-in error message templating isn't enough, Mongoose\n * supports setting the `message` property to a function.\n *\n *     schema.path('name').validate({\n *       validator: function(v) { return v.length > 5; },\n *       // `errors['name']` will be \"name must have length 5, got 'foo'\"\n *       message: function(props) {\n *         return `${props.path} must have length 5, got '${props.value}'`;\n *       }\n *     });\n *\n * To bypass Mongoose's error messages and just copy the error message that\n * the validator throws, do this:\n *\n *     schema.path('name').validate({\n *       validator: function() { throw new Error('Oops!'); },\n *       // `errors['name']` will be \"Oops!\"\n *       message: function(props) { return props.reason.message; }\n *     });\n *\n * ####Asynchronous validation:\n *\n * Mongoose supports validators that return a promise. A validator that returns\n * a promise is called an _async validator_. Async validators run in\n * parallel, and `validate()` will wait until all async validators have settled.\n *\n *     schema.path('name').validate({\n *       validator: function (value) {\n *         return new Promise(function (resolve, reject) {\n *           resolve(false); // validation failed\n *         });\n *       }\n *     });\n *\n * You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.\n *\n * Validation occurs `pre('save')` or whenever you manually execute [document#validate](#document_Document-validate).\n *\n * If validation fails during `pre('save')` and no callback was passed to receive the error, an `error` event will be emitted on your Models associated db [connection](#connection_Connection), passing the validation error object along.\n *\n *     const conn = mongoose.createConnection(..);\n *     conn.on('error', handleError);\n *\n *     const Product = conn.model('Product', yourSchema);\n *     const dvd = new Product(..);\n *     dvd.save(); // emits error on the `conn` above\n *\n * If you want to handle these errors at the Model level, add an `error`\n * listener to your Model as shown below.\n *\n *     // registering an error listener on the Model lets us handle errors more locally\n *     Product.on('error', handleError);\n *\n * @param {RegExp|Function|Object} obj validator function, or hash describing options\n * @param {Function} [obj.validator] validator function. If the validator function returns `undefined` or a truthy value, validation succeeds. If it returns [falsy](https://masteringjs.io/tutorials/fundamentals/falsy) (except `undefined`) or throws an error, validation fails.\n * @param {String|Function} [obj.message] optional error message. If function, should return the error message as a string\n * @param {Boolean} [obj.propsParameter=false] If true, Mongoose will pass the validator properties object (with the `validator` function, `message`, etc.) as the 2nd arg to the validator function. This is disabled by default because many validators [rely on positional args](https://github.com/chriso/validator.js#validators), so turning this on may cause unpredictable behavior in external validators.\n * @param {String|Function} [errorMsg] optional error message. If function, should return the error message as a string\n * @param {String} [type] optional validator type\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.validate = function(obj, message, type) {\n  if (typeof obj === 'function' || obj && utils.getFunctionName(obj.constructor) === 'RegExp') {\n    let properties;\n    if (typeof message === 'function') {\n      properties = { validator: obj, message: message };\n      properties.type = type || 'user defined';\n    } else if (message instanceof Object && !type) {\n      properties = utils.clone(message);\n      if (!properties.message) {\n        properties.message = properties.msg;\n      }\n      properties.validator = obj;\n      properties.type = properties.type || 'user defined';\n    } else {\n      if (message == null) {\n        message = MongooseError.messages.general.default;\n      }\n      if (!type) {\n        type = 'user defined';\n      }\n      properties = { message: message, type: type, validator: obj };\n    }\n\n    this.validators.push(properties);\n    return this;\n  }\n\n  let i;\n  let length;\n  let arg;\n\n  for (i = 0, length = arguments.length; i < length; i++) {\n    arg = arguments[i];\n    if (!utils.isPOJO(arg)) {\n      const msg = 'Invalid validator. Received (' + typeof arg + ') '\n          + arg\n          + '. See http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate';\n\n      throw new Error(msg);\n    }\n    this.validate(arg.validator, arg);\n  }\n\n  return this;\n};\n\n/**\n * Adds a required validator to this SchemaType. The validator gets added\n * to the front of this SchemaType's validators array using `unshift()`.\n *\n * ####Example:\n *\n *     const s = new Schema({ born: { type: Date, required: true })\n *\n *     // or with custom error message\n *\n *     const s = new Schema({ born: { type: Date, required: '{PATH} is required!' })\n *\n *     // or with a function\n *\n *     const s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: function() { return this.userId != null; }\n *       }\n *     })\n *\n *     // or with a function and a custom message\n *     const s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: [\n *           function() { return this.userId != null; },\n *           'username is required if id is specified'\n *         ]\n *       }\n *     })\n *\n *     // or through the path API\n *\n *     s.path('name').required(true);\n *\n *     // with custom error messaging\n *\n *     s.path('name').required(true, 'grrr :( ');\n *\n *     // or make a path conditionally required based on a function\n *     const isOver18 = function() { return this.age >= 18; };\n *     s.path('voterRegistrationId').required(isOver18);\n *\n * The required validator uses the SchemaType's `checkRequired` function to\n * determine whether a given value satisfies the required validator. By default,\n * a value satisfies the required validator if `val != null` (that is, if\n * the value is not null nor undefined). However, most built-in mongoose schema\n * types override the default `checkRequired` function:\n *\n * @param {Boolean|Function|Object} required enable/disable the validator, or function that returns required boolean, or options object\n * @param {Boolean|Function} [options.isRequired] enable/disable the validator, or function that returns required boolean\n * @param {Function} [options.ErrorConstructor] custom error constructor. The constructor receives 1 parameter, an object containing the validator properties.\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @see SchemaArray#checkRequired #schema_array_SchemaArray.checkRequired\n * @see SchemaBoolean#checkRequired #schema_boolean_SchemaBoolean-checkRequired\n * @see SchemaBuffer#checkRequired #schema_buffer_SchemaBuffer.schemaName\n * @see SchemaNumber#checkRequired #schema_number_SchemaNumber-min\n * @see SchemaObjectId#checkRequired #schema_objectid_ObjectId-auto\n * @see SchemaString#checkRequired #schema_string_SchemaString-checkRequired\n * @api public\n */\n\nSchemaType.prototype.required = function(required, message) {\n  let customOptions = {};\n\n  if (arguments.length > 0 && required == null) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.requiredValidator;\n    }, this);\n\n    this.isRequired = false;\n    delete this.originalRequiredValue;\n    return this;\n  }\n\n  if (typeof required === 'object') {\n    customOptions = required;\n    message = customOptions.message || message;\n    required = required.isRequired;\n  }\n\n  if (required === false) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.requiredValidator;\n    }, this);\n\n    this.isRequired = false;\n    delete this.originalRequiredValue;\n    return this;\n  }\n\n  const _this = this;\n  this.isRequired = true;\n\n  this.requiredValidator = function(v) {\n    const cachedRequired = get(this, '$__.cachedRequired');\n\n    // no validation when this path wasn't selected in the query.\n    if (cachedRequired != null && !this.$__isSelected(_this.path) && !this[documentIsModified](_this.path)) {\n      return true;\n    }\n\n    // `$cachedRequired` gets set in `_evaluateRequiredFunctions()` so we\n    // don't call required functions multiple times in one validate call\n    // See gh-6801\n    if (cachedRequired != null && _this.path in cachedRequired) {\n      const res = cachedRequired[_this.path] ?\n        _this.checkRequired(v, this) :\n        true;\n      delete cachedRequired[_this.path];\n      return res;\n    } else if (typeof required === 'function') {\n      return required.apply(this) ? _this.checkRequired(v, this) : true;\n    }\n\n    return _this.checkRequired(v, this);\n  };\n  this.originalRequiredValue = required;\n\n  if (typeof required === 'string') {\n    message = required;\n    required = undefined;\n  }\n\n  const msg = message || MongooseError.messages.general.required;\n  this.validators.unshift(Object.assign({}, customOptions, {\n    validator: this.requiredValidator,\n    message: msg,\n    type: 'required'\n  }));\n\n  return this;\n};\n\n/**\n * Set the model that this path refers to. This is the option that [populate](https://mongoosejs.com/docs/populate.html)\n * looks at to determine the foreign collection it should query.\n *\n * ####Example:\n *     const userSchema = new Schema({ name: String });\n *     const User = mongoose.model('User', userSchema);\n *\n *     const postSchema = new Schema({ user: mongoose.ObjectId });\n *     postSchema.path('user').ref('User'); // Can set ref to a model name\n *     postSchema.path('user').ref(User); // Or a model class\n *     postSchema.path('user').ref(() => 'User'); // Or a function that returns the model name\n *     postSchema.path('user').ref(() => User); // Or a function that returns the model class\n *\n *     // Or you can just declare the `ref` inline in your schema\n *     const postSchema2 = new Schema({\n *       user: { type: mongoose.ObjectId, ref: User }\n *     });\n *\n * @param {String|Model|Function} ref either a model name, a [Model](https://mongoosejs.com/docs/models.html), or a function that returns a model name or model.\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.ref = function(ref) {\n  this.options.ref = ref;\n  return this;\n};\n\n/**\n * Gets the default value\n *\n * @param {Object} scope the scope which callback are executed\n * @param {Boolean} init\n * @api private\n */\n\nSchemaType.prototype.getDefault = function(scope, init) {\n  let ret;\n  if (typeof this.defaultValue === 'function') {\n    if (\n      this.defaultValue === Date.now ||\n      this.defaultValue === Array ||\n      this.defaultValue.name.toLowerCase() === 'objectid'\n    ) {\n      ret = this.defaultValue.call(scope);\n    } else {\n      ret = this.defaultValue.call(scope, scope);\n    }\n  } else {\n    ret = this.defaultValue;\n  }\n\n\n  if (ret !== null && ret !== undefined) {\n    if (typeof ret === 'object' && (!this.options || !this.options.shared)) {\n      ret = utils.clone(ret);\n    }\n\n    const casted = this.applySetters(ret, scope, init);\n    if (casted && casted.$isSingleNested) {\n      casted.$__parent = scope;\n    }\n    return casted;\n  }\n  return ret;\n};\n\n/*!\n * Applies setters without casting\n *\n * @api private\n */\n\nSchemaType.prototype._applySetters = function(value, scope, init, priorVal) {\n  let v = value;\n  if (init) {\n    return v;\n  }\n  const setters = this.setters;\n\n  for (let i = setters.length - 1; i >= 0; i--) {\n    v = setters[i].call(scope, v, priorVal, this);\n  }\n\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaType.prototype._castNullish = function _castNullish(v) {\n  return v;\n};\n\n/**\n * Applies setters\n *\n * @param {Object} value\n * @param {Object} scope\n * @param {Boolean} init\n * @api private\n */\n\nSchemaType.prototype.applySetters = function(value, scope, init, priorVal, options) {\n  let v = this._applySetters(value, scope, init, priorVal, options);\n  if (v == null) {\n    return this._castNullish(v);\n  }\n\n  // do not cast until all setters are applied #665\n  v = this.cast(v, scope, init, priorVal, options);\n\n  return v;\n};\n\n/**\n * Applies getters to a value\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaType.prototype.applyGetters = function(value, scope) {\n  let v = value;\n  const getters = this.getters;\n  const len = getters.length;\n\n  if (len === 0) {\n    return v;\n  }\n\n  for (let i = 0; i < len; ++i) {\n    v = getters[i].call(scope, v, this);\n  }\n\n  return v;\n};\n\n/**\n * Sets default `select()` behavior for this path.\n *\n * Set to `true` if this path should always be included in the results, `false` if it should be excluded by default. This setting can be overridden at the query level.\n *\n * ####Example:\n *\n *     T = db.model('T', new Schema({ x: { type: String, select: true }}));\n *     T.find(..); // field x will always be selected ..\n *     // .. unless overridden;\n *     T.find().select('-x').exec(callback);\n *\n * @param {Boolean} val\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.select = function select(val) {\n  this.selected = !!val;\n  return this;\n};\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * @param {any} value\n * @param {Function} callback\n * @param {Object} scope\n * @api private\n */\n\nSchemaType.prototype.doValidate = function(value, fn, scope, options) {\n  let err = false;\n  const path = this.path;\n\n  // Avoid non-object `validators`\n  const validators = this.validators.\n    filter(v => v != null && typeof v === 'object');\n\n  let count = validators.length;\n\n  if (!count) {\n    return fn(null);\n  }\n\n  const _this = this;\n  validators.forEach(function(v) {\n    if (err) {\n      return;\n    }\n\n    const validator = v.validator;\n    let ok;\n\n    const validatorProperties = utils.clone(v);\n    validatorProperties.path = options && options.path ? options.path : path;\n    validatorProperties.value = value;\n\n    if (validator instanceof RegExp) {\n      validate(validator.test(value), validatorProperties);\n      return;\n    }\n\n    if (typeof validator !== 'function') {\n      return;\n    }\n\n    if (value === undefined && validator !== _this.requiredValidator) {\n      validate(true, validatorProperties);\n      return;\n    }\n\n    try {\n      if (validatorProperties.propsParameter) {\n        ok = validator.call(scope, value, validatorProperties);\n      } else {\n        ok = validator.call(scope, value);\n      }\n    } catch (error) {\n      ok = false;\n      validatorProperties.reason = error;\n      if (error.message) {\n        validatorProperties.message = error.message;\n      }\n    }\n\n    if (ok != null && typeof ok.then === 'function') {\n      ok.then(\n        function(ok) { validate(ok, validatorProperties); },\n        function(error) {\n          validatorProperties.reason = error;\n          validatorProperties.message = error.message;\n          ok = false;\n          validate(ok, validatorProperties);\n        });\n    } else {\n      validate(ok, validatorProperties);\n    }\n\n  });\n\n  function validate(ok, validatorProperties) {\n    if (err) {\n      return;\n    }\n    if (ok === undefined || ok) {\n      if (--count <= 0) {\n        immediate(function() {\n          fn(null);\n        });\n      }\n    } else {\n      const ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n      err = new ErrorConstructor(validatorProperties);\n      err[validatorErrorSymbol] = true;\n      immediate(function() {\n        fn(err);\n      });\n    }\n  }\n};\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @param {any} value\n * @param {Object} scope\n * @return {MongooseError|undefined}\n * @api private\n */\n\nSchemaType.prototype.doValidateSync = function(value, scope, options) {\n  const path = this.path;\n  const count = this.validators.length;\n\n  if (!count) {\n    return null;\n  }\n\n  let validators = this.validators;\n  if (value === void 0) {\n    if (this.validators.length > 0 && this.validators[0].type === 'required') {\n      validators = [this.validators[0]];\n    } else {\n      return null;\n    }\n  }\n\n  let err = null;\n  validators.forEach(function(v) {\n    if (err) {\n      return;\n    }\n\n    if (v == null || typeof v !== 'object') {\n      return;\n    }\n\n    const validator = v.validator;\n    const validatorProperties = utils.clone(v);\n    validatorProperties.path = options && options.path ? options.path : path;\n    validatorProperties.value = value;\n    let ok;\n\n    // Skip any explicit async validators. Validators that return a promise\n    // will still run, but won't trigger any errors.\n    if (isAsyncFunction(validator)) {\n      return;\n    }\n\n    if (validator instanceof RegExp) {\n      validate(validator.test(value), validatorProperties);\n      return;\n    }\n\n    if (typeof validator !== 'function') {\n      return;\n    }\n\n    try {\n      if (validatorProperties.propsParameter) {\n        ok = validator.call(scope, value, validatorProperties);\n      } else {\n        ok = validator.call(scope, value);\n      }\n    } catch (error) {\n      ok = false;\n      validatorProperties.reason = error;\n    }\n\n    // Skip any validators that return a promise, we can't handle those\n    // synchronously\n    if (ok != null && typeof ok.then === 'function') {\n      return;\n    }\n    validate(ok, validatorProperties);\n  });\n\n  return err;\n\n  function validate(ok, validatorProperties) {\n    if (err) {\n      return;\n    }\n    if (ok !== undefined && !ok) {\n      const ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n      err = new ErrorConstructor(validatorProperties);\n      err[validatorErrorSymbol] = true;\n    }\n  }\n};\n\n/**\n * Determines if value is a valid Reference.\n *\n * @param {SchemaType} self\n * @param {Object} value\n * @param {Document} doc\n * @param {Boolean} init\n * @return {Boolean}\n * @api private\n */\n\nSchemaType._isRef = function(self, value, doc, init) {\n  // fast path\n  let ref = init && self.options && (self.options.ref || self.options.refPath);\n\n  if (!ref && doc && doc.$__ != null) {\n    // checks for\n    // - this populated with adhoc model and no ref was set in schema OR\n    // - setting / pushing values after population\n    const path = doc.$__fullPath(self.path, true);\n\n    const owner = doc.ownerDocument();\n    ref = (path != null && owner.$populated(path)) || doc.$populated(self.path);\n  }\n\n  if (ref) {\n    if (value == null) {\n      return true;\n    }\n    if (!Buffer.isBuffer(value) && // buffers are objects too\n        value._bsontype !== 'Binary' // raw binary value from the db\n        && utils.isObject(value) // might have deselected _id in population query\n    ) {\n      return true;\n    }\n\n    return init;\n  }\n\n  return false;\n};\n\n/*!\n * ignore\n */\n\nSchemaType.prototype._castRef = function _castRef(value, doc, init) {\n  if (value == null) {\n    return value;\n  }\n\n  if (value.$__ != null) {\n    value.$__.wasPopulated = true;\n    return value;\n  }\n\n  // setting a populated path\n  if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n    if (init) {\n      return value;\n    }\n    throw new CastError(this.instance, value, this.path, null, this);\n  }\n\n  // Handle the case where user directly sets a populated\n  // path to a plain object; cast to the Model used in\n  // the population query.\n  const path = doc.$__fullPath(this.path, true);\n  const owner = doc.ownerDocument();\n  const pop = owner.$populated(path, true);\n  let ret = value;\n  if (!doc.$__.populated ||\n      !doc.$__.populated[path] ||\n      !doc.$__.populated[path].options ||\n      !doc.$__.populated[path].options.options ||\n      !doc.$__.populated[path].options.options.lean) {\n    ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n  }\n\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\n/*!\n * Just like handleArray, except also allows `[]` because surprisingly\n * `$in: [1, []]` works fine\n */\n\nfunction handle$in(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    if (Array.isArray(m) && m.length === 0) {\n      return m;\n    }\n    return _this.castForQuery(m);\n  });\n}\n\n/*!\n * ignore\n */\n\nSchemaType.prototype.$conditionalHandlers = {\n  $all: handleArray,\n  $eq: handleSingle,\n  $in: handle$in,\n  $ne: handleSingle,\n  $nin: handle$in,\n  $exists: $exists,\n  $type: $type\n};\n\n/*!\n * Wraps `castForQuery` to handle context\n */\n\nSchemaType.prototype.castForQueryWrapper = function(params) {\n  this.$$context = params.context;\n  if ('$conditional' in params) {\n    const ret = this.castForQuery(params.$conditional, params.val);\n    this.$$context = null;\n    return ret;\n  }\n  if (params.$skipQueryCastForUpdate || params.$applySetters) {\n    const ret = this._castForQuery(params.val);\n    this.$$context = null;\n    return ret;\n  }\n\n  const ret = this.castForQuery(params.val);\n  this.$$context = null;\n  return ret;\n};\n\n/**\n * Cast the given value with the given optional query operator.\n *\n * @param {String} [$conditional] query operator, like `$eq` or `$in`\n * @param {any} val\n * @api private\n */\n\nSchemaType.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  return this._castForQuery(val);\n};\n\n/*!\n * Internal switch for runSetters\n *\n * @api private\n */\n\nSchemaType.prototype._castForQuery = function(val) {\n  return this.applySetters(val, this.$$context);\n};\n\n/**\n * Override the function the required validator uses to check whether a value\n * passes the `required` check. Override this on the individual SchemaType.\n *\n * ####Example:\n *\n *     // Use this to allow empty strings to pass the `required` validator\n *     mongoose.Schema.Types.String.checkRequired(v => typeof v === 'string');\n *\n * @param {Function} fn\n * @return {Function}\n * @static\n * @receiver SchemaType\n * @function checkRequired\n * @api public\n */\n\nSchemaType.checkRequired = function(fn) {\n  if (arguments.length > 0) {\n    this._checkRequired = fn;\n  }\n\n  return this._checkRequired;\n};\n\n/**\n * Default check for if this path satisfies the `required` validator.\n *\n * @param {any} val\n * @api private\n */\n\nSchemaType.prototype.checkRequired = function(val) {\n  return val != null;\n};\n\n/*!\n * ignore\n */\n\nSchemaType.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, options, this.instance);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) schematype.requiredValidator = this.requiredValidator;\n  if (this.defaultValue !== undefined) schematype.defaultValue = this.defaultValue;\n  if (this.$immutable !== undefined && this.options.immutable === undefined) {\n    schematype.$immutable = this.$immutable;\n\n    handleImmutable(schematype);\n  }\n  if (this._index !== undefined) schematype._index = this._index;\n  if (this.selected !== undefined) schematype.selected = this.selected;\n  if (this.isRequired !== undefined) schematype.isRequired = this.isRequired;\n  if (this.originalRequiredValue !== undefined) schematype.originalRequiredValue = this.originalRequiredValue;\n  schematype.getters = this.getters.slice();\n  schematype.setters = this.setters.slice();\n  return schematype;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = SchemaType;\n\nexports.CastError = CastError;\n\nexports.ValidatorError = ValidatorError;\n","\n\nconst clone = require('../helpers/clone');\n\n/**\n * The options defined on a schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\n *\n * @api public\n * @constructor SchemaTypeOptions\n */\n\nclass SchemaTypeOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return this;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\n\nconst opts = require('./propertyOptions');\n\n/**\n * The type to cast this path to.\n *\n * @api public\n * @property type\n * @memberOf SchemaTypeOptions\n * @type Function|String|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\n\n/**\n * Function or object describing how to validate this schematype.\n *\n * @api public\n * @property validate\n * @memberOf SchemaTypeOptions\n * @type Function|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\n\n/**\n * Allows overriding casting logic for this individual path. If a string, the\n * given string overwrites Mongoose's default cast error message.\n *\n * ####Example:\n *\n *     const schema = new Schema({\n *       num: {\n *         type: Number,\n *         cast: '{VALUE} is not a valid number'\n *       }\n *     });\n *\n *     // Throws 'CastError: \"bad\" is not a valid number'\n *     schema.path('num').cast('bad');\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({ num: 'fail' });\n *     const err = doc.validateSync();\n *\n *     err.errors['num']; // 'CastError: \"fail\" is not a valid number'\n *\n * @api public\n * @property cast\n * @memberOf SchemaTypeOptions\n * @type String\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'cast', opts);\n\n/**\n * If true, attach a required validator to this path, which ensures this path\n * cannot be set to a nullish value. If a function, Mongoose calls the\n * function and only checks for nullish values if the function returns a truthy value.\n *\n * @api public\n * @property required\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\n\n/**\n * The default value for this path. If a function, Mongoose executes the function\n * and uses the return value as the default.\n *\n * @api public\n * @property default\n * @memberOf SchemaTypeOptions\n * @type Function|Any\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\n\n/**\n * The model that `populate()` should use if populating this path.\n *\n * @api public\n * @property ref\n * @memberOf SchemaTypeOptions\n * @type Function|String\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\n\n/**\n * Whether to include or exclude this path by default when loading documents\n * using `find()`, `findOne()`, etc.\n *\n * @api public\n * @property select\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build an index on this path when the model is compiled.\n *\n * @api public\n * @property index\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a unique index on this path when the\n * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).\n *\n * @api public\n * @property unique\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * disallow changes to this path once the document\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](http://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\n *\n * @api public\n * @property immutable\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build a sparse index on this path.\n *\n * @api public\n * @property sparse\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a text index on this path.\n *\n * @api public\n * @property text\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\n\n/**\n * Define a transform function for this individual schema type.\n * Only called when calling `toJSON()` or `toObject()`.\n *\n * ####Example:\n *\n *     const schema = Schema({\n *       myDate: {\n *         type: Date,\n *         transform: v => v.getFullYear()\n *       }\n *     });\n *     const Model = mongoose.model('Test', schema);\n *\n *     const doc = new Model({ myDate: new Date('2019/06/01') });\n *     doc.myDate instanceof Date; // true\n *\n *     const res = doc.toObject({ transform: true });\n *     res.myDate; // 2019\n *\n * @api public\n * @property transform\n * @memberOf SchemaTypeOptions\n * @type Function\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'transform', opts);\n\nmodule.exports = SchemaTypeOptions;","\n\nmodule.exports = Object.freeze({\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: void 0\n});","\n\nconst castBoolean = require('../../cast/boolean');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  const path = this != null ? this.path : null;\n  return castBoolean(val, path);\n};\n","\n\nconst CastError = require('../error/cast');\n\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBoolean(value, path) {\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n\n  if (value == null) {\n    return value;\n  }\n\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);\n","\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  if (Array.isArray(val)) {\n    if (!val.every(v => typeof v === 'number' || typeof v === 'string')) {\n      throw new Error('$type array values must be strings or numbers');\n    }\n    return val;\n  }\n\n  if (typeof val !== 'number' && typeof val !== 'string') {\n    throw new Error('$type parameter must be number, string, or array of numbers and strings');\n  }\n\n  return val;\n};\n","\n\nconst StrictModeError = require('../../error/strict');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path,\n      schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.\n      filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\n\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n    if (this.isNew) {\n      return v;\n    }\n\n    const _immutable = typeof immutable === 'function' ?\n      immutable.call(this, this) :\n      immutable;\n    if (!_immutable) {\n      return v;\n    }\n\n    const _value = this.$__.priorDoc != null ?\n      this.$__.priorDoc.$__getValue(path) :\n      this.$__getValue(path);\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' +\n        'and strict mode is set to throw.', true);\n    }\n\n    return _value;\n  };\n}\n","\n\nconst { inspect } = require('util');\n\nmodule.exports = function isAsyncFunction(v) {\n  if (typeof v !== 'function') {\n    return;\n  }\n\n  return inspect(v).startsWith('[AsyncFunction:');\n};","\n\nexports.schemaMixedSymbol = Symbol.for('mongoose:schema_mixed');\n\nexports.builtInMiddleware = Symbol.for('mongoose:built-in-middleware');","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\n\nclass ObjectExpectedError extends MongooseError {\n  /**\n   * Strict mode error constructor\n   *\n   * @param {string} type\n   * @param {string} value\n   * @api private\n   */\n  constructor(path, val) {\n    const typeDescription = Array.isArray(val) ? 'array' : 'primitive value';\n    super('Tried to set nested object field `' + path +\n      `\\` to ${typeDescription} \\`` + val + '`');\n    this.path = path;\n  }\n}\n\nObject.defineProperty(ObjectExpectedError.prototype, 'name', {\n  value: 'ObjectExpectedError'\n});\n\nmodule.exports = ObjectExpectedError;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./');\n\nclass ObjectParameterError extends MongooseError {\n  /**\n   * Constructor for errors that happen when a parameter that's expected to be\n   * an object isn't an object\n   *\n   * @param {Any} value\n   * @param {String} paramName\n   * @param {String} fnName\n   * @api private\n   */\n  constructor(value, paramName, fnName) {\n    super('Parameter \"' + paramName + '\" to ' + fnName +\n      '() must be an object, got ' + value.toString());\n  }\n}\n\n\nObject.defineProperty(ObjectParameterError.prototype, 'name', {\n  value: 'ObjectParameterError'\n});\n\nmodule.exports = ObjectParameterError;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\n\n\nclass ParallelValidateError extends MongooseError {\n  /**\n   * ParallelValidate Error constructor.\n   *\n   * @param {Document} doc\n   * @api private\n   */\n  constructor(doc) {\n    const msg = 'Can\\'t validate() the same doc multiple times in parallel. Document: ';\n    super(msg + doc._id);\n  }\n}\n\nObject.defineProperty(ParallelValidateError.prototype, 'name', {\n  value: 'ParallelValidateError'\n});\n\n/*!\n * exports\n */\n\nmodule.exports = ParallelValidateError;","\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schematype');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst VirtualOptions = require('./options/VirtualOptions');\nconst VirtualType = require('./virtualtype');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst readPref = require('./driver').get().ReadPreference;\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\n  middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nlet id = 0;\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [discriminatorKey](/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * ####Example:\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n  const baseOptions = get(this, 'base.options', {});\n\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  options = utils.options({\n    strict: strict,\n    strictQuery: 'strict' in this._userProvidedOptions ?\n      this._userProvidedOptions.strict :\n      'strictQuery' in baseOptions ?\n        baseOptions.strictQuery : strict,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    _id: true,\n    id: true,\n    typeKey: 'type'\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + (typeof options.versionKey) + '`');\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + obj[key] + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n    if (obj[key] instanceof VirtualType || get(obj[key], 'constructor.name', null) === 'VirtualType') {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && !(obj[key].type instanceof Function) && obj[key].type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = obj[key][this.options.typeKey];\n      if (utils.isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        const _schema = new Schema(_typeDef);\n        const schemaWrappedPath = Object.assign({}, obj[key], { type: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).\n    map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\n\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.on =\nreserved.removeListener =\n\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.supressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` +\n      'You are allowed to use it, but use at your own risk. ' +\n      'To disable this warning pass `supressReservedKeysWarning` as a schema option.';\n\n    utils.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null) {\n        _schemaType.$isUnderneathDocArray = true;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        throw new TypeError('Schema for array path `' + path +\n          '` is from a different copy of the Mongoose module. Please make sure you\\'re using the same version ' +\n          'of Mongoose everywhere with `npm list mongoose`.');\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = (cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)) ?\n      cast[options.typeKey] :\n      cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `Could not determine the embedded type for array \\`${path}\\`. ` +\n          'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` +\n      'invalid. See ' +\n      'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = { type: {} };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) &&\n      Object.keys(obj.of).length > 0 &&\n      !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = { [schema.options.typeKey]: new Schema(obj.of) };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = { [schema.options.typeKey]: obj.of };\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/*!\n * ignore. Deprecated re: #6405\n */\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](/docs/guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](/docs/guide.html#virtuals),\n * [statics](/docs/guide.html#statics), and\n * [methods](/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                    !foundschema.schema.$isSingleNested;\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/*!\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](/docs/schematypes.html#strings)\n * - [Number](/docs/schematypes.html#numbers)\n * - [Boolean](/docs/schematypes.html#booleans) | Bool\n * - [Array](/docs/schematypes.html#arrays)\n * - [Buffer](/docs/schematypes.html#buffers)\n * - [Date](/docs/schematypes.html#dates)\n * - [ObjectId](/docs/schematypes.html#objectids) | Oid\n * - [Mixed](/docs/schematypes.html#mixed)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n","\n\nconst opts = require('./propertyOptions');\n\nclass VirtualOptions {\n  constructor(obj) {\n    Object.assign(this, obj);\n\n    if (obj != null && obj.options != null) {\n      this.options = Object.assign({}, obj.options);\n    }\n  }\n}\n\n/**\n * Marks this virtual as a populate virtual, and specifies the model to\n * use for populate.\n *\n * @api public\n * @property ref\n * @memberOf VirtualOptions\n * @type String|Model|Function\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'ref', opts);\n\n/**\n * Marks this virtual as a populate virtual, and specifies the path that\n * contains the name of the model to populate\n *\n * @api public\n * @property refPath\n * @memberOf VirtualOptions\n * @type String|Function\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'refPath', opts);\n\n/**\n * The name of the property in the local model to match to `foreignField`\n * in the foreign model.\n *\n * @api public\n * @property localField\n * @memberOf VirtualOptions\n * @type String|Function\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'localField', opts);\n\n/**\n * The name of the property in the foreign model to match to `localField`\n * in the local model.\n *\n * @api public\n * @property foreignField\n * @memberOf VirtualOptions\n * @type String|Function\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'foreignField', opts);\n\n/**\n * Whether to populate this virtual as a single document (true) or an\n * array of documents (false).\n *\n * @api public\n * @property justOne\n * @memberOf VirtualOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'justOne', opts);\n\n/**\n * If true, populate just the number of documents where `localField`\n * matches `foreignField`, as opposed to the documents themselves.\n *\n * If `count` is set, it overrides `justOne`.\n *\n * @api public\n * @property count\n * @memberOf VirtualOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'count', opts);\n\n/**\n * Add an additional filter to populate, in addition to `localField`\n * matches `foreignField`.\n *\n * @api public\n * @property match\n * @memberOf VirtualOptions\n * @type Object|Function\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'match', opts);\n\n/**\n * Additional options to pass to the query used to `populate()`:\n *\n * - `sort`\n * - `skip`\n * - `limit`\n *\n * @api public\n * @property options\n * @memberOf VirtualOptions\n * @type Object\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'options', opts);\n\n/**\n * If true, add a `skip` to the query used to `populate()`.\n *\n * @api public\n * @property skip\n * @memberOf VirtualOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'skip', opts);\n\n/**\n * If true, add a `limit` to the query used to `populate()`.\n *\n * @api public\n * @property limit\n * @memberOf VirtualOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'limit', opts);\n\n/**\n * The `limit` option for `populate()` has [some unfortunate edge cases](/docs/populate.html#query-conditions)\n * when working with multiple documents, like `.find().populate()`. The\n * `perDocumentLimit` option makes `populate()` execute a separate query\n * for each document returned from `find()` to ensure each document\n * gets up to `perDocumentLimit` populated docs if possible.\n *\n * @api public\n * @property perDocumentLimit\n * @memberOf VirtualOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'perDocumentLimit', opts);\n\nmodule.exports = VirtualOptions;","\n\nconst utils = require('./utils');\n\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {string|function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](/docs/populate.html#populate-virtuals)\n * @param {string|function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {string|function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](./api.html#query_Query-countDocuments)\n * @param {Object|Function} [options.match=null] add an extra match condition to `populate()`\n * @param {Number} [options.limit=null] add a default `limit` to the `populate()` query\n * @param {Number} [options.skip=null] add a default `skip` to the `populate()` query\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n\n/**\n * If no getters/getters, add a default\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api private\n */\n\nVirtualType.prototype._applyDefaultGetters = function() {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function() {\n    return this[internalProperty];\n  });\n  this.setters.push(function(v) {\n    this[internalProperty] = v;\n  });\n};\n\n/*!\n * ignore\n */\n\nVirtualType.prototype.clone = function() {\n  const clone = new VirtualType(this.options, this.path);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with the below 3 parameters.\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with the below 3 parameters.\n *\n * - `value`: the value being set\n * - `virtual`: the virtual object you're calling `.set()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       const parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, doc) {\n  if (utils.hasUserDefinedProperty(this.options, ['ref', 'refPath']) &&\n      doc.$$populatedVirtuals &&\n      doc.$$populatedVirtuals.hasOwnProperty(this.path)) {\n    value = doc.$$populatedVirtuals[this.path];\n  }\n\n  let v = value;\n  for (const getter of this.getters) {\n    v = getter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, doc) {\n  let v = value;\n  for (const setter of this.setters) {\n    v = setter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n","\n\nmodule.exports = function addAutoId(schema) {\n  const _obj = { _id: { auto: true } };\n  _obj._id[schema.options.typeKey] = 'ObjectId';\n  schema.add(_obj);\n};","\n\nconst get = require('../get');\nconst helperIsObject = require('../isObject');\n\n/*!\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n */\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n  const indexByName = new Map();\n\n  collectIndexes(schema);\n  return indexes;\n\n  function collectIndexes(schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n    schemaStack.set(schema, true);\n\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n\n    for (const key of keys) {\n      const path = schema.paths[key];\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true &&\n            get(path, 'schemaOptions.excludeIndexes') !== true &&\n            get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey],\n              prefix + key + '.', path.schema);\n          }\n        }\n\n        // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || (path.caster && path.caster._index);\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = helperIsObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index :\n          isObject ? index.type :\n            false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          const isDescendingIndex = Number(index) === -1;\n          field[prefix + key] = isDescendingIndex ? -1 : 1;\n        }\n\n        delete options.type;\n        if (!('background' in options)) {\n          options.background = true;\n        }\n        if (schema.options.autoIndex != null) {\n          options._autoIndex = schema.options.autoIndex;\n        }\n\n        const indexName = options && options.name;\n        if (typeof indexName === 'string') {\n          if (indexByName.has(indexName)) {\n            Object.assign(indexByName.get(indexName), field);\n          } else {\n            indexes.push([field, options]);\n            indexByName.set(indexName, field);\n          }\n        } else {\n          indexes.push([field, options]);\n          indexByName.set(indexName, field);\n        }\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  }\n\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const indexOptions = subindexes[i][1];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {};\n\n      // use forward iteration, order matters\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      const newIndexOptions = Object.assign({}, indexOptions);\n      if (indexOptions != null && indexOptions.partialFilterExpression != null) {\n        newIndexOptions.partialFilterExpression = {};\n        const partialFilterExpression = indexOptions.partialFilterExpression;\n        for (const key of Object.keys(partialFilterExpression)) {\n          newIndexOptions.partialFilterExpression[prefix + key] =\n            partialFilterExpression[key];\n        }\n      }\n\n      indexes.push([newindex, newIndexOptions]);\n    }\n  }\n};\n","\n\n/*!\n * ignore\n */\n\nmodule.exports = function addIdGetter(schema) {\n  // ensure the documents receive an id getter unless disabled\n  const autoIdGetter = !schema.paths['id'] &&\n    schema.paths['_id'] &&\n    schema.options.id;\n  if (!autoIdGetter) {\n    return schema;\n  }\n\n  schema.virtual('id').get(idGetter);\n\n  return schema;\n};\n\n/*!\n * Returns this documents _id cast to a string.\n */\n\nfunction idGetter() {\n  if (this._id != null) {\n    return String(this._id);\n  }\n\n  return null;\n}\n","\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst symbols = require('../../schema/symbols');\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\n    timestamps.currentTime :\n    null;\n  const schemaAdditions = {};\n\n  schema.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  if (createdAt && !schema.paths[createdAt]) {\n    schemaAdditions[createdAt] = { [schema.options.typeKey || 'type']: Date, immutable: true };\n  }\n  schema.add(schemaAdditions);\n\n  schema.pre('save', function(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n\n    const defaultTimestamp = currentTime != null ?\n      currentTime() :\n      this.ownerDocument().constructor.base.now();\n    const auto_id = this._id && this._id.auto;\n\n    if (!skipCreatedAt && this.isNew && createdAt && !this.$__getValue(createdAt) && this.$__isSelected(createdAt)) {\n      this.$set(createdAt, auto_id ? this._id.getTimestamp() : defaultTimestamp);\n    }\n\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.$isModified())) {\n      let ts = defaultTimestamp;\n      if (this.isNew) {\n        if (createdAt != null) {\n          ts = this.$__getValue(createdAt);\n        } else if (auto_id) {\n          ts = this._id.getTimestamp();\n        }\n      }\n      this.$set(updatedAt, ts);\n    }\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function() {\n    const ts = currentTime != null ?\n      currentTime() :\n      this.constructor.base.now();\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n\n  const opts = { query: true, model: false };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ?\n      currentTime() :\n      this.model.base.now();\n    // Replacing with null update should still trigger timestamps\n    if (this.op === 'findOneAndReplace' && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(),\n      this.options, this.schema);\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};","\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key.startsWith('$'));\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] &&\n          $path &&\n          $path.$isMongooseDocumentArray &&\n          $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function(subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null &&\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substr(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}","\n\n/**\n * For consistency's sake, we replace positional operator `$` and array filters\n * `$[]` and `$[foo]` with `0` when looking up schema paths.\n */\n\nmodule.exports = function cleanPositionalOperators(path) {\n  return path.\n    replace(/\\.\\$(\\[[^\\]]*\\])?(?=\\.)/g, '.0').\n    replace(/\\.\\$(\\[[^\\]]*\\])?$/g, '.0');\n};","\n\nmodule.exports = handleTimestampOption;\n\n/*!\n * ignore\n */\n\nfunction handleTimestampOption(arg, prop) {\n  if (arg == null) {\n    return null;\n  }\n\n  if (typeof arg === 'boolean') {\n    return prop;\n  }\n  if (typeof arg[prop] === 'boolean') {\n    return arg[prop] ? prop : null;\n  }\n  if (!(prop in arg)) {\n    return prop;\n  }\n  return arg[prop];\n}","\n\n/*!\n * ignore\n */\n\nconst get = require('../get');\n\nmodule.exports = applyTimestampsToUpdate;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options) {\n  const updates = currentUpdate;\n  let _updates = updates;\n  const overwrite = get(options, 'overwrite', false);\n  const timestamps = get(options, 'timestamps', true);\n\n  // Support skipping timestamps at the query level, see gh-6980\n  if (!timestamps || updates == null) {\n    return currentUpdate;\n  }\n\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\n\n  if (overwrite) {\n    if (currentUpdate && currentUpdate.$set) {\n      currentUpdate = currentUpdate.$set;\n      updates.$set = {};\n      _updates = updates.$set;\n    }\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\n      _updates[updatedAt] = now;\n    }\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\n      _updates[createdAt] = now;\n    }\n    return updates;\n  }\n  currentUpdate = currentUpdate || {};\n\n  if (Array.isArray(updates)) {\n    // Update with aggregation pipeline\n    updates.push({ $set: { updatedAt: now } });\n\n    return updates;\n  }\n\n  updates.$set = updates.$set || {};\n  if (!skipUpdatedAt && updatedAt &&\n      (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n    let timestampSet = false;\n    if (updatedAt.indexOf('.') !== -1) {\n      const pieces = updatedAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$set[updatedAt] = now;\n    }\n\n    if (updates.hasOwnProperty(updatedAt)) {\n      delete updates[updatedAt];\n    }\n  }\n\n  if (!skipCreatedAt && createdAt) {\n\n    if (currentUpdate[createdAt]) {\n      delete currentUpdate[createdAt];\n    }\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n      delete currentUpdate.$set[createdAt];\n    }\n    let timestampSet = false;\n    if (createdAt.indexOf('.') !== -1) {\n      const pieces = createdAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$setOnInsert = updates.$setOnInsert || {};\n      updates.$setOnInsert[createdAt] = now;\n    }\n  }\n\n  if (Object.keys(updates.$set).length === 0) {\n    delete updates.$set;\n  }\n  return updates;\n}\n","\n\nconst MongooseError = require('../../error/mongooseError');\nconst util = require('util');\n\nmodule.exports = validateRef;\n\nfunction validateRef(ref, path) {\n  if (typeof ref === 'string') {\n    return;\n  }\n\n  if (typeof ref === 'function') {\n    return;\n  }\n\n  throw new MongooseError('Invalid ref at path \"' + path + '\". Got ' +\n    util.inspect(ref, { depth: 0 }));\n}","\n\n/*!\n * ignore\n */\n\nmodule.exports = applyQueryMiddleware;\n\nconst validOps = require('./validOps');\n\n/*!\n * ignore\n */\n\napplyQueryMiddleware.middlewareFunctions = validOps.concat([\n  'validate'\n]);\n\n/*!\n * Apply query middleware\n *\n * @param {Query} query constructor\n * @param {Model} model\n */\n\nfunction applyQueryMiddleware(Query, model) {\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1,\n    nullResultByDefault: true\n  };\n\n  const middleware = model.hooks.filter(hook => {\n    const contexts = _getContexts(hook);\n    if (hook.name === 'updateOne') {\n      return contexts.query == null || !!contexts.query;\n    }\n    if (hook.name === 'deleteOne') {\n      return !!contexts.query || Object.keys(contexts).length === 0;\n    }\n    if (hook.name === 'validate' || hook.name === 'remove') {\n      return !!contexts.query;\n    }\n    if (hook.query != null || hook.document != null) {\n      return !!hook.query;\n    }\n    return true;\n  });\n\n  // `update()` thunk has a different name because `_update` was already taken\n  Query.prototype._execUpdate = middleware.createWrapper('update',\n    Query.prototype._execUpdate, null, kareemOptions);\n  // `distinct()` thunk has a different name because `_distinct` was already taken\n  Query.prototype.__distinct = middleware.createWrapper('distinct',\n    Query.prototype.__distinct, null, kareemOptions);\n\n  // `validate()` doesn't have a thunk because it doesn't execute a query.\n  Query.prototype.validate = middleware.createWrapper('validate',\n    Query.prototype.validate, null, kareemOptions);\n\n  applyQueryMiddleware.middlewareFunctions.\n    filter(v => v !== 'update' && v !== 'distinct' && v !== 'validate').\n    forEach(fn => {\n      Query.prototype[`_${fn}`] = middleware.createWrapper(fn,\n        Query.prototype[`_${fn}`], null, kareemOptions);\n    });\n}\n\nfunction _getContexts(hook) {\n  const ret = {};\n  if (hook.hasOwnProperty('query')) {\n    ret.query = hook.query;\n  }\n  if (hook.hasOwnProperty('document')) {\n    ret.document = hook.document;\n  }\n  return ret;\n}","\n\nmodule.exports = Object.freeze([\n  // Read\n  'count',\n  'countDocuments',\n  'distinct',\n  'estimatedDocumentCount',\n  'find',\n  'findOne',\n  // Update\n  'findOneAndReplace',\n  'findOneAndUpdate',\n  'replaceOne',\n  'update',\n  'updateMany',\n  'updateOne',\n  // Delete\n  'deleteMany',\n  'deleteOne',\n  'findOneAndDelete',\n  'findOneAndRemove',\n  'remove'\n]);","\n\nconst symbols = require('../../schema/symbols');\nconst promiseOrCallback = require('../promiseOrCallback');\n\n/*!\n * ignore\n */\n\nmodule.exports = applyHooks;\n\n/*!\n * ignore\n */\n\napplyHooks.middlewareFunctions = [\n  'deleteOne',\n  'save',\n  'validate',\n  'remove',\n  'updateOne',\n  'init'\n];\n\n/*!\n * Register hooks for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nfunction applyHooks(model, schema, options) {\n  options = options || {};\n\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1,\n    nullResultByDefault: true,\n    contextParameter: true\n  };\n  const objToDecorate = options.decorateDoc ? model : model.prototype;\n\n  model.$appliedHooks = true;\n  for (const key of Object.keys(schema.paths)) {\n    const type = schema.paths[key];\n    let childModel = null;\n    if (type.$isSingleNested) {\n      childModel = type.caster;\n    } else if (type.$isMongooseDocumentArray) {\n      childModel = type.Constructor;\n    } else {\n      continue;\n    }\n\n    if (childModel.$appliedHooks) {\n      continue;\n    }\n\n    applyHooks(childModel, type.schema, options);\n    if (childModel.discriminators != null) {\n      const keys = Object.keys(childModel.discriminators);\n      for (const key of keys) {\n        applyHooks(childModel.discriminators[key],\n          childModel.discriminators[key].schema, options);\n      }\n    }\n  }\n\n  // Built-in hooks rely on hooking internal functions in order to support\n  // promises and make it so that `doc.save.toString()` provides meaningful\n  // information.\n\n  const middleware = schema.s.hooks.\n    filter(hook => {\n      if (hook.name === 'updateOne' || hook.name === 'deleteOne') {\n        return !!hook['document'];\n      }\n      if (hook.name === 'remove' || hook.name === 'init') {\n        return hook['document'] == null || !!hook['document'];\n      }\n      if (hook.query != null || hook.document != null) {\n        return hook.document !== false;\n      }\n      return true;\n    }).\n    filter(hook => {\n      // If user has overwritten the method, don't apply built-in middleware\n      if (schema.methods[hook.name]) {\n        return !hook.fn[symbols.builtInMiddleware];\n      }\n\n      return true;\n    });\n\n  model._middleware = middleware;\n\n  objToDecorate.$__originalValidate = objToDecorate.$__originalValidate || objToDecorate.$__validate;\n\n  for (const method of ['save', 'validate', 'remove', 'deleteOne']) {\n    const toWrap = method === 'validate' ? '$__originalValidate' : `$__${method}`;\n    const wrapped = middleware.\n      createWrapper(method, objToDecorate[toWrap], null, kareemOptions);\n    objToDecorate[`$__${method}`] = wrapped;\n  }\n  objToDecorate.$__init = middleware.\n    createWrapperSync('init', objToDecorate.$__init, null, kareemOptions);\n\n  // Support hooks for custom methods\n  const customMethods = Object.keys(schema.methods);\n  const customMethodOptions = Object.assign({}, kareemOptions, {\n    // Only use `checkForPromise` for custom methods, because mongoose\n    // query thunks are not as consistent as I would like about returning\n    // a nullish value rather than the query. If a query thunk returns\n    // a query, `checkForPromise` causes infinite recursion\n    checkForPromise: true\n  });\n  for (const method of customMethods) {\n    if (!middleware.hasHooks(method)) {\n      // Don't wrap if there are no hooks for the custom method to avoid\n      // surprises. Also, `createWrapper()` enforces consistent async,\n      // so wrapping a sync method would break it.\n      continue;\n    }\n    const originalMethod = objToDecorate[method];\n    objToDecorate[method] = function() {\n      const args = Array.prototype.slice.call(arguments);\n      const cb = args.slice(-1).pop();\n      const argsWithoutCallback = typeof cb === 'function' ?\n        args.slice(0, args.length - 1) : args;\n      return promiseOrCallback(cb, callback => {\n        return this[`$__${method}`].apply(this,\n          argsWithoutCallback.concat([callback]));\n      }, model.events);\n    };\n    objToDecorate[`$__${method}`] = middleware.\n      createWrapper(method, originalMethod, null, customMethodOptions);\n  }\n}","\n/*!\n * Module exports.\n */\n\n\n\nexports.String = require('./string');\n\nexports.Number = require('./number');\n\nexports.Boolean = require('./boolean');\n\nexports.DocumentArray = require('./documentarray');\n\nexports.Subdocument = require('./SubdocumentPath');\n\nexports.Array = require('./array');\n\nexports.Buffer = require('./buffer');\n\nexports.Date = require('./date');\n\nexports.ObjectId = require('./objectid');\n\nexports.Mixed = require('./mixed');\n\nexports.Decimal128 = exports.Decimal = require('./decimal128');\n\nexports.Map = require('./map');\n\n// alias\n\nexports.Oid = exports.ObjectId;\nexports.Object = exports.Mixed;\nexports.Bool = exports.Boolean;\nexports.ObjectID = exports.ObjectId;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * ####Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n\n    const ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: String,\n  $regex: handleSingle,\n  $not: handleSingle\n});\n\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a string schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options; // SchemaStringOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaStringOptions\n */\n\nclass SchemaStringOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * Array of allowed values for this path\n *\n * @api public\n * @property enum\n * @memberOf SchemaStringOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\n\n/**\n * Attach a validator that succeeds if the data string matches the given regular\n * expression, and fails otherwise.\n *\n * @api public\n * @property match\n * @memberOf SchemaStringOptions\n * @type RegExp\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that lowercases this string\n * using JavaScript's built-in `String#toLowerCase()`.\n *\n * @api public\n * @property lowercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\n * whitespace using [JavaScript's built-in `String#trim()`](https://masteringjs.io/tutorials/fundamentals/trim-string).\n *\n * @api public\n * @property trim\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\n\n/**\n * If truthy, Mongoose will add a custom setter that uppercases this string\n * using JavaScript's built-in [`String#toUpperCase()`](https://masteringjs.io/tutorials/fundamentals/uppercase).\n *\n * @api public\n * @property uppercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\n\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at least the given number.\n *\n * Mongoose supports two different spellings for this option: `minLength` and `minlength`.\n * `minLength` is the recommended way to specify this option, but Mongoose also supports\n * `minlength` (lowercase \"l\").\n *\n * @api public\n * @property minLength\n * @memberOf SchemaStringOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'minLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'minlength', opts);\n\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at most the given number.\n *\n * Mongoose supports two different spellings for this option: `maxLength` and `maxlength`.\n * `maxLength` is the recommended way to specify this option, but Mongoose also supports\n * `maxlength` (lowercase \"l\").\n *\n * @api public\n * @property maxLength\n * @memberOf SchemaStringOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'maxLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'maxlength', opts);\n\n/**\n * Sets default [populate options](/docs/populate.html#query-conditions).\n *\n * @api public\n * @property populate\n * @memberOf SchemaStringOptions\n * @type Object\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaStringOptions;\n","\n\nconst CastError = require('../error/cast');\n\n/*!\n * Given a value, cast it to a string, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {string|null|undefined}\n * @throws {CastError}\n * @api private\n */\n\nmodule.exports = function castString(value, path) {\n  // If null or undefined\n  if (value == null) {\n    return value;\n  }\n\n  // handle documents being passed\n  if (value._id && typeof value._id === 'string') {\n    return value._id;\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString &&\n      value.toString !== Object.prototype.toString &&\n      !Array.isArray(value)) {\n    return value.toString();\n  }\n\n  throw new CastError('string', value, path);\n};\n","\n\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\nconst SchemaType = require('../schematype');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function(values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  const val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $mod: handleArray\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a Number schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ count: Number });\n *     schema.path('count').options; // SchemaNumberOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaNumberOptions\n */\n\nclass SchemaNumberOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If set, Mongoose adds a validator that checks that this path is at least the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is less than the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is strictly\n * equal to one of the given values.\n *\n * ####Example:\n *     const schema = new Schema({\n *       favoritePrime: {\n *         type: Number,\n *         enum: [3, 5, 7]\n *       }\n *     });\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\n *\n * @api public\n * @property enum\n * @memberOf SchemaNumberOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\n\n/**\n * Sets default [populate options](/docs/populate.html#query-conditions).\n *\n * ####Example:\n *     const schema = new Schema({\n *       child: {\n *         type: Number,\n *         ref: 'Child',\n *         populate: { select: 'name' }\n *       }\n *     });\n *     const Parent = mongoose.model('Parent', schema);\n *\n *     // Automatically adds `.select('name')`\n *     Parent.findOne().populate('child');\n *\n * @api public\n * @property populate\n * @memberOf SchemaNumberOptions\n * @type Object\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaNumberOptions;","\n\nconst assert = require('assert');\n\n/*!\n * Given a value, cast it to a number, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};\n","/*!\n * Module requirements.\n */\n\n\n\nconst CastError = require('../../error/cast');\n\n/*!\n * ignore\n */\n\nfunction handleBitwiseOperator(val) {\n  const _this = this;\n  if (Array.isArray(val)) {\n    return val.map(function(v) {\n      return _castNumber(_this.path, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  }\n  // Assume trying to cast to number\n  return _castNumber(_this.path, val);\n}\n\n/*!\n * ignore\n */\n\nfunction _castNumber(path, num) {\n  const v = Number(num);\n  if (isNaN(v)) {\n    throw new CastError('number', num, path);\n  }\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\nSchemaBoolean.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Sets a default option for all Boolean instances.\n *\n * ####Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => { castBoolean.convertToTrue = v; }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => { castBoolean.convertToFalse = v; }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst ArrayType = require('./array');\nconst CastError = require('../error/cast');\nconst EventEmitter = require('events').EventEmitter;\nconst SchemaDocumentArrayOptions =\n  require('../options/SchemaDocumentArrayOptions');\nconst SchemaType = require('../schematype');\nconst discriminator = require('../helpers/model/discriminator');\nconst get = require('../helpers/get');\nconst handleIdOption = require('../helpers/schema/handleIdOption');\nconst util = require('util');\nconst utils = require('../utils');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nlet MongooseDocumentArray;\nlet Subdocument;\n\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @inherits SchemaArray\n * @api public\n */\n\nfunction DocumentArrayPath(key, schema, options, schemaOptions) {\n  if (schemaOptions != null && schemaOptions._id != null) {\n    schema = handleIdOption(schema, schemaOptions);\n  } else if (options != null && options._id != null) {\n    schema = handleIdOption(schema, options);\n  }\n\n  const EmbeddedDocument = _createConstructor(schema, options);\n  EmbeddedDocument.prototype.$basePath = key;\n\n  ArrayType.call(this, key, EmbeddedDocument, options);\n\n  this.schema = schema;\n  this.schemaOptions = schemaOptions || {};\n  this.$isMongooseDocumentArray = true;\n  this.Constructor = EmbeddedDocument;\n\n  EmbeddedDocument.base = schema.base;\n\n  const fn = this.defaultValue;\n\n  if (!('defaultValue' in this) || fn !== void 0) {\n    this.default(function() {\n      let arr = fn.call(this);\n      if (arr != null && !Array.isArray(arr)) {\n        arr = [arr];\n      }\n      // Leave it up to `cast()` to convert this to a documentarray\n      return arr;\n    });\n  }\n\n  const parentSchemaType = this;\n  this.$embeddedSchemaType = new SchemaType(key + '.$', {\n    required: get(this, 'schemaOptions.required', false)\n  });\n  this.$embeddedSchemaType.cast = function(value, doc, init) {\n    return parentSchemaType.cast(value, doc, init)[0];\n  };\n  this.$embeddedSchemaType.$isMongooseDocumentArrayElement = true;\n  this.$embeddedSchemaType.caster = this.Constructor;\n  this.$embeddedSchemaType.schema = this.schema;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDocumentArrayPath.schemaName = 'DocumentArray';\n\n/**\n * Options for all document arrays.\n *\n * - `castNonArrays`: `true` by default. If `false`, Mongoose will throw a CastError when a value isn't an array. If `true`, Mongoose will wrap the provided value in an array before casting.\n *\n * @api public\n */\n\nDocumentArrayPath.options = { castNonArrays: true };\n\n/*!\n * Inherits from ArrayType.\n */\nDocumentArrayPath.prototype = Object.create(ArrayType.prototype);\nDocumentArrayPath.prototype.constructor = DocumentArrayPath;\nDocumentArrayPath.prototype.OptionsConstructor = SchemaDocumentArrayOptions;\n\n/*!\n * Ignore\n */\n\nfunction _createConstructor(schema, options, baseClass) {\n  Subdocument || (Subdocument = require('../types/ArraySubdocument'));\n\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n\n    this.$session(this.ownerDocument().$session());\n  }\n\n  schema._preCompile();\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  EmbeddedDocument.prototype = Object.create(proto);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema;\n  EmbeddedDocument.prototype.constructor = EmbeddedDocument;\n  EmbeddedDocument.$isArraySubdocument = true;\n  EmbeddedDocument.events = new EventEmitter();\n\n  // apply methods\n  for (const i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    EmbeddedDocument[i] = EventEmitter.prototype[i];\n  }\n\n  EmbeddedDocument.options = options;\n\n  return EmbeddedDocument;\n}\n\n/**\n * Adds a discriminator to this document array.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shapes: [shapeSchema] });\n *\n *     const docArrayPath = parentSchema.path('shapes');\n *     docArrayPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {Object|string} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @see discriminators /docs/discriminators.html\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @api public\n */\n\nDocumentArrayPath.prototype.discriminator = function(name, schema, options) {\n  if (typeof name === 'function') {\n    name = utils.getFunctionName(name);\n  }\n\n  options = options || {};\n  const tiedValue = utils.isPOJO(options) ? options.value : options;\n  const clone = get(options, 'clone', true);\n\n  if (schema.instanceOfSchema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this.casterConstructor, name, schema, tiedValue);\n\n  const EmbeddedDocument = _createConstructor(schema, null, this.casterConstructor);\n  EmbeddedDocument.baseCasterConstructor = this.casterConstructor;\n\n  try {\n    Object.defineProperty(EmbeddedDocument, 'name', {\n      value: name\n    });\n  } catch (error) {\n    // Ignore error, only happens on old versions of node\n  }\n\n  this.casterConstructor.discriminators[name] = EmbeddedDocument;\n\n  return this.casterConstructor.discriminators[name];\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nDocumentArrayPath.prototype.doValidate = function(array, fn, scope, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = require('../types/DocumentArray'));\n\n  const _this = this;\n  try {\n    SchemaType.prototype.doValidate.call(this, array, cb, scope);\n  } catch (err) {\n    return fn(err);\n  }\n\n  function cb(err) {\n    if (err) {\n      return fn(err);\n    }\n\n    let count = array && array.length;\n    let error;\n\n    if (!count) {\n      return fn();\n    }\n    if (options && options.updateValidator) {\n      return fn();\n    }\n    if (!array.isMongooseDocumentArray) {\n      array = new MongooseDocumentArray(array, _this.path, scope);\n    }\n\n    // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n    function callback(err) {\n      if (err != null) {\n        error = err;\n      }\n      --count || fn(error);\n    }\n\n    for (let i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      let doc = array[i];\n      if (doc == null) {\n        --count || fn(error);\n        continue;\n      }\n\n      // If you set the array index directly, the doc might not yet be\n      // a full fledged mongoose subdoc, so make it into one.\n      if (!(doc instanceof Subdocument)) {\n        const Constructor = getConstructor(_this.casterConstructor, array[i]);\n        doc = array[i] = new Constructor(doc, array, undefined, undefined, i);\n      }\n\n      if (options != null && options.validateModifiedOnly && !doc.$isModified()) {\n        --count || fn(error);\n        continue;\n      }\n\n      doc.$__validate(callback);\n    }\n  }\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\nDocumentArrayPath.prototype.doValidateSync = function(array, scope, options) {\n  const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n  if (schemaTypeError != null) {\n    return schemaTypeError;\n  }\n\n  const count = array && array.length;\n  let resultError = null;\n\n  if (!count) {\n    return;\n  }\n\n  // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n  for (let i = 0, len = count; i < len; ++i) {\n    // sidestep sparse entries\n    let doc = array[i];\n    if (!doc) {\n      continue;\n    }\n\n    // If you set the array index directly, the doc might not yet be\n    // a full fledged mongoose subdoc, so make it into one.\n    if (!(doc instanceof Subdocument)) {\n      const Constructor = getConstructor(this.casterConstructor, array[i]);\n      doc = array[i] = new Constructor(doc, array, undefined, undefined, i);\n    }\n\n    if (options != null && options.validateModifiedOnly && !doc.$isModified()) {\n      continue;\n    }\n\n    const subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError && resultError == null) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n\n/*!\n * ignore\n */\n\nDocumentArrayPath.prototype.getDefault = function(scope) {\n  let ret = typeof this.defaultValue === 'function'\n    ? this.defaultValue.call(scope)\n    : this.defaultValue;\n\n  if (ret == null) {\n    return ret;\n  }\n\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = require('../types/DocumentArray'));\n\n  if (!Array.isArray(ret)) {\n    ret = [ret];\n  }\n\n  ret = new MongooseDocumentArray(ret, this.path, scope);\n\n  for (let i = 0; i < ret.length; ++i) {\n    const Constructor = getConstructor(this.casterConstructor, ret[i]);\n    const _subdoc = new Constructor({}, ret, undefined,\n      undefined, i);\n    _subdoc.$init(ret[i]);\n    _subdoc.isNew = true;\n\n    // Make sure all paths in the subdoc are set to `default` instead\n    // of `init` since we used `init`.\n    Object.assign(_subdoc.$__.activePaths.default, _subdoc.$__.activePaths.init);\n    _subdoc.$__.activePaths.init = {};\n\n    ret[i] = _subdoc;\n  }\n\n  return ret;\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\nDocumentArrayPath.prototype.cast = function(value, doc, init, prev, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = require('../types/DocumentArray'));\n\n  // Skip casting if `value` is the same as the previous value, no need to cast. See gh-9266\n  if (value != null && value[arrayPathSymbol] != null && value === prev) {\n    return value;\n  }\n\n  let selected;\n  let subdoc;\n  const _opts = { transform: false, virtuals: false };\n  options = options || {};\n\n  if (!Array.isArray(value)) {\n    if (!init && !DocumentArrayPath.options.castNonArrays) {\n      throw new CastError('DocumentArray', util.inspect(value), this.path, null, this);\n    }\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init, prev, options);\n  }\n\n  if (!(value && value.isMongooseDocumentArray) &&\n      !options.skipDocumentArrayCast) {\n    value = new MongooseDocumentArray(value, this.path, doc);\n  } else if (value && value.isMongooseDocumentArray) {\n    // We need to create a new array, otherwise change tracking will\n    // update the old doc (gh-4449)\n    value = new MongooseDocumentArray(value, this.path, doc);\n  }\n\n  if (prev != null) {\n    value[arrayAtomicsSymbol] = prev[arrayAtomicsSymbol] || {};\n  }\n\n  if (options.arrayPathIndex != null) {\n    value[arrayPathSymbol] = this.path + '.' + options.arrayPathIndex;\n  }\n\n  const rawArray = value.isMongooseDocumentArrayProxy ? value.__array : value;\n\n  const len = rawArray.length;\n  const initDocumentOptions = { skipId: true, willInit: true };\n\n  for (let i = 0; i < len; ++i) {\n    if (!rawArray[i]) {\n      continue;\n    }\n\n    const Constructor = getConstructor(this.casterConstructor, rawArray[i]);\n\n    // Check if the document has a different schema (re gh-3701)\n    if (rawArray[i].$__ && !(rawArray[i] instanceof Constructor)) {\n      rawArray[i] = rawArray[i].toObject({\n        transform: false,\n        // Special case: if different model, but same schema, apply virtuals\n        // re: gh-7898\n        virtuals: rawArray[i].schema === Constructor.schema\n      });\n    }\n\n    if (rawArray[i] instanceof Subdocument) {\n      if (rawArray[i][documentArrayParent] !== doc) {\n        if (init) {\n          const subdoc = new Constructor(null, value, initDocumentOptions, selected, i);\n          rawArray[i] = subdoc.$init(rawArray[i]);\n        } else {\n          const subdoc = new Constructor(rawArray[i], value, undefined, undefined, i);\n          rawArray[i] = subdoc;\n        }\n      }\n      // Might not have the correct index yet, so ensure it does.\n      if (rawArray[i].__index == null) {\n        rawArray[i].$setIndex(i);\n      }\n    } else if (rawArray[i] != null) {\n      if (init) {\n        if (doc) {\n          selected || (selected = scopePaths(this, doc.$__.selected, init));\n        } else {\n          selected = true;\n        }\n\n        subdoc = new Constructor(null, value, initDocumentOptions, selected, i);\n        rawArray[i] = subdoc.$init(rawArray[i]);\n      } else {\n        if (prev && typeof prev.id === 'function') {\n          subdoc = prev.id(rawArray[i]._id);\n        }\n\n        if (prev && subdoc && utils.deepEqual(subdoc.toObject(_opts), rawArray[i])) {\n          // handle resetting doc with existing id and same data\n          subdoc.set(rawArray[i]);\n          // if set() is hooked it will have no return value\n          // see gh-746\n          rawArray[i] = subdoc;\n        } else {\n          try {\n            subdoc = new Constructor(rawArray[i], value, undefined,\n              undefined, i);\n            // if set() is hooked it will have no return value\n            // see gh-746\n            rawArray[i] = subdoc;\n          } catch (error) {\n            const valueInErrorMessage = util.inspect(rawArray[i]);\n            throw new CastError('embedded', valueInErrorMessage,\n              value[arrayPathSymbol], error, this);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n\n/*!\n * ignore\n */\n\nDocumentArrayPath.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, this.schema, options, this.schemaOptions);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  schematype.Constructor.discriminators = Object.assign({},\n    this.Constructor.discriminators);\n  return schematype;\n};\n\n/*!\n * ignore\n */\n\nDocumentArrayPath.prototype.applyGetters = function(value, scope) {\n  return SchemaType.prototype.applyGetters.call(this, value, scope);\n};\n\n/*!\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArrayPath} array - the array to scope `fields` paths\n * @param {Object|undefined} fields - the root fields selected in the query\n * @param {Boolean|undefined} init - if we are being created part of a query result\n */\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  const path = array.path + '.';\n  const keys = Object.keys(fields);\n  let i = keys.length;\n  const selected = {};\n  let hasKeys;\n  let key;\n  let sub;\n\n  while (i--) {\n    key = keys[i];\n    if (key.startsWith(path)) {\n      sub = key.substring(path.length);\n      if (sub === '$') {\n        continue;\n      }\n      if (sub.startsWith('$.')) {\n        sub = sub.substr(2);\n      }\n      hasKeys || (hasKeys = true);\n      selected[sub] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n\n/**\n * Sets a default option for all DocumentArray instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.DocumentArray.set('_id', false);\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nDocumentArrayPath.defaultOptions = {};\n\nDocumentArrayPath.set = SchemaType.set;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = DocumentArrayPath;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst $exists = require('./operators/exists');\nconst $type = require('./operators/type');\nconst MongooseError = require('../error/mongooseError');\nconst SchemaArrayOptions = require('../options/SchemaArrayOptions');\nconst SchemaType = require('../schematype');\nconst CastError = SchemaType.CastError;\nconst Mixed = require('./mixed');\nconst arrayDepth = require('../helpers/arrayDepth');\nconst cast = require('../cast');\nconst get = require('../helpers/get');\nconst isOperator = require('../helpers/query/isOperator');\nconst util = require('util');\nconst utils = require('../utils');\nconst castToNumber = require('./operators/helpers').castToNumber;\nconst geospatial = require('./operators/geospatial');\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\n\nlet MongooseArray;\nlet EmbeddedDoc;\n\nconst isNestedArraySymbol = Symbol('mongoose#isNestedArray');\nconst emptyOpts = Object.freeze({});\n\n/**\n * Array SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaArray(key, cast, options, schemaOptions) {\n  // lazy load\n  EmbeddedDoc || (EmbeddedDoc = require('../types').Embedded);\n\n  let typeKey = 'type';\n  if (schemaOptions && schemaOptions.typeKey) {\n    typeKey = schemaOptions.typeKey;\n  }\n  this.schemaOptions = schemaOptions;\n\n  if (cast) {\n    let castOptions = {};\n\n    if (utils.isPOJO(cast)) {\n      if (cast[typeKey]) {\n        // support { type: Woot }\n        castOptions = utils.clone(cast); // do not alter user arguments\n        delete castOptions[typeKey];\n        cast = cast[typeKey];\n      } else {\n        cast = Mixed;\n      }\n    }\n\n    if (options != null && options.ref != null && castOptions.ref == null) {\n      castOptions.ref = options.ref;\n    }\n\n    if (cast === Object) {\n      cast = Mixed;\n    }\n\n    // support { type: 'String' }\n    const name = typeof cast === 'string'\n      ? cast\n      : utils.getFunctionName(cast);\n\n    const Types = require('./index.js');\n    const caster = Types.hasOwnProperty(name) ? Types[name] : cast;\n\n    this.casterConstructor = caster;\n\n    if (this.casterConstructor instanceof SchemaArray) {\n      this.casterConstructor[isNestedArraySymbol] = true;\n    }\n\n    if (typeof caster === 'function' &&\n        !caster.$isArraySubdocument &&\n        !caster.$isSchemaMap) {\n      const path = this.caster instanceof EmbeddedDoc ? null : key;\n      this.caster = new caster(path, castOptions);\n    } else {\n      this.caster = caster;\n      if (!(this.caster instanceof EmbeddedDoc)) {\n        this.caster.path = key;\n      }\n    }\n\n    this.$embeddedSchemaType = this.caster;\n  }\n\n  this.$isMongooseArray = true;\n\n  SchemaType.call(this, key, options, 'Array');\n\n  let defaultArr;\n  let fn;\n\n  if (this.defaultValue != null) {\n    defaultArr = this.defaultValue;\n    fn = typeof defaultArr === 'function';\n  }\n\n  if (!('defaultValue' in this) || this.defaultValue !== void 0) {\n    const defaultFn = function() {\n      let arr = [];\n      if (fn) {\n        arr = defaultArr.call(this);\n      } else if (defaultArr != null) {\n        arr = arr.concat(defaultArr);\n      }\n      // Leave it up to `cast()` to convert the array\n      return arr;\n    };\n    defaultFn.$runBeforeSetters = !fn;\n    this.default(defaultFn);\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaArray.schemaName = 'Array';\n\n\n/**\n * Options for all arrays.\n *\n * - `castNonArrays`: `true` by default. If `false`, Mongoose will throw a CastError when a value isn't an array. If `true`, Mongoose will wrap the provided value in an array before casting.\n *\n * @static options\n * @api public\n */\n\nSchemaArray.options = { castNonArrays: true };\n\n/*!\n * ignore\n */\n\nSchemaArray.defaultOptions = {};\n\n/**\n * Sets a default option for all Array instances.\n *\n * ####Example:\n *\n *     // Make all Array instances have `required` of true by default.\n *     mongoose.Schema.Array.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Array }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @api public\n */\nSchemaArray.set = SchemaType.set;\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaArray.prototype = Object.create(SchemaType.prototype);\nSchemaArray.prototype.constructor = SchemaArray;\nSchemaArray.prototype.OptionsConstructor = SchemaArrayOptions;\n\n/*!\n * ignore\n */\n\nSchemaArray._checkRequired = SchemaType.prototype.checkRequired;\n\n/**\n * Override the function the required validator uses to check whether an array\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Require non-empty array to pass `required` check\n *     mongoose.Schema.Types.Array.checkRequired(v => Array.isArray(v) && v.length);\n *\n *     const M = mongoose.model({ arr: { type: Array, required: true } });\n *     new M({ arr: [] }).validateSync(); // `null`, validation fails!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @api public\n */\n\nSchemaArray.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies the `required` validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaArray.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaArray.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Adds an enum validator if this is an array of strings or numbers. Equivalent to\n * `SchemaString.prototype.enum()` or `SchemaNumber.prototype.enum()`\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaArray} this\n */\n\nSchemaArray.prototype.enum = function() {\n  let arr = this;\n  while (true) {\n    const instance = get(arr, 'caster.instance');\n    if (instance === 'Array') {\n      arr = arr.caster;\n      continue;\n    }\n    if (instance !== 'String' && instance !== 'Number') {\n      throw new Error('`enum` can only be set on an array of strings or numbers ' +\n        ', not ' + instance);\n    }\n    break;\n  }\n\n  let enumArray = arguments;\n  if (!Array.isArray(arguments) && utils.isObject(arguments)) {\n    enumArray = utils.object.vals(enumArray);\n  }\n\n  arr.caster.enum.apply(arr.caster, enumArray);\n  return this;\n};\n\n/**\n * Overrides the getters application for the population special-case\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaArray.prototype.applyGetters = function(value, scope) {\n  if (scope != null && scope.$__ != null && scope.$populated(this.path)) {\n    // means the object id was populated\n    return value;\n  }\n\n  const ret = SchemaType.prototype.applyGetters.call(this, value, scope);\n  if (Array.isArray(ret)) {\n    const rawValue = ret.isMongooseArrayProxy ? ret.__array : ret;\n    const len = rawValue.length;\n    for (let i = 0; i < len; ++i) {\n      rawValue[i] = this.caster.applyGetters(rawValue[i], scope);\n    }\n  }\n  return ret;\n};\n\nSchemaArray.prototype._applySetters = function(value, scope, init, priorVal) {\n  if (this.casterConstructor.$isMongooseArray &&\n      SchemaArray.options.castNonArrays &&\n      !this[isNestedArraySymbol]) {\n    // Check nesting levels and wrap in array if necessary\n    let depth = 0;\n    let arr = this;\n    while (arr != null &&\n      arr.$isMongooseArray &&\n      !arr.$isMongooseDocumentArray) {\n      ++depth;\n      arr = arr.casterConstructor;\n    }\n\n    // No need to wrap empty arrays\n    if (value != null && value.length > 0) {\n      const valueDepth = arrayDepth(value);\n      if (valueDepth.min === valueDepth.max && valueDepth.max < depth && valueDepth.containsNonArrayItem) {\n        for (let i = valueDepth.max; i < depth; ++i) {\n          value = [value];\n        }\n      }\n    }\n  }\n\n  return SchemaType.prototype._applySetters.call(this, value, scope, init, priorVal);\n};\n\n/**\n * Casts values for set().\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaArray.prototype.cast = function(value, doc, init, prev, options) {\n  // lazy load\n  MongooseArray || (MongooseArray = require('../types').Array);\n\n  let i;\n  let l;\n\n  if (Array.isArray(value)) {\n    const len = value.length;\n    if (!len && doc) {\n      const indexes = doc.schema.indexedPaths();\n\n      const arrayPath = this.path;\n      for (i = 0, l = indexes.length; i < l; ++i) {\n        const pathIndex = indexes[i][0][arrayPath];\n        if (pathIndex === '2dsphere' || pathIndex === '2d') {\n          return;\n        }\n      }\n\n      // Special case: if this index is on the parent of what looks like\n      // GeoJSON, skip setting the default to empty array re: #1668, #3233\n      const arrayGeojsonPath = this.path.endsWith('.coordinates') ?\n        this.path.substr(0, this.path.lastIndexOf('.')) : null;\n      if (arrayGeojsonPath != null) {\n        for (i = 0, l = indexes.length; i < l; ++i) {\n          const pathIndex = indexes[i][0][arrayGeojsonPath];\n          if (pathIndex === '2dsphere') {\n            return;\n          }\n        }\n      }\n    }\n\n    options = options || emptyOpts;\n\n    let rawValue = value.isMongooseArrayProxy ? value.__array : value;\n    value = MongooseArray(rawValue, options.path || this._arrayPath || this.path, doc, this);\n    rawValue = value.__array;\n\n    if (init && doc != null && doc.$__ != null && doc.$populated(this.path)) {\n      return value;\n    }\n\n    const caster = this.caster;\n    const isMongooseArray = caster.$isMongooseArray;\n    if (caster && this.casterConstructor !== Mixed) {\n      try {\n        const len = rawValue.length;\n        for (i = 0; i < len; i++) {\n          const opts = {};\n          // Perf: creating `arrayPath` is expensive for large arrays.\n          // We only need `arrayPath` if this is a nested array, so\n          // skip if possible.\n          if (isMongooseArray) {\n            if (options.arrayPath != null) {\n              opts.arrayPathIndex = i;\n            } else if (caster._arrayParentPath != null) {\n              opts.arrayPathIndex = i;\n            }\n          }\n          rawValue[i] = caster.applySetters(rawValue[i], doc, init, void 0, opts);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path + '.' + i, e, this);\n      }\n    }\n\n    return value;\n  }\n\n  if (init || SchemaArray.options.castNonArrays) {\n    // gh-2442: if we're loading this from the db and its not an array, mark\n    // the whole array as modified.\n    if (!!doc && !!init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init);\n  }\n\n  throw new CastError('Array', util.inspect(value), this.path, null, this);\n};\n\n/*!\n * ignore\n */\n\nSchemaArray.prototype._castForPopulate = function _castForPopulate(value, doc) {\n  // lazy load\n  MongooseArray || (MongooseArray = require('../types').Array);\n\n  if (Array.isArray(value)) {\n    let i;\n    const rawValue = value.__array ? value.__array : value;\n    const len = rawValue.length;\n\n    const caster = this.caster;\n    if (caster && this.casterConstructor !== Mixed) {\n      try {\n        for (i = 0; i < len; i++) {\n          const opts = {};\n          // Perf: creating `arrayPath` is expensive for large arrays.\n          // We only need `arrayPath` if this is a nested array, so\n          // skip if possible.\n          if (caster.$isMongooseArray && caster._arrayParentPath != null) {\n            opts.arrayPathIndex = i;\n          }\n\n          rawValue[i] = caster.cast(rawValue[i], doc, false, void 0, opts);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path + '.' + i, e, this);\n      }\n    }\n\n    return value;\n  }\n\n  throw new CastError('Array', util.inspect(value), this.path, null, this);\n};\n\nSchemaArray.prototype.$toObject = SchemaArray.prototype.toObject;\n\n/*!\n * Ignore\n */\n\nSchemaArray.prototype.discriminator = function(name, schema) {\n  let arr = this;\n  while (arr.$isMongooseArray && !arr.$isMongooseDocumentArray) {\n    arr = arr.casterConstructor;\n    if (arr == null || typeof arr === 'function') {\n      throw new MongooseError('You can only add an embedded discriminator on ' +\n        'a document array, ' + this.path + ' is a plain array');\n    }\n  }\n  return arr.discriminator(name, schema);\n};\n\n/*!\n * ignore\n */\n\nSchemaArray.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.path, this.caster, options, this.schemaOptions);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  return schematype;\n};\n\n/**\n * Casts values for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaArray.prototype.castForQuery = function($conditional, value) {\n  let handler;\n  let val;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Array.');\n    }\n\n    val = handler.call(this, value);\n  } else {\n    val = $conditional;\n    let Constructor = this.casterConstructor;\n\n    if (val &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof val[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, val[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    const proto = this.casterConstructor.prototype;\n    let method = proto && (proto.castForQuery || proto.cast);\n    if (!method && Constructor.castForQuery) {\n      method = Constructor.castForQuery;\n    }\n    const caster = this.caster;\n\n    if (Array.isArray(val)) {\n      this.setters.reverse().forEach(setter => {\n        val = setter.call(this, val, this);\n      });\n      val = val.map(function(v) {\n        if (utils.isObject(v) && v.$elemMatch) {\n          return v;\n        }\n        if (method) {\n          v = method.call(caster, v);\n          return v;\n        }\n        if (v != null) {\n          v = new Constructor(v);\n          return v;\n        }\n        return v;\n      });\n    } else if (method) {\n      val = method.call(caster, val);\n    } else if (val != null) {\n      val = new Constructor(val);\n    }\n  }\n\n  return val;\n};\n\nfunction cast$all(val) {\n  if (!Array.isArray(val)) {\n    val = [val];\n  }\n\n  val = val.map(function(v) {\n    if (utils.isObject(v)) {\n      const o = {};\n      o[this.path] = v;\n      return cast(this.casterConstructor.schema, o)[this.path];\n    }\n    return v;\n  }, this);\n\n  return this.castForQuery(val);\n}\n\nfunction cast$elemMatch(val) {\n  const keys = Object.keys(val);\n  const numKeys = keys.length;\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const value = val[key];\n    if (isOperator(key) && value != null) {\n      val[key] = this.castForQuery(key, value);\n    }\n  }\n\n  // Is this an embedded discriminator and is the discriminator key set?\n  // If so, use the discriminator schema. See gh-7449\n  const discriminatorKey = get(this,\n    'casterConstructor.schema.options.discriminatorKey');\n  const discriminators = get(this, 'casterConstructor.schema.discriminators', {});\n  if (discriminatorKey != null &&\n      val[discriminatorKey] != null &&\n      discriminators[val[discriminatorKey]] != null) {\n    return cast(discriminators[val[discriminatorKey]], val);\n  }\n\n  return cast(this.casterConstructor.schema, val);\n}\n\nconst handle = SchemaArray.prototype.$conditionalHandlers = {};\n\nhandle.$all = cast$all;\nhandle.$options = String;\nhandle.$elemMatch = cast$elemMatch;\nhandle.$geoIntersects = geospatial.cast$geoIntersects;\nhandle.$or = createLogicalQueryOperatorHandler('$or');\nhandle.$and = createLogicalQueryOperatorHandler('$and');\nhandle.$nor = createLogicalQueryOperatorHandler('$nor');\n\nfunction createLogicalQueryOperatorHandler(op) {\n  return function logicalQueryOperatorHandler(val) {\n    if (!Array.isArray(val)) {\n      throw new TypeError('conditional ' + op + ' requires an array');\n    }\n\n    const ret = [];\n    for (const obj of val) {\n      ret.push(cast(this.casterConstructor.schema, obj));\n    }\n\n    return ret;\n  };\n}\n\nhandle.$near =\nhandle.$nearSphere = geospatial.cast$near;\n\nhandle.$within =\nhandle.$geoWithin = geospatial.cast$within;\n\nhandle.$size =\nhandle.$minDistance =\nhandle.$maxDistance = castToNumber;\n\nhandle.$exists = $exists;\nhandle.$type = $type;\n\nhandle.$eq =\nhandle.$gt =\nhandle.$gte =\nhandle.$lt =\nhandle.$lte =\nhandle.$ne =\nhandle.$regex = SchemaArray.prototype.castForQuery;\n\n// `$in` is special because you can also include an empty array in the query\n// like `$in: [1, []]`, see gh-5913\nhandle.$nin = SchemaType.prototype.$conditionalHandlers.$nin;\nhandle.$in = SchemaType.prototype.$conditionalHandlers.$in;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaArray;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on an Array schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ tags: [String] });\n *     schema.path('tags').options; // SchemaArrayOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaArrayOptions\n */\n\nclass SchemaArrayOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If this is an array of strings, an array of allowed values for this path.\n * Throws an error if this array isn't an array of strings.\n *\n * @api public\n * @property enum\n * @memberOf SchemaArrayOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'enum', opts);\n\n/**\n * If set, specifies the type of this array's values. Equivalent to setting\n * `type` to an array whose first element is `of`.\n *\n * ####Example:\n *\n *     // `arr` is an array of numbers.\n *     new Schema({ arr: [Number] });\n *     // Equivalent way to define `arr` as an array of numbers\n *     new Schema({ arr: { type: Array, of: Number } });\n *\n * @api public\n * @property of\n * @memberOf SchemaArrayOptions\n * @type Function|String\n * @instance\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'of', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaArrayOptions;","\n\nmodule.exports = arrayDepth;\n\nfunction arrayDepth(arr) {\n  if (!Array.isArray(arr)) {\n    return { min: 0, max: 0, containsNonArrayItem: true };\n  }\n  if (arr.length === 0) {\n    return { min: 1, max: 1, containsNonArrayItem: false };\n  }\n  if (arr.length === 1 && !Array.isArray(arr[0])) {\n    return { min: 1, max: 1, containsNonArrayItem: false };\n  }\n\n  const res = arrayDepth(arr[0]);\n\n  for (let i = 1; i < arr.length; ++i) {\n    const _res = arrayDepth(arr[i]);\n    if (_res.min < res.min) {\n      res.min = _res.min;\n    }\n    if (_res.max > res.max) {\n      res.max = _res.max;\n    }\n    res.containsNonArrayItem = res.containsNonArrayItem || _res.containsNonArrayItem;\n  }\n\n  res.min = res.min + 1;\n  res.max = res.max + 1;\n\n  return res;\n}","\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst StrictModeError = require('./error/strict');\nconst Types = require('./schema/index');\nconst castTextSearch = require('./schema/operators/text');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst isOperator = require('./helpers/query/isOperator');\nconst util = require('util');\nconst isObject = require('./helpers/isObject');\nconst isMongooseObject = require('./helpers/isMongooseObject');\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @param {Query} context passed to setters\n * @api private\n */\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  if (obj == null) {\n    return obj;\n  }\n\n  // bson 1.x has the unfortunate tendency to remove filters that have a top-level\n  // `_bsontype` property. But we should still allow ObjectIds because\n  // `Collection#find()` has a special case to support `find(objectid)`.\n  // Should remove this when we upgrade to bson 4.x. See gh-8222, gh-8268\n  if (obj.hasOwnProperty('_bsontype') && obj._bsontype !== 'ObjectID') {\n    delete obj._bsontype;\n  }\n\n  if (schema != null && schema.discriminators != null && obj[schema.options.discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[schema.options.discriminatorKey]) || schema;\n  }\n\n  const paths = Object.keys(obj);\n  let i = paths.length;\n  let _keys;\n  let any$conditionals;\n  let schematype;\n  let nested;\n  let path;\n  let type;\n  let val;\n\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      if (!Array.isArray(val)) {\n        throw new CastError('Array', val, path);\n      }\n      for (let k = 0; k < val.length; ++k) {\n        if (val[k] == null || typeof val[k] !== 'object') {\n          throw new CastError('Object', val[k], path + '.' + k);\n        }\n        val[k] = cast(schema, val[k], options, context);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$expr') {\n      if (typeof val !== 'object' || val == null) {\n        throw new Error('`$expr` must be an object');\n      }\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else if (path === '$text') {\n      val = castTextSearch(val, path);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      // Check for embedded discriminator paths\n      if (!schematype) {\n        const split = path.split('.');\n        let j = split.length;\n        while (j--) {\n          const pathFirstHalf = split.slice(0, j).join('.');\n          const pathLastHalf = split.slice(j).join('.');\n          const _schematype = schema.path(pathFirstHalf);\n          const discriminatorKey = get(_schematype, 'schema.options.discriminatorKey');\n\n          // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n          if (_schematype != null &&\n              get(_schematype, 'schema.discriminators') != null &&\n              discriminatorKey != null &&\n              pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n            if (discriminatorVal != null) {\n              schematype = _schematype.schema.discriminators[discriminatorVal].\n                path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        const split = path.split('.');\n        let j = split.length;\n        let pathFirstHalf;\n        let pathLastHalf;\n        let remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          let geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            const numbertype = new Types.Number('__QueryCasting__');\n            let value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQueryWrapper({\n                val: val.$maxDistance,\n                context: context\n              });\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQueryWrapper({\n                val: val.$minDistance,\n                context: context\n              });\n            }\n\n            if (geo === '$within') {\n              const withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQueryWrapper({\n                  val: value.$maxDistance,\n                  context: context\n                });\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQueryWrapper({\n                  val: value.$minDistance,\n                  context: context\n                });\n              }\n              if (isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                const geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n            continue;\n          }\n        }\n\n        if (schema.nested[path]) {\n          continue;\n        }\n        if (options.upsert && options.strict) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        } if (options.strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema and strictQuery is \\'throw\\'.');\n        } else if (options.strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (getConstructorName(val) === 'Object') {\n        any$conditionals = Object.keys(val).some(isOperator);\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQueryWrapper({\n            val: val,\n            context: context\n          });\n        } else {\n          const ks = Object.keys(val);\n          let $cond;\n\n          let k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype) {\n                _keys = Object.keys(nested);\n                if (_keys.length && isOperator(_keys[0])) {\n                  for (const key in nested) {\n                    nested[key] = schematype.castForQueryWrapper({\n                      $conditional: key,\n                      val: nested[key],\n                      context: context\n                    });\n                  }\n                } else {\n                  val[$cond] = schematype.castForQueryWrapper({\n                    $conditional: $cond,\n                    val: nested,\n                    context: context\n                  });\n                }\n                continue;\n              }\n            } else {\n              val[$cond] = schematype.castForQueryWrapper({\n                $conditional: $cond,\n                val: nested,\n                context: context\n              });\n            }\n          }\n        }\n      } else if (Array.isArray(val) && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        const casted = [];\n        const valuesArray = val;\n\n        for (const _val of valuesArray) {\n          casted.push(schematype.castForQueryWrapper({\n            val: _val,\n            context: context\n          }));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQueryWrapper({\n          val: val,\n          context: context\n        });\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n      val[i] = numbertype.castForQueryWrapper({ val: item, context: context });\n    });\n  } else {\n    const nearKeys = Object.keys(val);\n    let nearLen = nearKeys.length;\n    while (nearLen--) {\n      const nkey = nearKeys[nearLen];\n      const item = val[nkey];\n      if (Array.isArray(item) || isObject(item)) {\n        _cast(item, numbertype, context);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({ val: item, context: context });\n      }\n    }\n  }\n}","\n\nconst CastError = require('../../error/cast');\nconst castBoolean = require('../../cast/boolean');\nconst castString = require('../../cast/string');\n\n/*!\n * Casts val to an object suitable for `$text`. Throws an error if the object\n * can't be casted.\n *\n * @param {Any} val value to cast\n * @param {String} [path] path to associate with any errors that occured\n * @return {Object} casted object\n * @see https://docs.mongodb.com/manual/reference/operator/query/text/\n * @api private\n */\n\nmodule.exports = function(val, path) {\n  if (val == null || typeof val !== 'object') {\n    throw new CastError('$text', val, path);\n  }\n\n  if (val.$search != null) {\n    val.$search = castString(val.$search, path + '.$search');\n  }\n  if (val.$language != null) {\n    val.$language = castString(val.$language, path + '.$language');\n  }\n  if (val.$caseSensitive != null) {\n    val.$caseSensitive = castBoolean(val.$caseSensitive,\n      path + '.$castSensitive');\n  }\n  if (val.$diacriticSensitive != null) {\n    val.$diacriticSensitive = castBoolean(val.$diacriticSensitive,\n      path + '.$diacriticSensitive');\n  }\n\n  return val;\n};\n","\n\nconst areDiscriminatorValuesEqual = require('./areDiscriminatorValuesEqual');\n\n/*!\n* returns discriminator by discriminatorMapping.value\n*\n* @param {Schema} schema\n* @param {string} value\n*/\n\nmodule.exports = function getSchemaDiscriminatorByValue(schema, value) {\n  if (schema == null || schema.discriminators == null) {\n    return null;\n  }\n  for (const key of Object.keys(schema.discriminators)) {\n    const discriminatorSchema = schema.discriminators[key];\n    if (discriminatorSchema.discriminatorMapping == null) {\n      continue;\n    }\n    if (areDiscriminatorValuesEqual(discriminatorSchema.discriminatorMapping.value, value)) {\n      return discriminatorSchema;\n    }\n  }\n  return null;\n};","\n\nconst ObjectId = require('../../types/objectid');\n\nmodule.exports = function areDiscriminatorValuesEqual(a, b) {\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a === b;\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a === b;\n  }\n  if (a instanceof ObjectId && b instanceof ObjectId) {\n    return a.toString() === b.toString();\n  }\n  return false;\n};","\n\nconst specialKeys = new Set([\n  '$ref',\n  '$id',\n  '$db'\n]);\n\nmodule.exports = function isOperator(path) {\n  return path.startsWith('$') && !specialKeys.has(path);\n};","\n\n/*!\n * Module requirements.\n */\n\nconst SchemaNumber = require('../number');\n\n/*!\n * @ignore\n */\n\nexports.castToNumber = castToNumber;\nexports.castArraysOfNumbers = castArraysOfNumbers;\n\n/*!\n * @ignore\n */\n\nfunction castToNumber(val) {\n  return SchemaNumber.cast()(val);\n}\n\nfunction castArraysOfNumbers(arr, self) {\n  arr.forEach(function(v, i) {\n    if (Array.isArray(v)) {\n      castArraysOfNumbers(v, self);\n    } else {\n      arr[i] = castToNumber.call(self, v);\n    }\n  });\n}\n","/*!\n * Module requirements.\n */\n\n\n\nconst castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nconst castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  const SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' +\n      'with a $geometry property');\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(self, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n","\n\nconst areDiscriminatorValuesEqual = require('./areDiscriminatorValuesEqual');\n\n/*!\n* returns discriminator by discriminatorMapping.value\n*\n* @param {Model} model\n* @param {string} value\n*/\n\nmodule.exports = function getDiscriminatorByValue(discriminators, value) {\n  if (discriminators == null) {\n    return null;\n  }\n  for (const name of Object.keys(discriminators)) {\n    const it = discriminators[name];\n    if (\n      it.schema &&\n      it.schema.discriminatorMapping &&\n      areDiscriminatorValuesEqual(it.schema.discriminatorMapping.value, value)\n    ) {\n      return it;\n    }\n  }\n  return null;\n};","\n/*!\n * Module exports.\n */\n\n\n\nexports.Array = require('./array');\nexports.Buffer = require('./buffer');\n\nexports.Document = // @deprecate\nexports.Embedded = require('./ArraySubdocument');\n\nexports.DocumentArray = require('./DocumentArray');\nexports.Decimal128 = require('./decimal128');\nexports.ObjectId = require('./objectid');\n\nexports.Map = require('./map');\n\nexports.Subdocument = require('./subdocument');\n","/*!\n * Module dependencies.\n */\n\n\n\nconst Document = require('../../document');\nconst mongooseArrayMethods = require('./methods');\n\nconst arrayAtomicsSymbol = require('../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayAtomicsBackupSymbol = require('../../helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayParentSymbol = require('../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../helpers/symbols').arraySchemaSymbol;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let arr;\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n    if (len === 0) {\n      arr = new Array();\n    } else if (len === 1) {\n      arr = new Array(1);\n      arr[0] = values[0];\n    } else if (len < 10000) {\n      arr = new Array();\n      arr.push.apply(arr, values);\n    } else {\n      arr = new Array();\n      for (let i = 0; i < len; ++i) {\n        arr.push(values[i]);\n      }\n    }\n  } else {\n    arr = [];\n  }\n\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: schematype,\n    [arrayParentSymbol]: void 0,\n    isMongooseArray: true,\n    isMongooseArrayProxy: true,\n    __array: arr\n  };\n\n  if (values[arrayAtomicsSymbol] != null) {\n    internals[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n  }\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  const proxy = new Proxy(arr, {\n    get: function(target, prop) {\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n      if (mongooseArrayMethods.hasOwnProperty(prop)) {\n        return mongooseArrayMethods[prop];\n      }\n\n      return arr[prop];\n    },\n    set: function(target, prop, val) {\n      if (typeof prop === 'string' && /^\\d+$/.test(prop)) {\n        const value = mongooseArrayMethods._cast.call(proxy, val, prop);\n        arr[prop] = value;\n        mongooseArrayMethods._markModified.call(proxy, prop);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = val;\n      } else {\n        arr[prop] = val;\n      }\n\n      return true;\n    }\n  });\n\n  return proxy;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n","\n\nconst Document = require('../../../document');\nconst ArraySubdocument = require('../../ArraySubdocument');\nconst MongooseError = require('../../../error/mongooseError');\nconst ObjectId = require('../../objectid');\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\nconst get = require('../../../helpers/get');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst utils = require('../../../utils');\n\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({ transform: false, virtuals: false });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    const rawValues = values.isMongooseArrayProxy ? values.__array : this;\n    const rawArray = this.isMongooseArrayProxy ? this.__array : this;\n\n    rawValues.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined,\n      undefined, { skipDocumentArrayCast: true });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(arr, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    arr[i] = value;\n    methods._markModified.call(this, i);\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return [].concat(arr);\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    const arr = this.isMongooseArrayProxy ? this.__array : this;\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    get(arr[arraySchemaSymbol], 'caster.options.ref', null);\n  if (arr.length === 0 &&\n      docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nconst returnVanillaArrayMethods = [\n  'filter',\n  'flat',\n  'flatMap',\n  'map',\n  'slice'\n];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n\n  methods[method] = function() {\n    const _arr = this.isMongooseArrayProxy ? this.__array : this;\n    const arr = [].concat(_arr);\n\n    return arr[method].apply(arr, arguments);\n  };\n}\n\nmodule.exports = methods;\n","/* eslint no-func-assign: 1 */\n\n/*!\n * Module dependencies.\n */\n\n\n\nconst EventEmitter = require('events').EventEmitter;\nconst Subdocument = require('./subdocument');\n\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\n/**\n * A constructor.\n *\n * @param {Object} obj js object returned from the db\n * @param {MongooseDocumentArray} parentArr the parent array of this document\n * @param {Boolean} skipId\n * @inherits Document\n * @api private\n */\n\nfunction ArraySubdocument(obj, parentArr, skipId, fields, index) {\n  if (parentArr != null && parentArr.isMongooseDocumentArray) {\n    this.__parentArray = parentArr;\n    this[documentArrayParent] = parentArr.$parent();\n  } else {\n    this.__parentArray = undefined;\n    this[documentArrayParent] = undefined;\n  }\n  this.$setIndex(index);\n  this.$__parent = this[documentArrayParent];\n\n  Subdocument.call(this, obj, fields, this[documentArrayParent], void 0, { isNew: true });\n}\n\n/*!\n * Inherit from Subdocument\n */\nArraySubdocument.prototype = Object.create(Subdocument.prototype);\nArraySubdocument.prototype.constructor = ArraySubdocument;\n\nObject.defineProperty(ArraySubdocument.prototype, '$isSingleNested', {\n  configurable: false,\n  writable: false,\n  value: false\n});\n\nObject.defineProperty(ArraySubdocument.prototype, '$isDocumentArrayElement', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\nfor (const i in EventEmitter.prototype) {\n  ArraySubdocument[i] = EventEmitter.prototype[i];\n}\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.$setIndex = function(index) {\n  this.__index = index;\n\n  if (this.$__ != null && this.$__.validationError != null) {\n    const keys = Object.keys(this.$__.validationError.errors);\n    for (const key of keys) {\n      this.invalidate(key, this.$__.validationError.errors[key]);\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.arr[0].populate(\"path\")`, use ' +\n    '`doc.populate(\"arr.0.path\")`');\n};\n\n/*!\n * ignore\n */\n\nArraySubdocument.prototype.$__removeFromParent = function() {\n  const _id = this._doc._id;\n  if (!_id) {\n    throw new Error('For your own good, Mongoose does not know ' +\n      'how to remove an ArraySubdocument that has no _id');\n  }\n  this.__parentArray.pull({ _id: _id });\n};\n\n/**\n * Returns the full path to this document. If optional `path` is passed, it is appended to the full path.\n *\n * @param {String} [path]\n * @param {Boolean} [skipIndex] Skip adding the array index. For example `arr.foo` instead of `arr.0.foo`.\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf ArraySubdocument\n * @instance\n */\n\nArraySubdocument.prototype.$__fullPath = function(path, skipIndex) {\n  if (this.__index == null) {\n    return null;\n  }\n  if (!this.$__.fullPath) {\n    this.ownerDocument();\n  }\n\n  if (skipIndex) {\n    return path ?\n      this.$__.fullPath + '.' + path :\n      this.$__.fullPath;\n  }\n\n  return path ?\n    this.$__.fullPath + '.' + this.__index + '.' + path :\n    this.$__.fullPath + '.' + this.__index;\n};\n\n/*!\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n */\n\nArraySubdocument.prototype.$__pathRelativeToParent = function(path, skipIndex) {\n  if (this.__index == null) {\n    return null;\n  }\n  if (skipIndex) {\n    return path == null ? this.__parentArray.$path() : this.__parentArray.$path() + '.' + path;\n  }\n  if (path == null) {\n    return this.__parentArray.$path() + '.' + this.__index;\n  }\n  return this.__parentArray.$path() + '.' + this.__index + '.' + path;\n};\n\n/*!\n * Returns this sub-documents parent document.\n */\n\nArraySubdocument.prototype.$parent = function() {\n  return this[documentArrayParent];\n};\n\n/**\n * Returns this sub-documents parent array.\n *\n * @api public\n */\n\nArraySubdocument.prototype.parentArray = function() {\n  return this.__parentArray;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ArraySubdocument;\n","\n\nconst Document = require('../document');\nconst immediate = require('../helpers/immediate');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst util = require('util');\nconst utils = require('../utils');\n\nmodule.exports = Subdocument;\n\n/**\n * Subdocument constructor.\n *\n * @inherits Document\n * @api private\n */\n\nfunction Subdocument(value, fields, parent, skipId, options) {\n  if (parent != null) {\n    // If setting a nested path, should copy isNew from parent re: gh-7048\n    const parentOptions = { isNew: parent.isNew };\n    if ('defaults' in parent.$__) {\n      parentOptions.defaults = parent.$__.defaults;\n    }\n    options = Object.assign(parentOptions, options);\n  }\n  if (options != null && options.path != null) {\n    this.$basePath = options.path;\n  }\n  Document.call(this, value, fields, skipId, options);\n\n  delete this.$__.priorDoc;\n}\n\nSubdocument.prototype = Object.create(Document.prototype);\n\nObject.defineProperty(Subdocument.prototype, '$isSubdocument', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\nObject.defineProperty(Subdocument.prototype, '$isSingleNested', {\n  configurable: false,\n  writable: false,\n  value: true\n});\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Used as a stub for middleware\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @return {Promise} resolved Promise\n * @api private\n */\n\nSubdocument.prototype.save = function(options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n  options = options || {};\n\n  if (!options.suppressWarning) {\n    utils.warn('mongoose: calling `save()` on a subdoc does **not** save ' +\n      'the document to MongoDB, it only runs save middleware. ' +\n      'Use `subdoc.save({ suppressWarning: true })` to hide this warning ' +\n      'if you\\'re sure this behavior is right for your app.');\n  }\n\n  return promiseOrCallback(fn, cb => {\n    this.$__save(cb);\n  });\n};\n\n/*!\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n */\n\nSubdocument.prototype.$__fullPath = function(path) {\n  if (!this.$__.fullPath) {\n    this.ownerDocument();\n  }\n\n  return path ?\n    this.$__.fullPath + '.' + path :\n    this.$__.fullPath;\n};\n\n/*!\n * Given a path relative to this document, return the path relative\n * to the top-level document.\n */\n\nSubdocument.prototype.$__pathRelativeToParent = function(p) {\n  if (p == null) {\n    return this.$basePath;\n  }\n  return [this.$basePath, p].join('.');\n};\n\n/**\n * Used as a stub for middleware\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @method $__save\n * @api private\n */\n\nSubdocument.prototype.$__save = function(fn) {\n  return immediate(() => fn(null, this));\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.$isValid = function(path) {\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    return parent.$isValid(fullPath);\n  }\n  return Document.prototype.$isValid.call(this, path);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.markModified = function(path) {\n  Document.prototype.markModified.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n\n  if (parent == null || fullPath == null) {\n    return;\n  }\n\n  const myPath = this.$__pathRelativeToParent().replace(/\\.$/, '');\n  if (parent.isDirectModified(myPath) || this.isNew) {\n    return;\n  }\n  this.$__parent.markModified(fullPath, this);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.isModified = function(paths, modifiedPaths) {\n  const parent = this.$parent();\n  if (parent != null) {\n    if (Array.isArray(paths) || typeof paths === 'string') {\n      paths = (Array.isArray(paths) ? paths : paths.split(' '));\n      paths = paths.map(p => this.$__pathRelativeToParent(p)).filter(p => p != null);\n    } else if (!paths) {\n      paths = this.$__pathRelativeToParent();\n    }\n\n    return parent.$isModified(paths, modifiedPaths);\n  }\n\n  return Document.prototype.isModified.call(this, paths, modifiedPaths);\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api private\n * @method $markValid\n * @receiver Subdocument\n */\n\nSubdocument.prototype.$markValid = function(path) {\n  Document.prototype.$markValid.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.$markValid(fullPath);\n  }\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.invalidate = function(path, err, val) {\n  Document.prototype.invalidate.call(this, path, err, val);\n\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.invalidate(fullPath, err, val);\n  } else if (err.kind === 'cast' || err.name === 'CastError' || fullPath == null) {\n    throw err;\n  }\n\n  return this.ownerDocument().$__.validationError;\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.$ignore = function(path) {\n  Document.prototype.$ignore.call(this, path);\n  const parent = this.$parent();\n  const fullPath = this.$__pathRelativeToParent(path);\n  if (parent != null && fullPath != null) {\n    parent.$ignore(fullPath);\n  }\n};\n\n/**\n * Returns the top level document of this sub-document.\n *\n * @return {Document}\n */\n\nSubdocument.prototype.ownerDocument = function() {\n  if (this.$__.ownerDocument) {\n    return this.$__.ownerDocument;\n  }\n\n  let parent = this; // eslint-disable-line consistent-this\n  const paths = [];\n  const seenDocs = new Set([parent]);\n\n  while (true) {\n    if (typeof parent.$__pathRelativeToParent !== 'function') {\n      break;\n    }\n    paths.unshift(parent.$__pathRelativeToParent(void 0, true));\n    const _parent = parent.$parent();\n    if (_parent == null) {\n      break;\n    }\n    parent = _parent;\n    if (seenDocs.has(parent)) {\n      throw new Error('Infinite subdocument loop: subdoc with _id ' + parent._id + ' is a parent of itself');\n    }\n\n    seenDocs.add(parent);\n  }\n\n  this.$__.fullPath = paths.join('.');\n\n  this.$__.ownerDocument = parent;\n  return this.$__.ownerDocument;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nSubdocument.prototype.parent = function() {\n  return this.$__parent;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nSubdocument.prototype.$parent = Subdocument.prototype.parent;\n\n/*!\n * no-op for hooks\n */\n\nSubdocument.prototype.$__remove = function(cb) {\n  if (cb == null) {\n    return;\n  }\n  return cb(null, this);\n};\n\nSubdocument.prototype.$__removeFromParent = function() {\n  this.$__parent.set(this.$basePath, null);\n};\n\n/**\n * Null-out this subdoc\n *\n * @param {Object} [options]\n * @param {Function} [callback] optional callback for compatibility with Document.prototype.remove\n */\n\nSubdocument.prototype.remove = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  registerRemoveListener(this);\n\n  // If removing entire doc, no need to remove subdoc\n  if (!options || !options.noop) {\n    this.$__removeFromParent();\n  }\n\n  return this.$__remove(callback);\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.nested.populate(\"path\")`, use ' +\n    '`doc.populate(\"nested.path\")`');\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n */\n\nSubdocument.prototype.inspect = function() {\n  return this.toObject({\n    transform: false,\n    virtuals: false,\n    flattenDecimals: false\n  });\n};\n\nif (util.inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  Subdocument.prototype[util.inspect.custom] = Subdocument.prototype.inspect;\n}\n\n/*!\n * Registers remove event listeners for triggering\n * on subdocuments.\n *\n * @param {Subdocument} sub\n * @api private\n */\n\nfunction registerRemoveListener(sub) {\n  let owner = sub.ownerDocument();\n\n  function emitRemove() {\n    owner.$removeListener('save', emitRemove);\n    owner.$removeListener('remove', emitRemove);\n    sub.emit('remove', sub);\n    sub.constructor.emit('remove', sub);\n    owner = sub = null;\n  }\n\n  owner.$on('save', emitRemove);\n  owner.$on('remove', emitRemove);\n}\n","\n\n/*!\n * ignore\n */\n\nexports.internalToObjectOptions = {\n  transform: false,\n  virtuals: false,\n  getters: false,\n  _skipDepopulateTopLevel: true,\n  depopulate: true,\n  flattenDecimals: false,\n  useProjection: false\n};\n","\n\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path, options) {\n  options = options || {};\n  const skipDocArrays = options.skipDocArrays;\n\n  let deleted = 0;\n  if (!doc) {\n    return deleted;\n  }\n  for (const modifiedPath of Object.keys(doc.$__.activePaths.states.modify)) {\n    if (skipDocArrays) {\n      const schemaType = doc.$__schema.path(modifiedPath);\n      if (schemaType && schemaType.$isMongooseDocumentArray) {\n        continue;\n      }\n    }\n    if (modifiedPath.startsWith(path + '.')) {\n      delete doc.$__.activePaths.states.modify[modifiedPath];\n      ++deleted;\n\n      if (doc.$isSubdocument) {\n        const owner = doc.ownerDocument();\n        const fullPath = doc.$__fullPath(modifiedPath);\n        delete owner.$__.activePaths.states.modify[fullPath];\n      }\n    }\n  }\n  return deleted;\n};\n","/*!\n * Module dependencies.\n */\n\n\n\nconst Binary = require('../driver').get().Binary;\nconst utils = require('../utils');\n\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  let val = value;\n  if (value == null) {\n    val = 0;\n  }\n\n  let encoding;\n  let path;\n  let doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  let buf;\n  if (typeof val === 'number' || val instanceof Number) {\n    buf = Buffer.alloc(val);\n  } else { // string, array or object { type: 'Buffer', data: [...] }\n    buf = Buffer.from(val, encoding, offset);\n  }\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true;\n\n  // make sure these internal props don't show up in Object.keys()\n  buf[MongooseBuffer.pathSymbol] = path;\n  buf[parentSymbol] = doc;\n\n  buf._subtype = 0;\n  return buf;\n}\n\nconst pathSymbol = Symbol.for('mongoose#Buffer#_path');\nconst parentSymbol = Symbol.for('mongoose#Buffer#_parent');\nMongooseBuffer.pathSymbol = pathSymbol;\n\n/*!\n * Inherit from Buffer.\n */\n\nMongooseBuffer.mixin = {\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n\n  _markModified: function() {\n    const parent = this[parentSymbol];\n\n    if (parent) {\n      parent.markModified(this[MongooseBuffer.pathSymbol]);\n    }\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n\n  write: function() {\n    const written = Buffer.prototype.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n\n  copy: function(target) {\n    const ret = Buffer.prototype.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n(\n// node < 0.5\n  ('writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' +\n    'writeFloat writeDouble fill ' +\n    'utf8Write binaryWrite asciiWrite set ' +\n\n  // node >= 0.5\n    'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' +\n    'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' + 'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE')\n).split(' ').forEach(function(method) {\n  if (!Buffer.prototype[method]) {\n    return;\n  }\n  MongooseBuffer.mixin[method] = function() {\n    const ret = Buffer.prototype[method].apply(this, arguments);\n    this._markModified();\n    return ret;\n  };\n});\n\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   const bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function(options) {\n  const subtype = typeof options === 'number'\n    ? options\n    : (this._subtype || 0);\n  return new Binary(Buffer.from(this), subtype);\n};\n\nMongooseBuffer.mixin.$toObject = MongooseBuffer.mixin.toObject;\n\n/**\n * Converts this buffer for storage in MongoDB, including subtype\n *\n * @return {Binary}\n * @api public\n * @method toBSON\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toBSON = function() {\n  return new Binary(this, this._subtype || 0);\n};\n\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.equals = function(other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   const bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.subtype = function(subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n\n/*!\n * Module exports.\n */\n\nMongooseBuffer.Binary = Binary;\n\nmodule.exports = MongooseBuffer;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst ArrayMethods = require('../array/methods');\nconst DocumentArrayMethods = require('./methods');\nconst Document = require('../../document');\n\nconst arrayAtomicsSymbol = require('../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayAtomicsBackupSymbol = require('../../helpers/symbols').arrayAtomicsBackupSymbol;\nconst arrayParentSymbol = require('../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  const arr = [];\n\n  const internals = {\n    [arrayAtomicsSymbol]: {},\n    [arrayAtomicsBackupSymbol]: void 0,\n    [arrayPathSymbol]: path,\n    [arraySchemaSymbol]: void 0,\n    [arrayParentSymbol]: void 0\n  };\n\n  if (Array.isArray(values)) {\n    if (values[arrayPathSymbol] === path &&\n        values[arrayParentSymbol] === doc) {\n      internals[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n  internals[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    internals[arrayParentSymbol] = doc;\n    internals[arraySchemaSymbol] = doc.schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (internals[arraySchemaSymbol] != null &&\n        internals[arraySchemaSymbol].$isMongooseArray &&\n        !internals[arraySchemaSymbol].$isMongooseDocumentArray) {\n      internals[arraySchemaSymbol] = internals[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  const proxy = new Proxy(arr, {\n    get: function(target, prop) {\n      if (prop === 'isMongooseArray' ||\n          prop === 'isMongooseArrayProxy' ||\n          prop === 'isMongooseDocumentArray' ||\n          prop === 'isMongooseDocumentArrayProxy') {\n        return true;\n      }\n      if (prop === '__array') {\n        return arr;\n      }\n      if (prop === 'set') {\n        return set;\n      }\n      if (internals.hasOwnProperty(prop)) {\n        return internals[prop];\n      }\n      if (DocumentArrayMethods.hasOwnProperty(prop)) {\n        return DocumentArrayMethods[prop];\n      }\n      if (ArrayMethods.hasOwnProperty(prop)) {\n        return ArrayMethods[prop];\n      }\n\n      return arr[prop];\n    },\n    set: function(target, prop, value) {\n      if (typeof prop === 'string' && /^\\d+$/.test(prop)) {\n        set.call(proxy, prop, value);\n      } else if (internals.hasOwnProperty(prop)) {\n        internals[prop] = value;\n      } else {\n        arr[prop] = value;\n      }\n\n      return true;\n    }\n  });\n\n  return proxy;\n}\n\nfunction set(i, val, skipModified) {\n  const arr = this.__array;\n  if (skipModified) {\n    arr[i] = val;\n    return arr;\n  }\n  const value = DocumentArrayMethods._cast.call(this, val, i);\n  arr[i] = value;\n  DocumentArrayMethods._markModified.call(this, i);\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n","\n\nconst ArrayMethods = require('../../array/methods');\nconst Document = require('../../../document');\nconst ObjectId = require('../../objectid');\nconst castObjectId = require('../../../cast/objectid');\nconst getDiscriminatorByValue = require('../../../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst utils = require('../../../utils');\n\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../../../helpers/symbols').documentArrayParent;\n\nconst methods = {\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      value && value.isMongooseDocumentArray :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = { _id: value };\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    const ret = new Constructor(value, this, undefined, undefined, index);\n    ret.isNew = true;\n    return ret;\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = ArrayMethods.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = ArrayMethods.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /*!\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = ArrayMethods.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /*!\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = ArrayMethods.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @memberOf MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  },\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n};\n\nmodule.exports = methods;\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\n  }\n}","\n\nconst ObjectId = require('../driver').get().ObjectId;\nconst assert = require('assert');\n\nmodule.exports = function castObjectId(value) {\n  if (value == null) {\n    return value;\n  }\n\n  if (value instanceof ObjectId) {\n    return value;\n  }\n\n  if (value._id) {\n    if (value._id instanceof ObjectId) {\n      return value._id;\n    }\n    if (value._id.toString instanceof Function) {\n      return new ObjectId(value._id.toString());\n    }\n  }\n\n  if (value.toString instanceof Function) {\n    return new ObjectId(value.toString());\n  }\n\n  assert.ok(false);\n};","\n\nconst Mixed = require('../schema/mixed');\nconst ObjectId = require('./objectid');\nconst clone = require('../helpers/clone');\nconst deepEqual = require('../utils').deepEqual;\nconst get = require('../helpers/get');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst handleSpreadDoc = require('../helpers/document/handleSpreadDoc');\nconst util = require('util');\nconst specialProperties = require('../helpers/specialProperties');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\n/*!\n * ignore\n */\n\nclass MongooseMap extends Map {\n  constructor(v, path, doc, schemaType) {\n    if (getConstructorName(v) === 'Object') {\n      v = Object.keys(v).reduce((arr, key) => arr.concat([[key, v[key]]]), []);\n    }\n    super(v);\n    this.$__parent = doc != null && doc.$__ != null ? doc : null;\n    this.$__path = path;\n    this.$__schemaType = schemaType == null ? new Mixed(path) : schemaType;\n\n    this.$__runDeferred();\n  }\n\n  $init(key, value) {\n    checkValidKey(key);\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n  }\n\n  $__set(key, value) {\n    super.set(key, value);\n  }\n\n  get(key, options) {\n    if (key instanceof ObjectId) {\n      key = key.toString();\n    }\n\n    options = options || {};\n    if (options.getters === false) {\n      return super.get(key);\n    }\n    return this.$__schemaType.applyGetters(super.get(key), this.$__parent);\n  }\n\n  set(key, value) {\n    if (key instanceof ObjectId) {\n      key = key.toString();\n    }\n\n    checkValidKey(key);\n    value = handleSpreadDoc(value);\n\n    // Weird, but because you can't assign to `this` before calling `super()`\n    // you can't get access to `$__schemaType` to cast in the initial call to\n    // `set()` from the `super()` constructor.\n\n    if (this.$__schemaType == null) {\n      this.$__deferred = this.$__deferred || [];\n      this.$__deferred.push({ key: key, value: value });\n      return;\n    }\n\n    const fullPath = this.$__path + '.' + key;\n    const populated = this.$__parent != null && this.$__parent.$__ ?\n      this.$__parent.$populated(fullPath) || this.$__parent.$populated(this.$__path) :\n      null;\n    const priorVal = this.get(key);\n\n    if (populated != null) {\n      if (value.$__ == null) {\n        value = new populated.options[populateModelSymbol](value);\n      }\n      value.$__.wasPopulated = true;\n    } else {\n      try {\n        value = this.$__schemaType.\n          applySetters(value, this.$__parent, false, this.get(key), { path: fullPath });\n      } catch (error) {\n        if (this.$__parent != null && this.$__parent.$__ != null) {\n          this.$__parent.invalidate(fullPath, error);\n          return;\n        }\n        throw error;\n      }\n    }\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n\n    const parent = this.$__parent;\n    if (parent != null && parent.$__ != null && !deepEqual(value, priorVal)) {\n      parent.markModified(this.$__path + '.' + key);\n    }\n  }\n\n  clear() {\n    super.clear();\n    const parent = this.$__parent;\n    if (parent != null) {\n      parent.markModified(this.$__path);\n    }\n  }\n\n  delete(key) {\n    if (key instanceof ObjectId) {\n      key = key.toString();\n    }\n\n    this.set(key, undefined);\n    super.delete(key);\n  }\n\n  toBSON() {\n    return new Map(this);\n  }\n\n  toObject(options) {\n    if (get(options, 'flattenMaps')) {\n      const ret = {};\n      const keys = this.keys();\n      for (const key of keys) {\n        ret[key] = clone(this.get(key), options);\n      }\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  }\n\n  toJSON(options) {\n    if (get(options, 'flattenMaps', true)) {\n      const ret = {};\n      const keys = this.keys();\n      for (const key of keys) {\n        ret[key] = clone(this.get(key), options);\n      }\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  inspect() {\n    return new Map(this);\n  }\n\n  $__runDeferred() {\n    if (!this.$__deferred) {\n      return;\n    }\n\n    for (const keyValueObject of this.$__deferred) {\n      this.set(keyValueObject.key, keyValueObject.value);\n    }\n\n    this.$__deferred = null;\n  }\n}\n\nif (util.inspect.custom) {\n  Object.defineProperty(MongooseMap.prototype, util.inspect.custom, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: MongooseMap.prototype.inspect\n  });\n}\n\nObject.defineProperty(MongooseMap.prototype, '$__set', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__parent', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__path', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__schemaType', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$isMongooseMap', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__deferredCalls', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\n/*!\n * Since maps are stored as objects under the hood, keys must be strings\n * and can't contain any invalid characters\n */\n\nfunction checkValidKey(key) {\n  const keyType = typeof key;\n  if (keyType !== 'string') {\n    throw new TypeError(`Mongoose maps only support string keys, got ${keyType}`);\n  }\n  if (key.startsWith('$')) {\n    throw new Error(`Mongoose maps do not support keys that start with \"$\", got \"${key}\"`);\n  }\n  if (key.includes('.')) {\n    throw new Error(`Mongoose maps do not support keys that contain \".\", got \"${key}\"`);\n  }\n  if (specialProperties.has(key)) {\n    throw new Error(`Mongoose maps do not support reserved key name \"${key}\"`);\n  }\n}\n\nmodule.exports = MongooseMap;\n","\n\nconst utils = require('../../utils');\n\n/**\n * Using spread operator on a Mongoose document gives you a\n * POJO that has a tendency to cause infinite recursion. So\n * we use this function on `set()` to prevent that.\n */\n\nmodule.exports = function handleSpreadDoc(v) {\n  if (utils.isPOJO(v) && v.$__ != null && v._doc != null) {\n    return v._doc;\n  }\n\n  return v;\n};","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on an Document Array schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ users: [{ name: string }] });\n *     schema.path('users').options; // SchemaDocumentArrayOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaDocumentOptions\n */\n\nclass SchemaDocumentArrayOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If `true`, Mongoose will skip building any indexes defined in this array's schema.\n * If not set, Mongoose will build all indexes defined in this array's schema.\n *\n * ####Example:\n *\n *     const childSchema = Schema({ name: { type: String, index: true } });\n *     // If `excludeIndexes` is `true`, Mongoose will skip building an index\n *     // on `arr.name`. Otherwise, Mongoose will build an index on `arr.name`.\n *     const parentSchema = Schema({\n *       arr: { type: [childSchema], excludeIndexes: true }\n *     });\n *\n * @api public\n * @property excludeIndexes\n * @memberOf SchemaDocumentArrayOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaDocumentArrayOptions.prototype, 'excludeIndexes', opts);\n\n/**\n * If set, overwrites the child schema's `_id` option.\n *\n * ####Example:\n *\n *     const childSchema = Schema({ name: String });\n *     const parentSchema = Schema({\n *       child: { type: childSchema, _id: false }\n *     });\n *     parentSchema.path('child').schema.options._id; // false\n *\n * @api public\n * @property _id\n * @memberOf SchemaDocumentArrayOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaDocumentArrayOptions.prototype, '_id', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaDocumentArrayOptions;","\n\nconst Mixed = require('../../schema/mixed');\nconst defineKey = require('../document/compile').defineKey;\nconst get = require('../get');\nconst utils = require('../../utils');\n\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  if (applyPlugins) {\n    const applyPluginsToDiscriminators = get(model.base,\n      'options.applyPluginsToDiscriminators', false);\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\n    model.base._applyPlugins(schema, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    });\n  }\n\n  const key = model.schema.options.discriminatorKey;\n\n  const existingPath = model.schema.path(key);\n  if (existingPath != null) {\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\n      existingPath.options.select = true;\n    }\n    existingPath.options.$skipDiscriminatorCheck = true;\n  } else {\n    const baseSchemaAddition = {};\n    baseSchemaAddition[key] = {\n      default: void 0,\n      select: true,\n      $skipDiscriminatorCheck: true\n    };\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\n    model.schema.add(baseSchemaAddition);\n    defineKey({\n      prop: key,\n      prototype: model.prototype,\n      options: model.schema.options\n    });\n  }\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  let value = name;\n  if ((typeof tiedValue === 'string' && tiedValue.length) || tiedValue != null) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    // Retain original schema before merging base schema\n    schema._baseSchema = baseSchema;\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      schema.remove('_id');\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\n    const conflictingPaths = [];\n\n    for (const path of baseSchemaPaths) {\n      if (schema.nested[path]) {\n        conflictingPaths.push(path);\n        continue;\n      }\n\n      if (path.indexOf('.') === -1) {\n        continue;\n      }\n      const sp = path.split('.').slice(0, -1);\n      let cur = '';\n      for (const piece of sp) {\n        cur += (cur.length ? '.' : '') + piece;\n        if (schema.paths[cur] instanceof Mixed ||\n            schema.singleNestedPaths[cur] instanceof Mixed) {\n          conflictingPaths.push(path);\n        }\n      }\n    }\n\n    utils.merge(schema, baseSchema, {\n      isDiscriminatorSchemaMerge: true,\n      omit: { discriminators: true, base: true },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    });\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (const conflictingPath of conflictingPaths) {\n      delete schema.paths[conflictingPath];\n    }\n\n    // Rebuild schema models because schemas may have been merged re: #7884\n    schema.childSchemas.forEach(obj => {\n      obj.model.prototype.$__setSchema(obj.schema);\n    });\n\n    const obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function(newName) {\n        if (newName === value || (Array.isArray(value) && utils.deepEqual(newName, value))) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = existingPath ? existingPath.options[schema.options.typeKey] : String;\n    schema.add(obj);\n\n\n    schema.discriminatorMapping = { key: key, value: value, isRoot: false };\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    const toJSON = schema.options.toJSON;\n    const toObject = schema.options.toObject;\n    const _id = schema.options._id;\n    const id = schema.options.id;\n\n    const keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (const _key of keys) {\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\n        // for that case. See gh-9238\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\n          continue;\n        }\n\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n            ' (can only modify ' +\n            Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n            ')');\n        }\n      }\n    }\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = { key: key, value: null, isRoot: true };\n  }\n  if (!model.schema.discriminators) {\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n","\n\nconst documentSchemaSymbol = require('../../helpers/symbols').documentSchemaSymbol;\nconst get = require('../../helpers/get');\nconst internalToObjectOptions = require('../../options').internalToObjectOptions;\nconst utils = require('../../utils');\n\nlet Document;\nconst getSymbol = require('../../helpers/symbols').getSymbol;\nconst scopeSymbol = require('../../helpers/symbols').scopeSymbol;\n\n/*!\n * exports\n */\n\nexports.compile = compile;\nexports.defineKey = defineKey;\n\n/*!\n * Compiles schemas.\n */\n\nfunction compile(tree, proto, prefix, options) {\n  Document = Document || require('../../document');\n\n  for (const key of Object.keys(tree)) {\n    const limb = tree[key];\n\n    const hasSubprops = utils.isPOJO(limb) && Object.keys(limb).length &&\n      (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type));\n    const subprops = hasSubprops ? limb : null;\n\n    defineKey({ prop: key, subprops: subprops, prototype: proto, prefix: prefix, options: options });\n  }\n}\n\n/*!\n * Defines the accessor named prop on the incoming prototype.\n */\n\nfunction defineKey({ prop, subprops, prototype, prefix, options }) {\n  Document = Document || require('../../document');\n  const path = (prefix ? prefix + '.' : '') + prop;\n  prefix = prefix || '';\n\n  if (subprops) {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        const _this = this;\n        if (!this.$__.getters) {\n          this.$__.getters = {};\n        }\n\n        if (!this.$__.getters[path]) {\n          const nested = Object.create(Document.prototype, getOwnPropertyDescriptors(this));\n\n          // save scope for nested getters/setters\n          if (!prefix) {\n            nested.$__[scopeSymbol] = this;\n          }\n          nested.$__.nestedPath = path;\n\n          Object.defineProperty(nested, 'schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, '$__schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, documentSchemaSymbol, {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, 'toObject', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return utils.clone(_this.get(path, null, {\n                virtuals: get(this, 'schema.options.toObject.virtuals', null)\n              }));\n            }\n          });\n\n          Object.defineProperty(nested, '$__get', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path, null, {\n                virtuals: get(this, 'schema.options.toObject.virtuals', null)\n              });\n            }\n          });\n\n          Object.defineProperty(nested, 'toJSON', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path, null, {\n                virtuals: get(_this, 'schema.options.toJSON.virtuals', null)\n              });\n            }\n          });\n\n          Object.defineProperty(nested, '$__isNested', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: true\n          });\n\n          const _isEmptyOptions = Object.freeze({\n            minimize: true,\n            virtuals: false,\n            getters: false,\n            transform: false\n          });\n          Object.defineProperty(nested, '$isEmpty', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return Object.keys(this.get(path, null, _isEmptyOptions) || {}).length === 0;\n            }\n          });\n\n          Object.defineProperty(nested, '$__parent', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: this\n          });\n\n          compile(subprops, nested, path, options);\n          this.$__.getters[path] = nested;\n        }\n\n        return this.$__.getters[path];\n      },\n      set: function(v) {\n        if (v != null && v.$__isNested) {\n          // Convert top-level to POJO, but leave subdocs hydrated so `$set`\n          // can handle them. See gh-9293.\n          v = v.$__get();\n        } else if (v instanceof Document && !v.$__isNested) {\n          v = v.$toObject(internalToObjectOptions);\n        }\n        const doc = this.$__[scopeSymbol] || this;\n        doc.$set(path, v);\n      }\n    });\n  } else {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      },\n      set: function(v) {\n        this.$set.call(this.$__[scopeSymbol] || this, path, v);\n      }\n    });\n  }\n}\n\n// gets descriptors for all properties of `object`\n// makes all properties non-enumerable to match previous behavior to #2211\nfunction getOwnPropertyDescriptors(object) {\n  const result = {};\n\n  Object.getOwnPropertyNames(object).forEach(function(key) {\n    const skip = [\n      'isNew',\n      '$__',\n      '$errors',\n      'errors',\n      '_doc',\n      '$locals',\n      '$op',\n      '__parentArray',\n      '__index',\n      '$isDocumentArrayElement'\n    ].indexOf(key) === -1;\n    if (skip) {\n      return;\n    }\n\n    result[key] = Object.getOwnPropertyDescriptor(object, key);\n    result[key].enumerable = false;\n  });\n\n  return result;\n}\n","\n\nconst addAutoId = require('./addAutoId');\n\nmodule.exports = function handleIdOption(schema, options) {\n  if (options == null || options._id == null) {\n    return schema;\n  }\n\n  schema = schema.clone();\n  if (!options._id) {\n    schema.remove('_id');\n    schema.options._id = false;\n  } else if (!schema.paths['_id']) {\n    addAutoId(schema);\n    schema.options._id = true;\n  }\n\n  return schema;\n};","\n\nconst getDiscriminatorByValue = require('./getDiscriminatorByValue');\n\n/*!\n * Find the correct constructor, taking into account discriminators\n */\n\nmodule.exports = function getConstructor(Constructor, value) {\n  const discriminatorKey = Constructor.schema.options.discriminatorKey;\n  if (value != null &&\n      Constructor.discriminators &&\n      value[discriminatorKey] != null) {\n    if (Constructor.discriminators[value[discriminatorKey]]) {\n      Constructor = Constructor.discriminators[value[discriminatorKey]];\n    } else {\n      const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[discriminatorKey]);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  return Constructor;\n};","\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst EventEmitter = require('events').EventEmitter;\nconst ObjectExpectedError = require('../error/objectExpected');\nconst SchemaSubdocumentOptions = require('../options/SchemaSubdocumentOptions');\nconst SchemaType = require('../schematype');\nconst $exists = require('./operators/exists');\nconst castToNumber = require('./operators/helpers').castToNumber;\nconst discriminator = require('../helpers/model/discriminator');\nconst geospatial = require('./operators/geospatial');\nconst get = require('../helpers/get');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\nconst handleIdOption = require('../helpers/schema/handleIdOption');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\n\nlet Subdocument;\n\nmodule.exports = SubdocumentPath;\n\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SubdocumentPath(schema, path, options) {\n  schema = handleIdOption(schema, options);\n\n  this.caster = _createConstructor(schema);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n\n/*!\n * ignore\n */\n\nSubdocumentPath.prototype = Object.create(SchemaType.prototype);\nSubdocumentPath.prototype.constructor = SubdocumentPath;\nSubdocumentPath.prototype.OptionsConstructor = SchemaSubdocumentOptions;\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    const _this = this;\n\n    this.$__parent = parent;\n    Subdocument.apply(this, arguments);\n\n    this.$session(this.ownerDocument().$session());\n\n    if (parent) {\n      parent.$on('save', function() {\n        _this.emit('save', _this);\n        _this.constructor.emit('save', _this);\n      });\n\n      parent.$on('isNew', function(val) {\n        _this.isNew = val;\n        _this.emit('isNew', val);\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n\n  schema._preCompile();\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  _embedded.prototype = Object.create(proto);\n  _embedded.prototype.$__setSchema(schema);\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n  _embedded.prototype.toBSON = function() {\n    return this.toObject(internalToObjectOptions);\n  };\n\n  // apply methods\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\nSubdocumentPath.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return { $geometry: this.castForQuery(val.$geometry) };\n};\n\n/*!\n * ignore\n */\n\nSubdocumentPath.prototype.$conditionalHandlers.$near =\nSubdocumentPath.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\n\nSubdocumentPath.prototype.$conditionalHandlers.$within =\nSubdocumentPath.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\n\nSubdocumentPath.prototype.$conditionalHandlers.$geoIntersects =\n  geospatial.cast$geoIntersects;\n\nSubdocumentPath.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSubdocumentPath.prototype.$conditionalHandlers.$maxDistance = castToNumber;\n\nSubdocumentPath.prototype.$conditionalHandlers.$exists = $exists;\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSubdocumentPath.prototype.cast = function(val, doc, init, priorVal, options) {\n  if (val && val.$isSingleNested && val.parent === doc) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n\n  let subdoc;\n\n  // Only pull relevant selected paths and pull out the base path\n  const parentSelected = get(doc, '$__.selected', {});\n  const path = this.path;\n  const selected = Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj[key.substr(path.length + 1)] = parentSelected[key];\n    }\n    return obj;\n  }, {});\n  options = Object.assign({}, options, { priorDoc: priorVal });\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc);\n    subdoc.$init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc, undefined, options);\n    }\n\n    return new Constructor(val, selected, doc, undefined, options);\n  }\n\n  return subdoc;\n};\n\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\nSubdocumentPath.prototype.castForQuery = function($conditional, val, options) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  const overrideStrict = options != null && options.strict != null ?\n    options.strict :\n    void 0;\n\n  try {\n    val = new Constructor(val, overrideStrict);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error, this);\n    }\n    throw error;\n  }\n  return val;\n};\n\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\nSubdocumentPath.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (value && !(value instanceof Constructor)) {\n    value = new Constructor(value, null, scope);\n  }\n\n  if (options && options.skipSchemaValidators) {\n    return value.validate(fn);\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function(error) {\n    if (error) {\n      return fn(error);\n    }\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate(fn);\n  }, scope, options);\n};\n\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\nSubdocumentPath.prototype.doValidateSync = function(value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n  if (!value) {\n    return;\n  }\n  return value.validateSync();\n};\n\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {Object|string} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators /docs/discriminators.html\n * @api public\n */\n\nSubdocumentPath.prototype.discriminator = function(name, schema, options) {\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = get(options, 'clone', true);\n\n  if (schema.instanceOfSchema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this.caster, name, schema, value);\n\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n\n  return this.caster.discriminators[name];\n};\n\n/**\n * Sets a default option for all SubdocumentPath instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Embedded.set('required', true);\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSubdocumentPath.defaultOptions = {};\n\nSubdocumentPath.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSubdocumentPath.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.schema, this.path, options);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a single nested schematype.\n *\n * ####Example:\n *\n *     const schema = Schema({ child: Schema({ name: String }) });\n *     schema.path('child').options; // SchemaSubdocumentOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaSubdocumentOptions\n */\n\nclass SchemaSubdocumentOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If set, overwrites the child schema's `_id` option.\n *\n * ####Example:\n *\n *     const childSchema = Schema({ name: String });\n *     const parentSchema = Schema({\n *       child: { type: childSchema, _id: false }\n *     });\n *     parentSchema.path('child').schema.options._id; // false\n *\n * @api public\n * @property of\n * @memberOf SchemaSubdocumentOptions\n * @type Function|string\n * @instance\n */\n\nObject.defineProperty(SchemaSubdocumentOptions.prototype, '_id', opts);\n\nmodule.exports = SchemaSubdocumentOptions;","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseBuffer = require('../types/buffer');\nconst SchemaBufferOptions = require('../options/SchemaBufferOptions');\nconst SchemaType = require('../schematype');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst Binary = MongooseBuffer.Binary;\nconst CastError = SchemaType.CastError;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\nSchemaBuffer.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\nSchemaBuffer.prototype.OptionsConstructor = SchemaBufferOptions;\n\n/*!\n * ignore\n */\n\nSchemaBuffer._checkRequired = v => !!(v && v.length);\n\n/**\n * Sets a default option for all Buffer instances.\n *\n * ####Example:\n *\n *     // Make all buffers have `required` of true by default.\n *     mongoose.Schema.Buffer.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Buffer }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBuffer.set = SchemaType.set;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ buf: { type: Buffer, required: true } });\n *     new M({ buf: Buffer.from('') }).validateSync(); // validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBuffer.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  let ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (value && value.isMongooseBuffer) {\n      return value;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      if (!value || !value.isMongooseBuffer) {\n        value = new MongooseBuffer(value, [this.path, doc]);\n        if (this.options.subtype != null) {\n          value._subtype = this.options.subtype;\n        }\n      }\n      return value;\n    }\n\n    if (value instanceof Binary) {\n      ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n      if (typeof value.sub_type !== 'number') {\n        throw new CastError('Buffer', value, this.path, null, this);\n      }\n      ret._subtype = value.sub_type;\n      return ret;\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n    return value;\n  }\n\n  if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('Buffer', value, this.path, null, this);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n\n  const type = typeof value;\n  if (\n    type === 'string' || type === 'number' || Array.isArray(value) ||\n    (type === 'object' && value.type === 'Buffer' && Array.isArray(value.data)) // gh-6863\n  ) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n    return ret;\n  }\n\n  throw new CastError('Buffer', value, this.path, null, this);\n};\n\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     const s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     const M = db.model('M', s);\n *     const m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaBuffer.prototype.subtype = function(subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  const casted = this._castForQuery(val);\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a Buffer schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ bitmap: Buffer });\n *     schema.path('bitmap').options; // SchemaBufferOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaBufferOptions\n */\n\nclass SchemaBufferOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * Set the default subtype for this buffer.\n *\n * @api public\n * @property subtype\n * @memberOf SchemaBufferOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaBufferOptions.prototype, 'subtype', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaBufferOptions;","/*!\n * Module requirements.\n */\n\n\n\nconst MongooseError = require('../error/index');\nconst SchemaDateOptions = require('../options/SchemaDateOptions');\nconst SchemaType = require('../schematype');\nconst castDate = require('../cast/date');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Date SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDate(key, options) {\n  SchemaType.call(this, key, options, 'Date');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDate.schemaName = 'Date';\n\nSchemaDate.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDate.prototype = Object.create(SchemaType.prototype);\nSchemaDate.prototype.constructor = SchemaDate;\nSchemaDate.prototype.OptionsConstructor = SchemaDateOptions;\n\n/*!\n * ignore\n */\n\nSchemaDate._cast = castDate;\n\n/**\n * Sets a default option for all Date instances.\n *\n * ####Example:\n *\n *     // Make all dates have `required` of true by default.\n *     mongoose.Schema.Date.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: Date }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaDate.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to dates.\n *\n * ####Example:\n *\n *     // Mongoose converts empty string '' into `null` for date types. You\n *     // can create a custom caster to disable it.\n *     const original = mongoose.Schema.Types.Date.cast();\n *     mongoose.Schema.Types.Date.cast(v => {\n *       assert.ok(v !== '');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.Date.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaDate.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaDate._defaultCaster = v => {\n  if (v != null && !(v instanceof Date)) {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\n *\n * This sets the `expireAfterSeconds` index option available in MongoDB >= 2.1.2.\n * This index type is only compatible with Date types.\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\n *\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\n *\n *     // expire in 1.5 hours\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\n *\n *     // expire in 7 days\n *     const schema = new Schema({ createdAt: Date });\n *     schema.path('createdAt').expires('7d');\n *\n * @param {Number|String} when\n * @added 3.0.0\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaDate.prototype.expires = function(when) {\n  if (getConstructorName(this._index) !== 'Object') {\n    this._index = {};\n  }\n\n  this._index.expires = when;\n  utils.expires(this._index);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchemaDate._checkRequired = v => v instanceof Date;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaDate.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy\n * a required validator, the given value must be an instance of `Date`.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDate.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaDate.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum date validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\n *     const M = db.model('M', s)\n *     const m = new M({ d: Date('1969-12-31') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2014-12-08');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ d: { type: Date, min: min })\n *     const M = mongoose.model('M', schema);\n *     const s= new M({ d: Date('1969-12-31') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\n *     })\n *\n * @param {Date} value minimum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value) {\n    let msg = message || MongooseError.messages.Date.min;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MIN}/, (value === Date.now ? 'Date.now()' : value.toString()));\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.minValidator = function(val) {\n        let _value = value;\n        if (typeof value === 'function' && value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const min = (_value === Date.now ? _value() : _this.cast(_value));\n        return val === null || val.valueOf() >= min.valueOf();\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum date validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\n *     const M = db.model('M', s)\n *     const m = new M({ d: Date('2014-12-08') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2013-12-31');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ d: { type: Date, max: max })\n *     const M = mongoose.model('M', schema);\n *     const s= new M({ d: Date('2014-12-08') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\n *     })\n *\n * @param {Date} maximum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value) {\n    let msg = message || MongooseError.messages.Date.max;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MAX}/, (value === Date.now ? 'Date.now()' : value.toString()));\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.maxValidator = function(val) {\n        let _value = value;\n        if (typeof _value === 'function' && _value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const max = (_value === Date.now ? _value() : _this.cast(_value));\n        return val === null || val.valueOf() <= max.valueOf();\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to date\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDate.prototype.cast = function(value) {\n  let castDate;\n  if (typeof this._castFunction === 'function') {\n    castDate = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDate = this.constructor.cast();\n  } else {\n    castDate = SchemaDate.cast();\n  }\n\n  try {\n    return castDate(value);\n  } catch (error) {\n    throw new CastError('date', value, this.path, error, this);\n  }\n};\n\n/*!\n * Date Query casting.\n *\n * @api private\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaDate.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaDate.prototype.castForQuery = function($conditional, val) {\n  if (arguments.length !== 2) {\n    return this._castForQuery($conditional);\n  }\n\n  const handler = this.$conditionalHandlers[$conditional];\n\n  if (!handler) {\n    throw new Error('Can\\'t use ' + $conditional + ' with Date.');\n  }\n\n  return handler.call(this, val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDate;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a Date schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ startedAt: Date });\n *     schema.path('startedAt').options; // SchemaDateOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaDateOptions\n */\n\nclass SchemaDateOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If set, Mongoose adds a validator that checks that this path is after the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaDateOptions\n * @type Date\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'min', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is before the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaDateOptions\n * @type Date\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'max', opts);\n\n/**\n * If set, Mongoose creates a TTL index on this path.\n *\n * @api public\n * @property expires\n * @memberOf SchemaDateOptions\n * @type Date\n * @instance\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'expires', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaDateOptions;","\n\nconst assert = require('assert');\n\nmodule.exports = function castDate(value) {\n  // Support empty string because of empty form values. Originally introduced\n  // in https://github.com/Automattic/mongoose/commit/efc72a1898fc3c33a319d915b8c5463a22938dfe\n  if (value == null || value === '') {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    assert.ok(!isNaN(value.valueOf()));\n\n    return value;\n  }\n\n  let date;\n\n  assert.ok(typeof value !== 'boolean');\n\n  if (value instanceof Number || typeof value === 'number') {\n    date = new Date(value);\n  } else if (typeof value === 'string' && !isNaN(Number(value)) && (Number(value) >= 275761 || Number(value) < -271820)) {\n    // string representation of milliseconds take this path\n    date = new Date(Number(value));\n  } else if (typeof value.valueOf === 'function') {\n    // support for moment.js. This is also the path strings will take because\n    // strings have a `valueOf()`\n    date = new Date(value.valueOf());\n  } else {\n    // fallback\n    date = new Date(value);\n  }\n\n  if (!isNaN(date.valueOf())) {\n    return date;\n  }\n\n  assert.ok(false);\n};","/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\nconst SchemaType = require('../schematype');\nconst castObjectId = require('../cast/objectid');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst oid = require('../types/objectid');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    utils.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n  }\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nObjectId.schemaName = 'ObjectId';\n\nObjectId.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n\n/**\n * Attaches a getter for all ObjectId instances\n *\n * ####Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n\n/**\n * Sets a default option for all ObjectId instances.\n *\n * ####Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nObjectId.set = SchemaType.set;\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nObjectId._checkRequired = v => v instanceof oid;\n\n/*!\n * ignore\n */\n\nObjectId._cast = castObjectId;\n\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * ####Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nObjectId._defaultCaster = v => {\n  if (!(v instanceof oid)) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n  return v;\n};\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nObjectId.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nObjectId.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value instanceof oid) {\n      return value;\n    } else if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  let castObjectId;\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = ObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid;\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ObjectId;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on an ObjectId schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ testId: mongoose.ObjectId });\n *     schema.path('testId').options; // SchemaObjectIdOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaObjectIdOptions\n */\n\nclass SchemaObjectIdOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If truthy, uses Mongoose's default built-in ObjectId path.\n *\n * @api public\n * @property auto\n * @memberOf SchemaObjectIdOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'auto', opts);\n\n/**\n * Sets default [populate options](/docs/populate.html#query-conditions).\n *\n * ####Example:\n *     const schema = new Schema({\n *       child: {\n *         type: 'ObjectId',\n *         ref: 'Child',\n *         populate: { select: 'name' }\n *       }\n *     });\n *     const Parent = mongoose.model('Parent', schema);\n *\n *     // Automatically adds `.select('name')`\n *     Parent.findOne().populate('child');\n *\n * @api public\n * @property populate\n * @memberOf SchemaObjectIdOptions\n * @type Object\n * @instance\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'populate', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaObjectIdOptions;","/*!\n * Module dependencies.\n */\n\n\n\nconst SchemaType = require('../schematype');\nconst CastError = SchemaType.CastError;\nconst Decimal128Type = require('../types/decimal128');\nconst castDecimal128 = require('../cast/decimal128');\nconst utils = require('../utils');\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Decimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDecimal128.schemaName = 'Decimal128';\n\nDecimal128.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nDecimal128.prototype = Object.create(SchemaType.prototype);\nDecimal128.prototype.constructor = Decimal128;\n\n/*!\n * ignore\n */\n\nDecimal128._cast = castDecimal128;\n\n/**\n * Sets a default option for all Decimal128 instances.\n *\n * ####Example:\n *\n *     // Make all decimal 128s have `required` of true by default.\n *     mongoose.Schema.Decimal128.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nDecimal128.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * ####Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nDecimal128._defaultCaster = v => {\n  if (v != null && !(v instanceof Decimal128Type)) {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nDecimal128._checkRequired = v => v instanceof Decimal128Type;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    Decimal128.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nDecimal128.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (value instanceof Decimal128Type) {\n      return value;\n    }\n\n    return this._castRef(value, doc, init);\n  }\n\n  let castDecimal128;\n  if (typeof this._castFunction === 'function') {\n    castDecimal128 = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDecimal128 = this.constructor.cast();\n  } else {\n    castDecimal128 = Decimal128.cast();\n  }\n\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nDecimal128.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Decimal128;\n","\n\nconst Decimal128Type = require('../types/decimal128');\nconst assert = require('assert');\n\nmodule.exports = function castDecimal128(value) {\n  if (value == null) {\n    return value;\n  }\n\n  if (typeof value === 'object' && typeof value.$numberDecimal === 'string') {\n    return Decimal128Type.fromString(value.$numberDecimal);\n  }\n\n  if (value instanceof Decimal128Type) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    return Decimal128Type.fromString(value);\n  }\n\n  if (Buffer.isBuffer(value)) {\n    return new Decimal128Type(value);\n  }\n\n  if (typeof value === 'number') {\n    return Decimal128Type.fromString(String(value));\n  }\n\n  if (typeof value.valueOf === 'function' && typeof value.valueOf() === 'string') {\n    return Decimal128Type.fromString(value.valueOf());\n  }\n\n  assert.ok(false);\n};","\n\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    const path = this.path;\n\n    if (init) {\n      const map = new MongooseMap({}, path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          let _val = val.get(key);\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          let _val = val[key];\n          if (_val == null) {\n            _val = map.$__schemaType._castNullish(_val);\n          } else {\n            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key });\n          }\n          map.$init(key, _val);\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n    return schematype;\n  }\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\n\nMap.defaultOptions = {};\n\nmodule.exports = Map;\n","\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a Map schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\n *     schema.path('socialMediaHandles').options; // SchemaMapOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaMapOptions\n */\n\nclass SchemaMapOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If set, specifies the type of this map's values. Mongoose will cast\n * this map's values to the given type.\n *\n * If not set, Mongoose will not cast the map's values.\n *\n * ####Example:\n *\n *     // Mongoose will cast `socialMediaHandles` values to strings\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\n *     schema.path('socialMediaHandles').options.of; // String\n *\n * @api public\n * @property of\n * @memberOf SchemaMapOptions\n * @type Function|string\n * @instance\n */\n\nObject.defineProperty(SchemaMapOptions.prototype, 'of', opts);\n\nmodule.exports = SchemaMapOptions;","\n\n/*!\n * Module dependencies.\n */\n\nconst Binary = require('../driver').get().Binary;\nconst Decimal128 = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst isMongooseObject = require('./isMongooseObject');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n  if (update && isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({ transform: false, virtuals: false }) || {});\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val;\n\n    // Avoid going into mixed paths if schema is specified\n    const keySchema = schema && schema.path && schema.path(path + key);\n    const isNested = schema && schema.nested && schema.nested[path + key];\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      const flat = flatten(val, path + key, options, schema);\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n\n    if (isNested) {\n      const paths = Object.keys(schema.paths);\n      for (const p of paths) {\n        if (p.startsWith(path + key + '.') && !result.hasOwnProperty(p)) {\n          result[p] = void 0;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n\n    const _path = path + key;\n    result[_path] = true;\n    if (_path.indexOf('.') !== -1) {\n      const sp = _path.split('.');\n      let cur = sp[0];\n      for (let i = 1; i < sp.length; ++i) {\n        result[cur] = true;\n        cur += '.' + sp[i];\n      }\n    }\n    if (isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({ transform: false, virtuals: false });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val &&\n    typeof val === 'object' &&\n    !(val instanceof Date) &&\n    !(val instanceof ObjectId) &&\n    (!Array.isArray(val) || val.length > 0) &&\n    !(val instanceof Buffer) &&\n    !(val instanceof Decimal128) &&\n    !(val instanceof Binary);\n}\n","\n\nconst MongooseError = require('../../error/mongooseError');\nconst setDottedPath = require('../path/setDottedPath');\nconst util = require('util');\n\n/**\n * Given an object that may contain dotted paths, flatten the paths out.\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\n */\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  }\n  // Avoid Mongoose docs\n  if (obj.$__) {\n    return;\n  }\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const val = obj[key];\n    if (key.indexOf('.') !== -1) {\n      try {\n        delete obj[key];\n        setDottedPath(obj, key, val);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n        throw new MongooseError(`Conflicting dotted paths when setting document path, key: \"${key}\", value: ${util.inspect(val)}`);\n      }\n      continue;\n    }\n\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};","\n\nmodule.exports = function setDottedPath(obj, path, val) {\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let cur = obj;\n  for (const part of parts.slice(0, -1)) {\n    if (cur[part] == null) {\n      cur[part] = {};\n    }\n\n    cur = cur[part];\n  }\n\n  const last = parts[parts.length - 1];\n  cur[last] = val;\n};","\n\nconst get = require('../get');\nconst getSchemaDiscriminatorByValue = require('../discriminator/getSchemaDiscriminatorByValue');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n    type = schema.pathType(subpath);\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) &&\n    schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schemaType, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schemaType;\n};\n","\n\nconst get = require('../get');\n\nmodule.exports = function getKeysInSchemaOrder(schema, val, path) {\n  const schemaKeys = path != null ? Object.keys(get(schema.tree, path, {})) : Object.keys(schema.tree);\n  const valKeys = new Set(Object.keys(val));\n\n  let keys;\n  if (valKeys.size > 1) {\n    keys = new Set();\n    for (const key of schemaKeys) {\n      if (valKeys.has(key)) {\n        keys.add(key);\n      }\n    }\n    for (const key of valKeys) {\n      if (!keys.has(key)) {\n        keys.add(key);\n      }\n    }\n    keys = Array.from(keys);\n  } else {\n    keys = Array.from(valKeys);\n  }\n\n  return keys;\n};","\n\n/*!\n * ignore\n */\n\nmodule.exports = function isDefiningProjection(val) {\n  if (val == null) {\n    // `undefined` or `null` become exclusive projections\n    return true;\n  }\n  if (typeof val === 'object') {\n    // Only cases where a value does **not** define whether the whole projection\n    // is inclusive or exclusive are `$meta` and `$slice`.\n    return !('$meta' in val) && !('$slice' in val);\n  }\n  return true;\n};\n","\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function isExclusive(projection) {\n  if (projection == null) {\n    return null;\n  }\n\n  const keys = Object.keys(projection);\n  let ki = keys.length;\n  let exclude = null;\n\n  if (ki === 1 && keys[0] === '_id') {\n    exclude = !projection._id;\n  } else {\n    while (ki--) {\n      // Does this projection explicitly define inclusion/exclusion?\n      // Explicitly avoid `$meta` and `$slice`\n      if (keys[ki] !== '_id' && isDefiningProjection(projection[keys[ki]])) {\n        exclude = !projection[keys[ki]];\n        break;\n      }\n    }\n  }\n\n  return exclude;\n};\n","\n\n/*!\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * ####Example:\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n */\n\nmodule.exports = function markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n    const path = item.path;\n    const pieces = path.split('.');\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n      if (val == null) {\n        continue;\n      }\n\n      if (val.isMongooseDocumentArray) {\n        for (let j = 0; j < val.length; ++j) {\n          val[j].populated(rest, item._docs[id] == null ? void 0 : item._docs[id][j], item);\n        }\n        break;\n      }\n    }\n  }\n};","\n\n/*!\n * Module dependencies\n */\n\nconst checkEmbeddedDiscriminatorKeyProjection =\n  require('./helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection');\nconst get = require('./helpers/get');\nconst getDiscriminatorByValue =\n  require('./helpers/discriminator/getDiscriminatorByValue');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst clone = require('./helpers/clone');\n\n/*!\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptions = function preparePopulationOptions(query, options) {\n  const _populate = query.options.populate;\n  const pop = Object.keys(_populate).reduce((vals, key) => vals.concat([_populate[key]]), []);\n\n  // lean options should trickle through all queries\n  if (options.lean != null) {\n    pop.\n      filter(p => get(p, 'options.lean') == null).\n      forEach(makeLean(options.lean));\n  }\n\n  pop.forEach(opts => {\n    opts._localModel = query.model;\n  });\n\n  return pop;\n};\n\n/*!\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {\n  const _populate = query._mongooseOptions.populate;\n  const pop = Object.keys(_populate).reduce((vals, key) => vals.concat([_populate[key]]), []);\n\n  // lean options should trickle through all queries\n  if (options.lean != null) {\n    pop.\n      filter(p => get(p, 'options.lean') == null).\n      forEach(makeLean(options.lean));\n  }\n\n  const session = get(query, 'options.session', null);\n  if (session != null) {\n    pop.forEach(path => {\n      if (path.options == null) {\n        path.options = { session: session };\n        return;\n      }\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  const projection = query._fieldsForExec();\n  pop.forEach(p => {\n    p._queryProjection = projection;\n  });\n  pop.forEach(opts => {\n    opts._localModel = query.model;\n  });\n\n  return pop;\n};\n\n/*!\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Document}\n */\nexports.createModel = function createModel(model, doc, fields, userProvidedFields, options) {\n  model.hooks.execPreSync('createModel', doc);\n  const discriminatorMapping = model.schema ?\n    model.schema.discriminatorMapping :\n    null;\n\n  const key = discriminatorMapping && discriminatorMapping.isRoot ?\n    discriminatorMapping.key :\n    null;\n\n  const value = doc[key];\n  if (key && value && model.discriminators) {\n    const discriminator = model.discriminators[value] || getDiscriminatorByValue(model.discriminators, value);\n    if (discriminator) {\n      const _fields = clone(userProvidedFields);\n      exports.applyPaths(_fields, discriminator.schema);\n      return new discriminator(undefined, _fields, true);\n    }\n  }\n\n  const _opts = {\n    skipId: true,\n    isNew: false,\n    willInit: true\n  };\n  if (options != null && 'defaults' in options) {\n    _opts.defaults = options.defaults;\n  }\n  return new model(undefined, fields, _opts);\n};\n\n/*!\n * ignore\n */\n\nexports.applyPaths = function applyPaths(fields, schema) {\n  // determine if query is selecting or excluding fields\n  let exclude;\n  let keys;\n  let keyIndex;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    keyIndex = keys.length;\n\n    while (keyIndex--) {\n      if (keys[keyIndex][0] === '+') {\n        continue;\n      }\n      const field = fields[keys[keyIndex]];\n      // Skip `$meta` and `$slice`\n      if (!isDefiningProjection(field)) {\n        continue;\n      }\n      exclude = !field;\n      break;\n    }\n  }\n\n  // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n\n  const selected = [];\n  const excluded = [];\n  const stack = [];\n\n  analyzeSchema(schema);\n\n  switch (exclude) {\n    case true:\n      for (const fieldName of excluded) {\n        fields[fieldName] = 0;\n      }\n      break;\n    case false:\n      if (schema &&\n          schema.paths['_id'] &&\n          schema.paths['_id'].options &&\n          schema.paths['_id'].options.select === false) {\n        fields._id = 0;\n      }\n\n      for (const fieldName of selected) {\n        fields[fieldName] = fields[fieldName] || 1;\n      }\n      break;\n    case undefined:\n      if (fields == null) {\n        break;\n      }\n      // Any leftover plus paths must in the schema, so delete them (gh-7017)\n      for (const key of Object.keys(fields || {})) {\n        if (key.startsWith('+')) {\n          delete fields[key];\n        }\n      }\n\n      // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields and delete any plus paths\n      for (const fieldName of excluded) {\n        fields[fieldName] = 0;\n      }\n      break;\n  }\n\n  function analyzeSchema(schema, prefix) {\n    prefix || (prefix = '');\n\n    // avoid recursion\n    if (stack.indexOf(schema) !== -1) {\n      return [];\n    }\n    stack.push(schema);\n\n    const addedPaths = [];\n    schema.eachPath(function(path, type) {\n      if (prefix) path = prefix + '.' + path;\n\n      let addedPath = analyzePath(path, type);\n      // arrays\n      if (addedPath == null && type.$isMongooseArray && !type.$isMongooseDocumentArray) {\n        addedPath = analyzePath(path, type.caster);\n      }\n      if (addedPath != null) {\n        addedPaths.push(addedPath);\n      }\n\n      // nested schemas\n      if (type.schema) {\n        const _addedPaths = analyzeSchema(type.schema, path);\n\n        // Special case: if discriminator key is the only field that would\n        // be projected in, remove it.\n        if (exclude === false) {\n          checkEmbeddedDiscriminatorKeyProjection(fields, path, type.schema,\n            selected, _addedPaths);\n        }\n      }\n    });\n\n    stack.pop();\n    return addedPaths;\n  }\n\n  function analyzePath(path, type) {\n    const plusPath = '+' + path;\n    const hasPlusPath = fields && plusPath in fields;\n    if (hasPlusPath) {\n      // forced inclusion\n      delete fields[plusPath];\n    }\n\n    if (typeof type.selected !== 'boolean') return;\n\n    if (hasPlusPath) {\n      // forced inclusion\n      delete fields[plusPath];\n\n      // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return;\n    }\n\n    // check for parent exclusions\n    const pieces = path.split('.');\n    let cur = '';\n    for (let i = 0; i < pieces.length; ++i) {\n      cur += cur.length ? '.' + pieces[i] : pieces[i];\n      if (excluded.indexOf(cur) !== -1) {\n        return;\n      }\n    }\n\n    // Special case: if user has included a parent path of a discriminator key,\n    // don't explicitly project in the discriminator key because that will\n    // project out everything else under the parent path\n    if (!exclude && get(type, 'options.$skipDiscriminatorCheck', false)) {\n      let cur = '';\n      for (let i = 0; i < pieces.length; ++i) {\n        cur += (cur.length === 0 ? '' : '.') + pieces[i];\n        const projection = get(fields, cur, false) || get(fields, cur + '.$', false);\n        if (projection && typeof projection !== 'object') {\n          return;\n        }\n      }\n    }\n\n    (type.selected ? selected : excluded).push(path);\n    return path;\n  }\n};\n\n/*!\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\nfunction makeLean(val) {\n  return function(option) {\n    option.options || (option.options = {});\n\n    if (val != null && Array.isArray(val.virtuals)) {\n      val = Object.assign({}, val);\n      val.virtuals = val.virtuals.\n        filter(path => typeof path === 'string' && path.startsWith(option.path + '.')).\n        map(path => path.slice(option.path.length + 1));\n    }\n\n    option.options.lean = val;\n  };\n}\n\n/*!\n * Handle the `WriteOpResult` from the server\n */\n\nexports.handleDeleteWriteOpResult = function handleDeleteWriteOpResult(callback) {\n  return function _handleDeleteWriteOpResult(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    const mongooseResult = Object.assign({}, res.result);\n    if (get(res, 'result.n', null) != null) {\n      mongooseResult.deletedCount = res.result.n;\n    }\n    if (res.deletedCount != null) {\n      mongooseResult.deletedCount = res.deletedCount;\n    }\n    return callback(null, mongooseResult);\n  };\n};\n","\n\nmodule.exports = function checkEmbeddedDiscriminatorKeyProjection(userProjection, path, schema, selected, addedPaths) {\n  const userProjectedInPath = Object.keys(userProjection).\n    reduce((cur, key) => cur || key.startsWith(path + '.'), false);\n  const _discriminatorKey = path + '.' + schema.options.discriminatorKey;\n  if (!userProjectedInPath &&\n      addedPaths.length === 1 &&\n      addedPaths[0] === _discriminatorKey) {\n    selected.splice(selected.indexOf(_discriminatorKey), 1);\n  }\n};","\nfunction isPromise(val) {\n  return !!val && (typeof val === 'object' || typeof val === 'function') && typeof val.then === 'function';\n}\n\nmodule.exports = isPromise;","\n\nmodule.exports = function parentPaths(path) {\n  const pieces = path.split('.');\n  let cur = '';\n  const ret = [];\n  for (let i = 0; i < pieces.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + pieces[i];\n    ret.push(cur);\n  }\n\n  return ret;\n};","/*!\n * ignore\n */\n\n\n\nmodule.exports = require('mongodb').Decimal128;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst mongodb = require('mongodb');\nconst ReadPref = mongodb.ReadPreference;\n\n/*!\n * Converts arguments to ReadPrefs the driver\n * can understand.\n *\n * @param {String|Array} pref\n * @param {Array} [tags]\n */\n\nmodule.exports = function readPref(pref, tags) {\n  if (Array.isArray(pref)) {\n    tags = pref[1];\n    pref = pref[0];\n  }\n\n  if (pref instanceof ReadPref) {\n    return pref;\n  }\n\n  switch (pref) {\n    case 'p':\n      pref = 'primary';\n      break;\n    case 'pp':\n      pref = 'primaryPreferred';\n      break;\n    case 's':\n      pref = 'secondary';\n      break;\n    case 'sp':\n      pref = 'secondaryPreferred';\n      break;\n    case 'n':\n      pref = 'nearest';\n      break;\n  }\n\n  return new ReadPref(pref, tags);\n};\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseConnection = require('../../connection');\nconst STATES = require('../../connectionstate');\nconst immediate = require('../../helpers/immediate');\nconst setTimeout = require('../../helpers/timers').setTimeout;\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) connection implementation.\n *\n * @inherits Connection\n * @api private\n */\n\nfunction NativeConnection() {\n  MongooseConnection.apply(this, arguments);\n  this._listening = false;\n}\n\n/**\n * Expose the possible connection states.\n * @api public\n */\n\nNativeConnection.STATES = STATES;\n\n/*!\n * Inherits from Connection.\n */\n\nNativeConnection.prototype.__proto__ = MongooseConnection.prototype;\n\n/**\n * Switches to a different database using the same connection pool.\n *\n * Returns a new connection object, with the new db. If you set the `useCache`\n * option, `useDb()` will cache connections by `name`.\n *\n * **Note:** Calling `close()` on a `useDb()` connection will close the base connection as well.\n *\n * @param {String} name The database name\n * @param {Object} [options]\n * @param {Boolean} [options.useCache=false] If true, cache results so calling `useDb()` multiple times with the same name only creates 1 connection object.\n * @param {Boolean} [options.noListener=false] If true, the new connection object won't listen to any events on the base connection. This is better for memory usage in cases where you're calling `useDb()` for every request.\n * @return {Connection} New Connection Object\n * @api public\n */\n\nNativeConnection.prototype.useDb = function(name, options) {\n  // Return immediately if cached\n  options = options || {};\n  if (options.useCache && this.relatedDbs[name]) {\n    return this.relatedDbs[name];\n  }\n\n  // we have to manually copy all of the attributes...\n  const newConn = new this.constructor();\n  newConn.name = name;\n  newConn.base = this.base;\n  newConn.collections = {};\n  newConn.models = {};\n  newConn.replica = this.replica;\n  newConn.config = Object.assign({}, this.config, newConn.config);\n  newConn.name = this.name;\n  newConn.options = this.options;\n  newConn._readyState = this._readyState;\n  newConn._closeCalled = this._closeCalled;\n  newConn._hasOpened = this._hasOpened;\n  newConn._listening = false;\n  newConn._parent = this;\n\n  newConn.host = this.host;\n  newConn.port = this.port;\n  newConn.user = this.user;\n  newConn.pass = this.pass;\n\n  // First, when we create another db object, we are not guaranteed to have a\n  // db object to work with. So, in the case where we have a db object and it\n  // is connected, we can just proceed with setting everything up. However, if\n  // we do not have a db or the state is not connected, then we need to wait on\n  // the 'open' event of the connection before doing the rest of the setup\n  // the 'connected' event is the first time we'll have access to the db object\n\n  const _this = this;\n\n  newConn.client = _this.client;\n\n  if (this.db && this._readyState === STATES.connected) {\n    wireup();\n  } else {\n    this.once('connected', wireup);\n  }\n\n  function wireup() {\n    newConn.client = _this.client;\n    const _opts = {};\n    if (options.hasOwnProperty('noListener')) {\n      _opts.noListener = options.noListener;\n    }\n    newConn.db = _this.client.db(name, _opts);\n    newConn.onOpen();\n  }\n\n  newConn.name = name;\n\n  // push onto the otherDbs stack, this is used when state changes\n  if (options.noListener !== true) {\n    this.otherDbs.push(newConn);\n  }\n  newConn.otherDbs.push(this);\n\n  // push onto the relatedDbs cache, this is used when state changes\n  if (options && options.useCache) {\n    this.relatedDbs[newConn.name] = newConn;\n    newConn.relatedDbs = this.relatedDbs;\n  }\n\n  return newConn;\n};\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force]\n * @param {Function} [fn]\n * @return {Connection} this\n * @api private\n */\n\nNativeConnection.prototype.doClose = function(force, fn) {\n  if (this.client == null) {\n    immediate(() => fn());\n    return this;\n  }\n\n  this.client.close(force, (err, res) => {\n    // Defer because the driver will wait at least 1ms before finishing closing\n    // the pool, see https://github.com/mongodb-js/mongodb-core/blob/a8f8e4ce41936babc3b9112bf42d609779f03b39/lib/connection/pool.js#L1026-L1030.\n    // If there's queued operations, you may still get some background work\n    // after the callback is called.\n    setTimeout(() => fn(err, res), 1);\n  });\n  return this;\n};\n\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeConnection;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst ChangeStream = require('./cursor/ChangeStream');\nconst EventEmitter = require('events').EventEmitter;\nconst Schema = require('./schema');\nconst Collection = require('./driver').get().Collection;\nconst STATES = require('./connectionstate');\nconst MongooseError = require('./error/index');\nconst PromiseProvider = require('./promise_provider');\nconst ServerSelectionError = require('./error/serverSelection');\nconst applyPlugins = require('./helpers/schema/applyPlugins');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst get = require('./helpers/get');\nconst immediate = require('./helpers/immediate');\nconst mongodb = require('mongodb');\nconst pkg = require('../package.json');\nconst utils = require('./utils');\nconst processConnectionOptions = require('./helpers/processConnectionOptions');\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst sessionNewDocuments = require('./helpers/symbols').sessionNewDocuments;\n\n/*!\n * A list of authentication mechanisms that don't require a password for authentication.\n * This is used by the authMechanismDoesNotRequirePassword method.\n *\n * @api private\n */\nconst noPasswordAuthMechanisms = [\n  'MONGODB-X509'\n];\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `connecting`: Emitted when `connection.openUri()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connection's models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connection's models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successful connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted after the driver has connected to primary and all secondaries if specified in the connection string.\n * @api public\n */\n\nfunction Connection(base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {};\n  this.replica = false;\n  this.options = null;\n  this.otherDbs = []; // FIXME: To be replaced with relatedDbs\n  this.relatedDbs = {}; // Hashmap of other dbs that share underlying connection\n  this.states = STATES;\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n  this.plugins = [];\n  if (typeof base === 'undefined' || !base.connections.length) {\n    this.id = 0;\n  } else {\n    this.id = base.connections.length;\n  }\n  this._queue = [];\n}\n\n/*!\n * Inherit from EventEmitter\n */\n\nConnection.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * ####Example\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n  get: function() {\n    return this._readyState;\n  },\n  set: function(val) {\n    if (!(val in STATES)) {\n      throw new Error('Invalid connection state: ' + val);\n    }\n\n    if (this._readyState !== val) {\n      this._readyState = val;\n      // [legacy] loop over the otherDbs on this connection and change their state\n      for (const db of this.otherDbs) {\n        db.readyState = val;\n      }\n\n      if (STATES.connected === val) {\n        this._hasOpened = true;\n      }\n\n      this.emit(STATES[val]);\n    }\n  }\n});\n\n/**\n * Gets the value of the option `key`. Equivalent to `conn.options[key]`\n *\n * ####Example:\n *\n *     conn.get('test'); // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nConnection.prototype.get = function(key) {\n  if (this.config.hasOwnProperty(key)) {\n    return this.config[key];\n  }\n\n  return get(this.options, key);\n};\n\n/**\n * Sets the value of the option `key`. Equivalent to `conn.options[key] = val`\n *\n * Supported options include:\n *\n * - `maxTimeMS`: Set [`maxTimeMS`](/docs/api.html#query_Query-maxTimeMS) for all queries on this connection.\n *\n * ####Example:\n *\n *     conn.set('test', 'foo');\n *     conn.get('test'); // 'foo'\n *     conn.options.test; // 'foo'\n *\n * @param {String} key\n * @param {Any} val\n * @method set\n * @api public\n */\n\nConnection.prototype.set = function(key, val) {\n  if (this.config.hasOwnProperty(key)) {\n    this.config[key] = val;\n    return val;\n  }\n\n  this.options = this.options || {};\n  this.options[key] = val;\n  return val;\n};\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.collections;\n\n/**\n * The name of the database this connection points to.\n *\n * ####Example\n *\n *     mongoose.createConnection('mongodb://localhost:27017/mydb').name; // \"mydb\"\n *\n * @property name\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.name;\n\n/**\n * A [POJO](https://masteringjs.io/tutorials/fundamentals/pojo) containing\n * a map from model names to models. Contains all models that have been\n * added to this connection using [`Connection#model()`](/docs/api/connection.html#connection_Connection-model).\n *\n * ####Example\n *\n *     const conn = mongoose.createConnection();\n *     const Test = conn.model('Test', mongoose.Schema({ name: String }));\n *\n *     Object.keys(conn.models).length; // 1\n *     conn.models.Test === Test; // true\n *\n * @property models\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.models;\n\n/**\n * A number identifier for this connection. Used for debugging when\n * you have [multiple connections](/docs/connections.html#multiple_connections).\n *\n * ####Example\n *\n *     // The default connection has `id = 0`\n *     mongoose.connection.id; // 0\n *\n *     // If you create a new connection, Mongoose increments id\n *     const conn = mongoose.createConnection();\n *     conn.id; // 1\n *\n * @property id\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.id;\n\n/**\n * The plugins that will be applied to all models created on this connection.\n *\n * ####Example:\n *\n *     const db = mongoose.createConnection('mongodb://localhost:27017/mydb');\n *     db.plugin(() => console.log('Applied'));\n *     db.plugins.length; // 1\n *\n *     db.model('Test', new Schema({})); // Prints \"Applied\"\n *\n * @property plugins\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'plugins', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The host name portion of the URI. If multiple hosts, such as a replica set,\n * this will contain the first host name in the URI\n *\n * ####Example\n *\n *     mongoose.createConnection('mongodb://localhost:27017/mydb').host; // \"localhost\"\n *\n * @property host\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'host', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The port portion of the URI. If multiple hosts, such as a replica set,\n * this will contain the port from the first host name in the URI.\n *\n * ####Example\n *\n *     mongoose.createConnection('mongodb://localhost:27017/mydb').port; // 27017\n *\n * @property port\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'port', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The username specified in the URI\n *\n * ####Example\n *\n *     mongoose.createConnection('mongodb://val:psw@localhost:27017/mydb').user; // \"val\"\n *\n * @property user\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'user', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The password specified in the URI\n *\n * ####Example\n *\n *     mongoose.createConnection('mongodb://val:psw@localhost:27017/mydb').pass; // \"psw\"\n *\n * @property pass\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'pass', {\n  configurable: true,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.db;\n\n/**\n * The MongoClient instance this connection uses to talk to MongoDB. Mongoose automatically sets this property\n * when the connection is opened.\n *\n * @property client\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.client;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property config\n * @memberOf Connection\n * @instance\n * @api public\n */\n\nConnection.prototype.config;\n\n/**\n * Helper for `createCollection()`. Will explicitly create the given collection\n * with specified options. Used to create [capped collections](https://docs.mongodb.com/manual/core/capped-collections/)\n * and [views](https://docs.mongodb.com/manual/core/views/) from mongoose.\n *\n * Options are passed down without modification to the [MongoDB driver's `createCollection()` function](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection)\n *\n * @method createCollection\n * @param {string} collection The collection to create\n * @param {Object} [options] see [MongoDB driver docs](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection)\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.createCollection = _wrapConnHelper(function createCollection(collection, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n  this.db.createCollection(collection, options, cb);\n});\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://docs.mongodb.com/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://docs.mongodb.com/manual/core/retryable-writes/),\n * and [transactions](http://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * ####Example:\n *\n *     const session = await conn.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n *\n * @method startSession\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @param {Function} [callback]\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nConnection.prototype.startSession = _wrapConnHelper(function startSession(options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n  const session = this.client.startSession(options);\n  cb(null, session);\n});\n\n/**\n * _Requires MongoDB >= 3.6.0._ Executes the wrapped async function\n * in a transaction. Mongoose will commit the transaction if the\n * async function executes successfully and attempt to retry if\n * there was a retriable error.\n *\n * Calls the MongoDB driver's [`session.withTransaction()`](http://mongodb.github.io/node-mongodb-native/3.5/api/ClientSession.html#withTransaction),\n * but also handles resetting Mongoose document state as shown below.\n *\n * ####Example:\n *\n *     const doc = new Person({ name: 'Will Riker' });\n *     await db.transaction(async function setRank(session) {\n *       doc.rank = 'Captain';\n *       await doc.save({ session });\n *       doc.isNew; // false\n *\n *       // Throw an error to abort the transaction\n *       throw new Error('Oops!');\n *     },{ readPreference: 'primary' }).catch(() => {});\n *\n *     // true, `transaction()` reset the document's state because the\n *     // transaction was aborted.\n *     doc.isNew;\n *\n * @method transaction\n * @param {Function} fn Function to execute in a transaction\n * @param {mongodb.TransactionOptions} [options] Optional settings for the transaction\n * @return {Promise<Any>} promise that is fulfilled if Mongoose successfully committed the transaction, or rejects if the transaction was aborted or if Mongoose failed to commit the transaction. If fulfilled, the promise resolves to a MongoDB command result.\n * @api public\n */\n\nConnection.prototype.transaction = function transaction(fn, options) {\n  return this.startSession().then(session => {\n    session[sessionNewDocuments] = new Map();\n    return session.withTransaction(() => fn(session), options).\n      then(res => {\n        delete session[sessionNewDocuments];\n        return res;\n      }).\n      catch(err => {\n        // If transaction was aborted, we need to reset newly\n        // inserted documents' `isNew`.\n        for (const doc of session[sessionNewDocuments].keys()) {\n          const state = session[sessionNewDocuments].get(doc);\n          if (state.hasOwnProperty('isNew')) {\n            doc.$isNew = state.$isNew;\n          }\n          if (state.hasOwnProperty('versionKey')) {\n            doc.set(doc.schema.options.versionKey, state.versionKey);\n          }\n\n          for (const path of state.modifiedPaths) {\n            doc.$__.activePaths.paths[path] = 'modify';\n            doc.$__.activePaths.states.modify[path] = true;\n          }\n\n          for (const path of state.atomics.keys()) {\n            const val = doc.$__getValue(path);\n            if (val == null) {\n              continue;\n            }\n            val[arrayAtomicsSymbol] = state.atomics.get(path);\n          }\n        }\n        delete session[sessionNewDocuments];\n        throw err;\n      });\n  });\n};\n\n/**\n * Helper for `dropCollection()`. Will delete the given collection, including\n * all documents and indexes.\n *\n * @method dropCollection\n * @param {string} collection The collection to delete\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropCollection = _wrapConnHelper(function dropCollection(collection, cb) {\n  this.db.dropCollection(collection, cb);\n});\n\n/**\n * Helper for `dropDatabase()`. Deletes the given database, including all\n * collections, documents, and indexes.\n *\n * ####Example:\n *\n *     const conn = mongoose.createConnection('mongodb://localhost:27017/mydb');\n *     // Deletes the entire 'mydb' database\n *     await conn.dropDatabase();\n *\n * @method dropDatabase\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropDatabase = _wrapConnHelper(function dropDatabase(cb) {\n  // If `dropDatabase()` is called, this model's collection will not be\n  // init-ed. It is sufficiently common to call `dropDatabase()` after\n  // `mongoose.connect()` but before creating models that we want to\n  // support this. See gh-6967\n  for (const name of Object.keys(this.models)) {\n    delete this.models[name].$init;\n  }\n  this.db.dropDatabase(cb);\n});\n\n/*!\n * ignore\n */\n\nfunction _wrapConnHelper(fn) {\n  return function() {\n    const cb = arguments.length > 0 ? arguments[arguments.length - 1] : null;\n    const argsWithoutCb = typeof cb === 'function' ?\n      Array.prototype.slice.call(arguments, 0, arguments.length - 1) :\n      Array.prototype.slice.call(arguments);\n    const disconnectedError = new MongooseError('Connection ' + this.id +\n      ' was disconnected when calling `' + fn.name + '`');\n\n    return promiseOrCallback(cb, cb => {\n      immediate(() => {\n        if ((this.readyState === STATES.connecting || this.readyState === STATES.disconnected) && this._shouldBufferCommands()) {\n          this._queue.push({ fn: fn, ctx: this, args: argsWithoutCb.concat([cb]) });\n        } else if (this.readyState === STATES.disconnected && this.db == null) {\n          cb(disconnectedError);\n        } else {\n          try {\n            fn.apply(this, argsWithoutCb.concat([cb]));\n          } catch (err) {\n            return cb(err);\n          }\n        }\n      });\n    });\n  };\n}\n\n/*!\n * ignore\n */\n\nConnection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\n  if (this.config.bufferCommands != null) {\n    return this.config.bufferCommands;\n  }\n  if (this.base.get('bufferCommands') != null) {\n    return this.base.get('bufferCommands');\n  }\n  return true;\n};\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @api private\n */\n\nConnection.prototype.error = function(err, callback) {\n  if (callback) {\n    callback(err);\n    return null;\n  }\n  if (this.listeners('error').length > 0) {\n    this.emit('error', err);\n  }\n  return Promise.reject(err);\n};\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function() {\n  this.readyState = STATES.connected;\n\n  for (const d of this._queue) {\n    d.fn.apply(d.ctx, d.args);\n  }\n  this._queue = [];\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (const i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onOpen();\n    }\n  }\n\n  this.emit('open');\n};\n\n/**\n * Opens the connection with a URI using `MongoClient.connect()`.\n *\n * @param {String} uri The URI to connect with.\n * @param {Object} [options] Passed on to http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](http://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {Number} [options.bufferTimeoutMS=10000] Mongoose specific option. If `bufferCommands` is true, Mongoose will throw an error after `bufferTimeoutMS` if the operation is still buffered.\n * @param {String} [options.dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Number} [options.maxPoolSize=100] The maximum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.minPoolSize=0] The minimum number of sockets the MongoDB driver will keep open for this connection. Keep in mind that MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See [Slow Trains in MongoDB and Node.js](http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs).\n * @param {Number} [options.serverSelectionTimeoutMS] If `useUnifiedTopology = true`, the MongoDB driver will try to find a server to send any given operation to, and keep retrying for `serverSelectionTimeoutMS` milliseconds before erroring out. If not set, the MongoDB driver defaults to using `30000` (30 seconds).\n * @param {Number} [options.heartbeatFrequencyMS] If `useUnifiedTopology = true`, the MongoDB driver sends a heartbeat every `heartbeatFrequencyMS` to check on the status of the connection. A heartbeat is subject to `serverSelectionTimeoutMS`, so the MongoDB driver will retry failed heartbeats for up to 30 seconds by default. Mongoose only emits a `'disconnected'` event after a heartbeat has failed, so you may want to decrease this setting to reduce the time between when your server goes down and when Mongoose emits `'disconnected'`. We recommend you do **not** set this setting below 1000, too many heartbeats can lead to performance degradation.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Class} [options.promiseLibrary] Sets the [underlying driver's promise library](http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html).\n * @param {Number} [options.connectTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _during initial connection_. Defaults to 30000. This option is passed transparently to [Node.js' `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback).\n * @param {Number} [options.socketTimeoutMS=30000] How long the MongoDB driver will wait before killing a socket due to inactivity _after initial connection_. A socket may be inactive because of either no activity or a long-running operation. This is set to `30000` by default, you should set this to 2-3x your longest running operation if you expect some of your database operations to run longer than 20 seconds. This option is passed to [Node.js `socket#setTimeout()` function](https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback) after the MongoDB driver successfully completes.\n * @param {Number} [options.family=0] Passed transparently to [Node.js' `dns.lookup()`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) function. May be either `0, `4`, or `6`. `4` means use IPv4 only, `6` means use IPv6 only, `0` means try both.\n * @param {Boolean} [options.autoCreate=false] Set to `true` to make Mongoose automatically call `createCollection()` on every model created on this connection.\n * @param {Function} [callback]\n * @returns {Connection} this\n * @api public\n */\n\nConnection.prototype.openUri = function(uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  if (['string', 'number'].indexOf(typeof options) !== -1) {\n    throw new MongooseError('Mongoose 5.x no longer supports ' +\n      '`mongoose.connect(host, dbname, port)` or ' +\n      '`mongoose.createConnection(host, dbname, port)`. See ' +\n      'http://mongoosejs.com/docs/connections.html for supported connection syntax');\n  }\n\n  if (typeof uri !== 'string') {\n    throw new MongooseError('The `uri` parameter to `openUri()` must be a ' +\n      `string, got \"${typeof uri}\". Make sure the first parameter to ` +\n      '`mongoose.connect()` or `mongoose.createConnection()` is a string.');\n  }\n\n  if (callback != null && typeof callback !== 'function') {\n    throw new MongooseError('3rd parameter to `mongoose.connect()` or ' +\n      '`mongoose.createConnection()` must be a function, got \"' +\n      typeof callback + '\"');\n  }\n\n  if (this.readyState === STATES.connecting || this.readyState === STATES.connected) {\n    if (this._connectionString !== uri) {\n      throw new MongooseError('Can\\'t call `openUri()` on an active connection with ' +\n        'different connection strings. Make sure you aren\\'t calling `mongoose.connect()` ' +\n        'multiple times. See: https://mongoosejs.com/docs/connections.html#multiple_connections');\n    }\n\n    if (typeof callback === 'function') {\n      this.$initialConnection = this.$initialConnection.then(\n        () => callback(null, this),\n        err => callback(err)\n      );\n    }\n    return this;\n  }\n\n  this._connectionString = uri;\n  this.readyState = STATES.connecting;\n  this._closeCalled = false;\n\n  const Promise = PromiseProvider.get();\n  const _this = this;\n\n  options = processConnectionOptions(uri, options);\n\n  if (options) {\n    options = utils.clone(options);\n\n    const autoIndex = options.config && options.config.autoIndex != null ?\n      options.config.autoIndex :\n      options.autoIndex;\n    if (autoIndex != null) {\n      this.config.autoIndex = autoIndex !== false;\n      delete options.config;\n      delete options.autoIndex;\n    }\n\n    if ('autoCreate' in options) {\n      this.config.autoCreate = !!options.autoCreate;\n      delete options.autoCreate;\n    }\n\n    if ('sanitizeFilter' in options) {\n      this.config.sanitizeFilter = options.sanitizeFilter;\n      delete options.sanitizeFilter;\n    }\n\n    // Backwards compat\n    if (options.user || options.pass) {\n      options.auth = options.auth || {};\n      options.auth.username = options.user;\n      options.auth.password = options.pass;\n\n      this.user = options.user;\n      this.pass = options.pass;\n    }\n    delete options.user;\n    delete options.pass;\n\n    if (options.bufferCommands != null) {\n      this.config.bufferCommands = options.bufferCommands;\n      delete options.bufferCommands;\n    }\n  } else {\n    options = {};\n  }\n\n  this._connectionOptions = options;\n  const dbName = options.dbName;\n  if (dbName != null) {\n    this.$dbName = dbName;\n  }\n  delete options.dbName;\n\n  if (!utils.hasUserDefinedProperty(options, 'driverInfo')) {\n    options.driverInfo = {\n      name: 'Mongoose',\n      version: pkg.version\n    };\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    let client;\n    try {\n      client = new mongodb.MongoClient(uri, options);\n    } catch (error) {\n      _this.readyState = STATES.disconnected;\n      return reject(error);\n    }\n    _this.client = client;\n    client.setMaxListeners(0);\n    client.connect((error) => {\n      if (error) {\n        return reject(error);\n      }\n\n      _setClient(_this, client, options, dbName);\n\n      resolve(_this);\n    });\n  });\n\n  const serverSelectionError = new ServerSelectionError();\n  this.$initialConnection = promise.\n    then(() => this).\n    catch(err => {\n      this.readyState = STATES.disconnected;\n      if (err != null && err.name === 'MongoServerSelectionError') {\n        err = serverSelectionError.assimilateError(err);\n      }\n\n      if (this.listeners('error').length > 0) {\n        immediate(() => this.emit('error', err));\n      }\n      throw err;\n    });\n\n  if (callback != null) {\n    this.$initialConnection = this.$initialConnection.then(\n      () => { callback(null, this); return this; },\n      err => callback(err)\n    );\n  }\n\n  return this.$initialConnection;\n};\n\n/*!\n * ignore\n */\n\nfunction _setClient(conn, client, options, dbName) {\n  const db = dbName != null ? client.db(dbName) : client.db();\n  conn.db = db;\n  conn.client = client;\n  conn.host = get(client, 's.options.hosts.0.host', void 0);\n  conn.port = get(client, 's.options.hosts.0.port', void 0);\n  conn.name = dbName != null ? dbName : get(client, 's.options.dbName', void 0);\n  conn._closeCalled = client._closeCalled;\n\n  const _handleReconnect = () => {\n    // If we aren't disconnected, we assume this reconnect is due to a\n    // socket timeout. If there's no activity on a socket for\n    // `socketTimeoutMS`, the driver will attempt to reconnect and emit\n    // this event.\n    if (conn.readyState !== STATES.connected) {\n      conn.readyState = STATES.connected;\n      conn.emit('reconnect');\n      conn.emit('reconnected');\n      conn.onOpen();\n    }\n  };\n\n  const type = get(client, 'topology.description.type', '');\n\n  if (type === 'Single') {\n    client.on('serverDescriptionChanged', ev => {\n      const newDescription = ev.newDescription;\n      if (newDescription.type === 'Unknown') {\n        conn.readyState = STATES.disconnected;\n      } else {\n        _handleReconnect();\n      }\n    });\n  } else if (type.startsWith('ReplicaSet')) {\n    client.on('topologyDescriptionChanged', ev => {\n      // Emit disconnected if we've lost connectivity to the primary\n      const description = ev.newDescription;\n      if (conn.readyState === STATES.connected && description.type !== 'ReplicaSetWithPrimary') {\n        // Implicitly emits 'disconnected'\n        conn.readyState = STATES.disconnected;\n      } else if (conn.readyState === STATES.disconnected && description.type === 'ReplicaSetWithPrimary') {\n        _handleReconnect();\n      }\n    });\n  }\n\n  conn.onOpen();\n\n  for (const i in conn.collections) {\n    if (utils.object.hasOwnProperty(conn.collections, i)) {\n      conn.collections[i].onOpen();\n    }\n  }\n}\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force] optional\n * @param {Function} [callback] optional\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.close = function(force, callback) {\n  if (typeof force === 'function') {\n    callback = force;\n    force = false;\n  }\n\n  this.$wasForceClosed = !!force;\n\n  return promiseOrCallback(callback, cb => {\n    this._close(force, cb);\n  });\n};\n\n/**\n * Handles closing the connection\n *\n * @param {Boolean} force\n * @param {Function} callback\n * @api private\n */\nConnection.prototype._close = function(force, callback) {\n  const _this = this;\n  const closeCalled = this._closeCalled;\n  this._closeCalled = true;\n  if (this.client != null) {\n    this.client._closeCalled = true;\n  }\n\n  switch (this.readyState) {\n    case STATES.disconnected:\n      if (closeCalled) {\n        callback();\n      } else {\n        this.doClose(force, function(err) {\n          if (err) {\n            return callback(err);\n          }\n          _this.onClose(force);\n          callback(null);\n        });\n      }\n      break;\n\n    case STATES.connected:\n      this.readyState = STATES.disconnecting;\n      this.doClose(force, function(err) {\n        if (err) {\n          return callback(err);\n        }\n        _this.onClose(force);\n        callback(null);\n      });\n\n      break;\n    case STATES.connecting:\n      this.once('open', function() {\n        _this.close(callback);\n      });\n      break;\n\n    case STATES.disconnecting:\n      this.once('close', function() {\n        callback();\n      });\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function(force) {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (const i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onClose(force);\n    }\n  }\n\n  this.emit('close', force);\n\n  for (const db of this.otherDbs) {\n    db.close(force);\n  }\n};\n\n/**\n * Retrieves a collection, creating it if not cached.\n *\n * Not typically needed by applications. Just talk to your collection through your model.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function(name, options) {\n  const defaultOptions = {\n    autoIndex: this.config.autoIndex != null ? this.config.autoIndex : this.base.options.autoIndex,\n    autoCreate: this.config.autoCreate != null ? this.config.autoCreate : this.base.options.autoCreate\n  };\n  options = Object.assign({}, defaultOptions, options ? utils.clone(options) : {});\n  options.$wasForceClosed = this.$wasForceClosed;\n  if (!(name in this.collections)) {\n    this.collections[name] = new Collection(name, this, options);\n  }\n  return this.collections[name];\n};\n\n/**\n * Declares a plugin executed on all schemas you pass to `conn.model()`\n *\n * Equivalent to calling `.plugin(fn)` on each schema you create.\n *\n * ####Example:\n *     const db = mongoose.createConnection('mongodb://localhost:27017/mydb');\n *     db.plugin(() => console.log('Applied'));\n *     db.plugins.length; // 1\n *\n *     db.model('Test', new Schema({})); // Prints \"Applied\"\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Connection} this\n * @see plugins ./plugins.html\n * @api public\n */\n\nConnection.prototype.plugin = function(fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     const mongoose = require('mongoose');\n *     const db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     const Ticket = db.model('Ticket', new Schema(..));\n *     const Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     const collectionName = 'actor'\n *     const M = conn.model('Actor', schema, collectionName)\n *\n * @param {String|Function} name the model name or class extending Model\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @param {Object} [options]\n * @param {Boolean} [options.overwriteModels=false] If true, overwrite existing models with the same name to avoid `OverwriteModelError`\n * @see Mongoose#model #index_Mongoose-model\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function(name, schema, collection, options) {\n  if (!(this instanceof Connection)) {\n    throw new MongooseError('`connection.model()` should not be run with ' +\n      '`new`. If you are doing `new db.model(foo)(bar)`, use ' +\n      '`db.model(foo)(bar)` instead');\n  }\n\n  let fn;\n  if (typeof name === 'function') {\n    fn = name;\n    name = fn.name;\n  }\n\n  // collection name discovery\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema)) {\n    if (!schema.instanceOfSchema) {\n      schema = new Schema(schema);\n    } else if (!(schema instanceof this.base.Schema)) {\n      schema = schema._clone(this.base.Schema);\n    }\n  }\n  if (schema && !schema.instanceOfSchema) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  const defaultOptions = { cache: false, overwriteModels: this.base.options.overwriteModels };\n  const opts = Object.assign(defaultOptions, options, { connection: this });\n  if (this.models[name] && !collection && opts.overwriteModels !== true) {\n    // model exists but we are not subclassing with custom collection\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  let model;\n\n  if (schema && schema.instanceOfSchema) {\n    applyPlugins(schema, this.plugins, null, '$connectionPluginsApplied');\n\n    // compile a model\n    model = this.base._model(fn || name, schema, collection, opts);\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    // Errors handled internally, so safe to ignore error\n    model.init(function $modelInitNoop() {});\n\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    const sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this === model.prototype.db\n      && (!collection || collection === model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n  this.models[name] = model.__subclass(this, schema, collection);\n  return this.models[name];\n};\n\n/**\n * Removes the model named `name` from this connection, if it exists. You can\n * use this function to clean up any models you created in your tests to\n * prevent OverwriteModelErrors.\n *\n * ####Example:\n *\n *     conn.model('User', new Schema({ name: String }));\n *     console.log(conn.model('User')); // Model object\n *     conn.deleteModel('User');\n *     console.log(conn.model('User')); // undefined\n *\n *     // Usually useful in a Mocha `afterEach()` hook\n *     afterEach(function() {\n *       conn.deleteModel(/.+/); // Delete every model\n *     });\n *\n * @api public\n * @param {String|RegExp} name if string, the name of the model to remove. If regexp, removes all models whose name matches the regexp.\n * @return {Connection} this\n */\n\nConnection.prototype.deleteModel = function(name) {\n  if (typeof name === 'string') {\n    const model = this.model(name);\n    if (model == null) {\n      return this;\n    }\n    const collectionName = model.collection.name;\n    delete this.models[name];\n    delete this.collections[collectionName];\n\n    this.emit('deleteModel', model);\n  } else if (name instanceof RegExp) {\n    const pattern = name;\n    const names = this.modelNames();\n    for (const name of names) {\n      if (pattern.test(name)) {\n        this.deleteModel(name);\n      }\n    }\n  } else {\n    throw new Error('First parameter to `deleteModel()` must be a string ' +\n      'or regexp, got \"' + name + '\"');\n  }\n\n  return this;\n};\n\n/**\n * Watches the entire underlying database for changes. Similar to\n * [`Model.watch()`](/docs/api/model.html#model_Model.watch).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * ####Example:\n *\n *     const User = conn.model('User', new Schema({ name: String }));\n *\n *     const changeStream = conn.watch().on('change', data => console.log(data));\n *\n *     // Triggers a 'change' event on the change stream.\n *     await User.create({ name: 'test' });\n *\n * @api public\n * @param {Array} [pipeline]\n * @param {Object} [options] passed without changes to [the MongoDB driver's `Db#watch()` function](https://mongodb.github.io/node-mongodb-native/3.4/api/Db.html#watch)\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n */\n\nConnection.prototype.watch = function(pipeline, options) {\n  const disconnectedError = new MongooseError('Connection ' + this.id +\n    ' was disconnected when calling `watch()`');\n\n  const changeStreamThunk = cb => {\n    immediate(() => {\n      if (this.readyState === STATES.connecting) {\n        this.once('open', function() {\n          const driverChangeStream = this.db.watch(pipeline, options);\n          cb(null, driverChangeStream);\n        });\n      } else if (this.readyState === STATES.disconnected && this.db == null) {\n        cb(disconnectedError);\n      } else {\n        const driverChangeStream = this.db.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      }\n    });\n  };\n\n  const changeStream = new ChangeStream(changeStreamThunk, pipeline, options);\n  return changeStream;\n};\n\n/**\n * Returns a promise that resolves when this connection\n * successfully connects to MongoDB, or rejects if this connection failed\n * to connect.\n *\n * ####Example:\n *     const conn = await mongoose.createConnection('mongodb://localhost:27017/test').\n *       asPromise();\n *     conn.readyState; // 1, means Mongoose is connected\n *\n * @api public\n * @return {Promise}\n */\n\nConnection.prototype.asPromise = function asPromise() {\n  return this.$initialConnection;\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {Array}\n */\n\nConnection.prototype.modelNames = function() {\n  return Object.keys(this.models);\n};\n\n/**\n * @brief Returns if the connection requires authentication after it is opened. Generally if a\n * username and password are both provided than authentication is needed, but in some cases a\n * password is not required.\n * @api private\n * @return {Boolean} true if the connection should be authenticated after it is opened, otherwise false.\n */\nConnection.prototype.shouldAuthenticate = function() {\n  return this.user != null &&\n    (this.pass != null || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * @brief Returns a boolean value that specifies if the current authentication mechanism needs a\n * password to authenticate according to the auth objects passed into the openUri methods.\n * @api private\n * @return {Boolean} true if the authentication mechanism specified in the options object requires\n *  a password, otherwise false.\n */\nConnection.prototype.authMechanismDoesNotRequirePassword = function() {\n  if (this.options && this.options.auth) {\n    return noPasswordAuthMechanisms.indexOf(this.options.auth.authMechanism) >= 0;\n  }\n  return true;\n};\n\n/**\n * @brief Returns a boolean value that specifies if the provided objects object provides enough\n * data to authenticate with. Generally this is true if the username and password are both specified\n * but in some authentication methods, a password is not required for authentication so only a username\n * is required.\n * @param {Object} [options] the options object passed into the openUri methods.\n * @api private\n * @return {Boolean} true if the provided options object provides enough data to authenticate with,\n *   otherwise false.\n */\nConnection.prototype.optionsProvideAuthenticationData = function(options) {\n  return (options) &&\n      (options.user) &&\n      ((options.pass) || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * Returns the [MongoDB driver `MongoClient`](http://mongodb.github.io/node-mongodb-native/3.5/api/MongoClient.html) instance\n * that this connection uses to talk to MongoDB.\n *\n * ####Example:\n *     const conn = await mongoose.createConnection('mongodb://localhost:27017/test');\n *\n *     conn.getClient(); // MongoClient { ... }\n *\n * @api public\n * @return {MongoClient}\n */\n\nConnection.prototype.getClient = function getClient() {\n  return this.client;\n};\n\n/**\n * Set the [MongoDB driver `MongoClient`](http://mongodb.github.io/node-mongodb-native/3.5/api/MongoClient.html) instance\n * that this connection uses to talk to MongoDB. This is useful if you already have a MongoClient instance, and want to\n * reuse it.\n *\n * ####Example:\n *     const client = await mongodb.MongoClient.connect('mongodb://localhost:27017/test');\n *\n *     const conn = mongoose.createConnection().setClient(client);\n *\n *     conn.getClient(); // MongoClient { ... }\n *     conn.readyState; // 1, means 'CONNECTED'\n *\n * @api public\n * @return {Connection} this\n */\n\nConnection.prototype.setClient = function setClient(client) {\n  if (!(client instanceof mongodb.MongoClient)) {\n    throw new MongooseError('Must call `setClient()` with an instance of MongoClient');\n  }\n  if (this.readyState !== STATES.disconnected) {\n    throw new MongooseError('Cannot call `setClient()` on a connection that is already connected.');\n  }\n  if (client.topology == null) {\n    throw new MongooseError('Cannot call `setClient()` with a MongoClient that you have not called `connect()` on yet.');\n  }\n\n  this._connectionString = client.s.url;\n  _setClient(this, client, { useUnifiedTopology: client.s.options.useUnifiedTopology }, client.s.options.dbName);\n\n  return this;\n};\n\nConnection.prototype.syncIndexes = async function syncIndexes() {\n  const result = {};\n  for (const model in this.models) {\n    result[model] = await this.model(model).syncIndexes();\n  }\n  return result;\n};\n\n/**\n * Switches to a different database using the same connection pool.\n *\n * Returns a new connection object, with the new db.\n *\n * @method useDb\n * @memberOf Connection\n * @param {String} name The database name\n * @param {Object} [options]\n * @param {Boolean} [options.useCache=false] If true, cache results so calling `useDb()` multiple times with the same name only creates 1 connection object.\n * @param {Boolean} [options.noListener=false] If true, the connection object will not make the db listen to events on the original connection. See [issue #9961](https://github.com/Automattic/mongoose/issues/9961).\n * @return {Connection} New Connection Object\n * @api public\n */\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\n/*!\n * ignore\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(changeStreamThunk, pipeline, options) {\n    super();\n\n    this.driverChangeStream = null;\n    this.closed = false;\n    this.pipeline = pipeline;\n    this.options = options;\n\n    // This wrapper is necessary because of buffering.\n    changeStreamThunk((err, driverChangeStream) => {\n      if (err != null) {\n        this.emit('error', err);\n        return;\n      }\n\n      this.driverChangeStream = driverChangeStream;\n      this._bindEvents();\n      this.emit('ready');\n    });\n  }\n\n  _bindEvents() {\n    this.driverChangeStream.on('close', () => {\n      this.closed = true;\n    });\n\n    ['close', 'change', 'end', 'error'].forEach(ev => {\n      this.driverChangeStream.on(ev, data => this.emit(ev, data));\n    });\n  }\n\n  _queue(cb) {\n    this.once('ready', () => cb());\n  }\n\n  close() {\n    this.closed = true;\n    if (this.driverChangeStream) {\n      this.driverChangeStream.close();\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = ChangeStream;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('./mongooseError');\nconst allServersUnknown = require('../helpers/topology/allServersUnknown');\nconst isAtlas = require('../helpers/topology/isAtlas');\nconst isSSLError = require('../helpers/topology/isSSLError');\n\n/*!\n * ignore\n */\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' +\n  'One common reason is that you\\'re trying to access the database from ' +\n  'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' +\n  'cluster\\'s IP whitelist: https://docs.atlas.mongodb.com/security-whitelist/';\n\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' +\n  'not accepting SSL connections. Please ensure that the MongoDB server you are ' +\n  'connecting to is configured to accept SSL connections. Learn more: ' +\n  'https://mongoosejs.com/docs/tutorials/ssl.html';\n\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason;\n    // Special message for a case that is likely due to IP whitelisting issues.\n    const isAtlasWhitelistError = isAtlas(reason) &&\n      allServersUnknown(reason) &&\n      err.message.indexOf('bad auth') === -1 &&\n      err.message.indexOf('Authentication failed') === -1;\n\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n\n    return this;\n  }\n}\n\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\n\nmodule.exports = MongooseServerSelectionError;\n","\n\nconst getConstructorName = require('../getConstructorName');\n\nmodule.exports = function allServersUnknown(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const servers = Array.from(topologyDescription.servers.values());\n  return servers.length > 0 && servers.every(server => server.type === 'Unknown');\n};","\n\nconst getConstructorName = require('../getConstructorName');\n\nmodule.exports = function isAtlas(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const hostnames = Array.from(topologyDescription.servers.keys());\n  return hostnames.length > 0 &&\n    hostnames.every(host => host.endsWith('.mongodb.net:27017'));\n};","\n\nconst getConstructorName = require('../getConstructorName');\n\nconst nonSSLMessage = 'Client network socket disconnected before secure TLS ' +\n  'connection was established';\n\nmodule.exports = function isSSLError(topologyDescription) {\n  if (getConstructorName(topologyDescription) !== 'TopologyDescription') {\n    return false;\n  }\n\n  const descriptions = Array.from(topologyDescription.servers.values());\n  return descriptions.length > 0 &&\n    descriptions.every(descr => descr.error && descr.error.message.indexOf(nonSSLMessage) !== -1);\n};","\n\nmodule.exports = function applyPlugins(schema, plugins, options, cacheKey) {\n  if (schema[cacheKey]) {\n    return;\n  }\n  schema[cacheKey] = true;\n\n  if (!options || !options.skipTopLevel) {\n    for (const plugin of plugins) {\n      schema.plugin(plugin[0], plugin[1]);\n    }\n  }\n\n  options = Object.assign({}, options);\n  delete options.skipTopLevel;\n\n  if (options.applyPluginsToChildSchemas !== false) {\n    for (const path of Object.keys(schema.paths)) {\n      const type = schema.paths[path];\n      if (type.schema != null) {\n        applyPlugins(type.schema, plugins, options, cacheKey);\n\n        // Recompile schema because plugins may have changed it, see gh-7572\n        type.caster.prototype.$__setSchema(type.schema);\n      }\n    }\n  }\n\n  const discriminators = schema.discriminators;\n  if (discriminators == null) {\n    return;\n  }\n\n  const applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;\n\n  const keys = Object.keys(discriminators);\n  for (const discriminatorKey of keys) {\n    const discriminatorSchema = discriminators[discriminatorKey];\n\n    applyPlugins(discriminatorSchema, plugins,\n      { skipTopLevel: !applyPluginsToDiscriminators }, cacheKey);\n  }\n};","module.exports = {\n  \"_from\": \"mongoose\",\n  \"_id\": \"mongoose@6.1.6\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-wvNRJ547x/Bn3EMhwbVInNsEp2OdlMxk4Q/vfgAkw8OI+giZQ72S90ZH0H6VzzIhs4lCU9SwXHYa2O0sPicnEQ==\",\n  \"_location\": \"/mongoose\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"mongoose\",\n    \"name\": \"mongoose\",\n    \"escapedName\": \"mongoose\",\n    \"rawSpec\": \"\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"latest\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mongoose/-/mongoose-6.1.6.tgz\",\n  \"_shasum\": \"47903ef821b63fc5ef80a259c2331cabf994c957\",\n  \"_spec\": \"mongoose\",\n  \"_where\": \"E:\\\\前端项目\\\\miniTopic\\\\server\",\n  \"author\": {\n    \"name\": \"Guillermo Rauch\",\n    \"email\": \"guillermo@learnboost.com\"\n  },\n  \"browser\": \"./dist/browser.umd.js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Automattic/mongoose/issues/new\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"@types/node\": \"< 17.0.6\",\n    \"bson\": \"^4.2.2\",\n    \"kareem\": \"2.3.3\",\n    \"mongodb\": \"4.2.2\",\n    \"mpath\": \"0.8.4\",\n    \"mquery\": \"4.0.0\",\n    \"ms\": \"2.1.2\",\n    \"regexp-clone\": \"1.0.0\",\n    \"sift\": \"13.5.2\",\n    \"sliced\": \"1.0.1\"\n  },\n  \"deprecated\": false,\n  \"description\": \"Mongoose MongoDB ODM\",\n  \"devDependencies\": {\n    \"@babel/core\": \"7.10.5\",\n    \"@babel/preset-env\": \"7.10.4\",\n    \"@typescript-eslint/eslint-plugin\": \"5.8.0\",\n    \"@typescript-eslint/parser\": \"5.8.0\",\n    \"acquit\": \"1.x\",\n    \"acquit-ignore\": \"0.1.x\",\n    \"acquit-require\": \"0.1.x\",\n    \"babel-loader\": \"8.1.0\",\n    \"benchmark\": \"2.1.4\",\n    \"bluebird\": \"3.7.2\",\n    \"chalk\": \"4.1.2\",\n    \"cheerio\": \"1.0.0-rc.5\",\n    \"dox\": \"0.3.1\",\n    \"eslint\": \"8.5.0\",\n    \"eslint-plugin-mocha-no-only\": \"1.1.0\",\n    \"highlight.js\": \"9.18.3\",\n    \"lodash.isequal\": \"4.5.0\",\n    \"lodash.isequalwith\": \"4.4.0\",\n    \"marked\": \"2.1.3\",\n    \"mkdirp\": \"0.5.5\",\n    \"mocha\": \"9.1.3\",\n    \"moment\": \"2.x\",\n    \"node-static\": \"0.7.11\",\n    \"object-sizeof\": \"1.3.0\",\n    \"pug\": \"3.0.2\",\n    \"q\": \"1.5.1\",\n    \"rimraf\": \"2.6.3\",\n    \"semver\": \"5.5.0\",\n    \"typescript\": \"4.5.3\",\n    \"uuid\": \"2.0.3\",\n    \"uuid-parse\": \"1.0.0\",\n    \"webpack\": \"4.44.1\"\n  },\n  \"directories\": {\n    \"lib\": \"./lib/mongoose\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"eslint:recommended\"\n    ],\n    \"overrides\": [\n      {\n        \"files\": [\n          \"**/*.{ts,tsx}\"\n        ],\n        \"extends\": [\n          \"plugin:@typescript-eslint/eslint-recommended\",\n          \"plugin:@typescript-eslint/recommended\"\n        ],\n        \"plugins\": [\n          \"@typescript-eslint\"\n        ],\n        \"rules\": {\n          \"@typescript-eslint/no-explicit-any\": \"off\",\n          \"@typescript-eslint/ban-types\": \"off\",\n          \"@typescript-eslint/no-unused-vars\": \"off\",\n          \"@typescript-eslint/explicit-module-boundary-types\": \"off\"\n        }\n      }\n    ],\n    \"plugins\": [\n      \"mocha-no-only\"\n    ],\n    \"parserOptions\": {\n      \"ecmaVersion\": 2020\n    },\n    \"env\": {\n      \"node\": true,\n      \"es6\": true\n    },\n    \"rules\": {\n      \"comma-style\": \"error\",\n      \"indent\": [\n        \"error\",\n        2,\n        {\n          \"SwitchCase\": 1,\n          \"VariableDeclarator\": 2\n        }\n      ],\n      \"keyword-spacing\": \"error\",\n      \"no-whitespace-before-property\": \"error\",\n      \"no-buffer-constructor\": \"warn\",\n      \"no-console\": \"off\",\n      \"no-multi-spaces\": \"error\",\n      \"no-constant-condition\": \"off\",\n      \"func-call-spacing\": \"error\",\n      \"no-trailing-spaces\": \"error\",\n      \"no-undef\": \"error\",\n      \"no-unneeded-ternary\": \"error\",\n      \"no-const-assign\": \"error\",\n      \"no-useless-rename\": \"error\",\n      \"no-dupe-keys\": \"error\",\n      \"space-in-parens\": [\n        \"error\",\n        \"never\"\n      ],\n      \"spaced-comment\": [\n        \"error\",\n        \"always\",\n        {\n          \"block\": {\n            \"markers\": [\n              \"!\"\n            ],\n            \"balanced\": true\n          }\n        }\n      ],\n      \"key-spacing\": [\n        \"error\",\n        {\n          \"beforeColon\": false,\n          \"afterColon\": true\n        }\n      ],\n      \"comma-spacing\": [\n        \"error\",\n        {\n          \"before\": false,\n          \"after\": true\n        }\n      ],\n      \"array-bracket-spacing\": 1,\n      \"arrow-spacing\": [\n        \"error\",\n        {\n          \"before\": true,\n          \"after\": true\n        }\n      ],\n      \"object-curly-spacing\": [\n        \"error\",\n        \"always\"\n      ],\n      \"comma-dangle\": [\n        \"error\",\n        \"never\"\n      ],\n      \"no-unreachable\": \"error\",\n      \"quotes\": [\n        \"error\",\n        \"single\"\n      ],\n      \"quote-props\": [\n        \"error\",\n        \"as-needed\"\n      ],\n      \"semi\": \"error\",\n      \"no-extra-semi\": \"error\",\n      \"semi-spacing\": \"error\",\n      \"no-spaced-func\": \"error\",\n      \"no-throw-literal\": \"error\",\n      \"space-before-blocks\": \"error\",\n      \"space-before-function-paren\": [\n        \"error\",\n        \"never\"\n      ],\n      \"space-infix-ops\": \"error\",\n      \"space-unary-ops\": \"error\",\n      \"no-var\": \"warn\",\n      \"prefer-const\": \"warn\",\n      \"strict\": [\n        \"error\",\n        \"global\"\n      ],\n      \"no-restricted-globals\": [\n        \"error\",\n        {\n          \"name\": \"context\",\n          \"message\": \"Don't use Mocha's global context\"\n        }\n      ],\n      \"no-prototype-builtins\": \"off\",\n      \"mocha-no-only/mocha-no-only\": [\n        \"error\"\n      ]\n    }\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mongoose\"\n  },\n  \"homepage\": \"https://mongoosejs.com\",\n  \"keywords\": [\n    \"mongodb\",\n    \"document\",\n    \"model\",\n    \"schema\",\n    \"database\",\n    \"odm\",\n    \"data\",\n    \"datastore\",\n    \"query\",\n    \"nosql\",\n    \"orm\",\n    \"db\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"./index.js\",\n  \"mocha\": {\n    \"extension\": [\n      \"test.js\"\n    ],\n    \"watch-files\": [\n      \"test/**/*.js\"\n    ]\n  },\n  \"name\": \"mongoose\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/Automattic/mongoose.git\"\n  },\n  \"scripts\": {\n    \"build-browser\": \"node build-browser.js\",\n    \"lint\": \"eslint .\",\n    \"prepublishOnly\": \"npm run build-browser\",\n    \"release\": \"git pull && git push origin master --tags && npm publish\",\n    \"release-legacy\": \"git pull origin 5.x && git push origin 5.x --tags && npm publish --tag legacy\",\n    \"tdd\": \"mocha ./test/*.test.js ./test/typescript/main.test.js --inspect --watch --recursive --watch-files ./**/*.js\",\n    \"test\": \"mocha --exit ./test/*.test.js ./test/typescript/main.test.js\",\n    \"test-cov\": \"nyc --reporter=html --reporter=text npm test\"\n  },\n  \"types\": \"./index.d.ts\",\n  \"version\": \"6.1.6\"\n}\n","\n\nconst clone = require('./clone');\nconst MongooseError = require('../error/index');\n\nfunction processConnectionOptions(uri, options) {\n  const opts = options ? options : {};\n  const readPreference = opts.readPreference\n    ? opts.readPreference\n    : getUriReadPreference(uri);\n\n  const resolvedOpts = (readPreference && readPreference !== 'primary')\n    ? resolveOptsConflicts(readPreference, opts)\n    : opts;\n\n  return clone(resolvedOpts);\n}\n\nfunction resolveOptsConflicts(pref, opts) {\n  // don't silently override user-provided indexing options\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\n    throwReadPreferenceError();\n  }\n\n  // if user has not explicitly set any auto-indexing options,\n  // we can silently default them all to false\n  else {\n    return defaultIndexOptsToFalse(opts);\n  }\n}\n\nfunction setsIndexOptions(opts) {\n  const configIdx = opts.config && opts.config.autoIndex;\n  const { autoCreate, autoIndex } = opts;\n  return !!(configIdx || autoCreate || autoIndex);\n}\n\nfunction setsSecondaryRead(prefString) {\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\n}\n\nfunction getUriReadPreference(connectionString) {\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\n  const match = exp.exec(connectionString);\n  return match ? match[1] : null;\n}\n\nfunction defaultIndexOptsToFalse(opts) {\n  opts.config = { autoIndex: false };\n  opts.autoCreate = false;\n  opts.autoIndex = false;\n  return opts;\n}\n\nfunction throwReadPreferenceError() {\n  throw new MongooseError(\n    'MongoDB prohibits index creation on connections that read from ' +\n            'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' +\n            '\"secondaryPreferred\" may not opt-in to the following connection options: ' +\n            'autoCreate, autoIndex'\n  );\n}\n\nmodule.exports = processConnectionOptions;\n","\n\nexports.setTimeout = setTimeout;","\n/*!\n * Valid mongoose options\n */\n\n\n\nconst VALID_OPTIONS = Object.freeze([\n  'applyPluginsToChildSchemas',\n  'applyPluginsToDiscriminators',\n  'autoCreate',\n  'autoIndex',\n  'bufferCommands',\n  'bufferTimeoutMS',\n  'cloneSchemas',\n  'debug',\n  'maxTimeMS',\n  'objectIdGetter',\n  'overwriteModels',\n  'returnOriginal',\n  'runValidators',\n  'sanitizeFilter',\n  'sanitizeProjection',\n  'selectPopulatedPaths',\n  'setDefaultsOnInsert',\n  'strict',\n  'strictPopulate',\n  'strictQuery',\n  'toJSON',\n  'toObject'\n]);\n\nmodule.exports = VALID_OPTIONS;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst DocumentNotFoundError = require('./error/notFound');\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst ObjectParameterError = require('./error/objectParameter');\nconst QueryCursor = require('./cursor/QueryCursor');\nconst ReadPreference = require('./driver').get().ReadPreference;\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst cast = require('./cast');\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\nconst castNumber = require('./cast/number');\nconst castUpdate = require('./helpers/query/castUpdate');\nconst completeMany = require('./helpers/query/completeMany');\nconst get = require('./helpers/get');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\nconst helpers = require('./queryhelpers');\nconst immediate = require('./helpers/immediate');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst isInclusive = require('./helpers/projection/isInclusive');\nconst isSubpath = require('./helpers/projection/isSubpath');\nconst mquery = require('mquery');\nconst parseProjection = require('./helpers/projection/parseProjection');\nconst removeUnusedArrayFilters = require('./helpers/update/removeUnusedArrayFilters');\nconst sanitizeFilter = require('./helpers/query/sanitizeFilter');\nconst sanitizeProjection = require('./helpers/query/sanitizeProjection');\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\nconst slice = require('sliced');\nconst updateValidators = require('./helpers/updateValidators');\nconst util = require('util');\nconst utils = require('./utils');\nconst validOps = require('./helpers/query/validOps');\nconst wrapThunk = require('./helpers/query/wrapThunk');\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * ####Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionStack = null;\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  const keys = Object.keys(options);\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {};\n\n  // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n  this.$useProjection = true;\n\n  const collation = get(this, 'schema.options.collation', null);\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n\n  const CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, model.Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n  p.setOptions(options);\n\n  p.op = this.op;\n  p._validateOp();\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Make a copy of this query so you can re-execute it.\n *\n * ####Example:\n *     const q = Book.findOne({ title: 'Casino Royale' });\n *     await q.exec();\n *     await q.exec(); // Throws an error because you can't execute a query twice\n *\n *     await q.clone().exec(); // Works\n *\n * @method clone\n * @return {Query} copy\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.clone = function clone() {\n  const model = this.model;\n  const collection = this.mongooseCollection;\n\n  const q = new this.constructor({}, {}, model, collection);\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    q.sort(options.sort);\n    delete options.sort;\n  }\n  q.setOptions(options);\n\n  q.op = this.op;\n  q._validateOp();\n  q._conditions = utils.clone(this._conditions);\n  q._fields = utils.clone(this._fields);\n  q._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  q._path = this._path;\n  q._distinct = this._distinct;\n  q._collection = this._collection;\n  q._mongooseOptions = this._mongooseOptions;\n\n  return q;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  let path;\n  let val;\n\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  const p = {};\n  p[path] = { $slice: val };\n  this.select(p);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst validOpsSet = new Set(validOps);\n\nQuery.prototype._validateOp = function() {\n  if (this.op != null && !validOpsSet.has(this.op)) {\n    this.error(new Error('Query has invalid `op`: \"' + this.op + '\"'));\n  }\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     const docs = await MyModel.where('tags').size(0).exec();\n *     assert(Array.isArray(docs));\n *     console.log('documents with 0 tags', docs);\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * ####Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val;\n  let path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\nQuery.prototype.limit = function limit(v) {\n  this._validate('limit');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'limit');\n    }\n  }\n\n  this.options.limit = v;\n  return this;\n};\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\nQuery.prototype.skip = function skip(v) {\n  this._validate('skip');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'skip');\n    }\n  }\n\n  this.options.skip = v;\n  return this;\n};\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @instance\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * ####Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\nQuery.prototype.projection = function(arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     Additional calls to select can override the previous selection:\n *     query.select({ a: 1, b: 1 }).select({ b: 0 }); // selection is now { a: 1 }\n *     query.select({ a: 0, b: 0 }).select({ b: 1 }); // selection is now { a: 0 }\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|Array<String>} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n\n  function sanitizeValue(value) {\n    return typeof value === 'string' && sanitizeProjection ? value = 1 : value;\n  }\n\n  arg = parseProjection(arg);\n\n  if (utils.isObject(arg)) {\n    if (this.selectedInclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else if (this.selectedExclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (!value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else {\n      const keys = Object.keys(arg);\n      for (let i = 0; i < keys.length; ++i) {\n        const value = arg[keys[i]];\n        fields[keys[i]] = sanitizeValue(value);\n        userProvidedFields[keys[i]] = sanitizeValue(value);\n      }\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @instance\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  const read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype.toString = function toString() {\n  if (this.op === 'count' ||\n      this.op === 'countDocuments' ||\n      this.op === 'find' ||\n      this.op === 'findOne' ||\n      this.op === 'deleteMany' ||\n      this.op === 'deleteOne' ||\n      this.op === 'findOneAndDelete' ||\n      this.op === 'findOneAndRemove' ||\n      this.op === 'remove') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'distinct') {\n    return `${this.model.modelName}.distinct('${this._distinct}', ${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'findOneAndReplace' ||\n      this.op === 'findOneAndUpdate' ||\n      this.op === 'replaceOne' ||\n      this.op === 'update' ||\n      this.op === 'updateMany' ||\n      this.op === 'updateOne') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)}, ${util.inspect(this._update)})`;\n  }\n\n  // 'estimatedDocumentCount' or any others\n  return `${this.model.modelName}.${this.op}()`;\n};\n\n/**\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * ####Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n  this.options.session = v;\n  return this;\n};\n\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see mongodb https://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n  this.options.writeConcern = val;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n  return this;\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n  return this;\n};\n\n/**\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\n *\n * ####Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * ####Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * ####Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 })\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.getOptions = function() {\n  return this.options;\n};\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * ####Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [allowDiskUse](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n *\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [lean](./api.html#query_Query-lean)\n * - [populate](/docs/populate.html)\n * - [projection](/docs/api/query.html#query_Query-projection)\n * - sanitizeProjection\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\n *\n * - rawResult\n *\n * The following options are for all operations:\n *\n * - [strict](/docs/guide.html#strict)\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n  if (options == null) {\n    return this;\n  }\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n  if ('sanitizeFilter' in options) {\n    this._mongooseOptions.sanitizeFilter = options.sanitizeFilter;\n    delete options.sanitizeFilter;\n  }\n\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults;\n    // deleting options.defaults will cause 7287 to fail\n  }\n\n  if (typeof options.limit === 'string') {\n    try {\n      options.limit = castNumber(options.limit);\n    } catch (err) {\n      throw new CastError('Number', options.limit, 'limit');\n    }\n  }\n  if (typeof options.skip === 'string') {\n    try {\n      options.skip = castNumber(options.skip);\n    } catch (err) {\n      throw new CastError('Number', options.skip, 'skip');\n    }\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.explain = function(verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n  return this;\n};\n\n/**\n * Sets the [`allowDiskUse` option](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * ####Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.allowDiskUse = function(v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n  return this;\n};\n\n/**\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * ####Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.maxTimeMS = function(ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getFilter = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setQuery = function(val) {\n  this._conditions = val;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Sets the current update operation to new value.\n *\n * ####Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setUpdate = function(val) {\n  this._update = val;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n\n  while (i--) {\n    const op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  const options = utils.clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  // Apply schema-level `writeConcern` option\n  applyWriteConcern(model.schema, options);\n\n  const readPreference = get(model, 'schema.options.read');\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * ####Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.set = function(path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n    return this;\n  }\n\n  this._update = this._update || {};\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * ####Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n  if (update == null) {\n    return void 0;\n  }\n  const $set = update.$set;\n  if ($set == null) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n\n  return void 0;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * ####Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * ####Example:\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._castConditions = function() {\n  let sanitizeFilterOpt = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.db.options.sanitizeFilter;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.base.options.sanitizeFilter;\n  } else {\n    sanitizeFilterOpt = this._mongooseOptions.sanitizeFilter;\n  }\n\n  if (sanitizeFilterOpt) {\n    sanitizeFilter(this._conditions);\n  }\n\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  const fields = this._fieldsForExec();\n  const mongooseOptions = this._mongooseOptions;\n  const _this = this;\n  const userProvidedFields = _this._userProvidedFields || {};\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n  const completeManyOptions = Object.assign({}, {\n    session: get(this, 'options.session', null)\n  });\n\n  const cb = (err, docs) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (this.options.explain) {\n      return callback(null, docs);\n    }\n\n    if (!mongooseOptions.populate) {\n      return mongooseOptions.lean ?\n        callback(null, docs) :\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    }\n\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n\n    if (mongooseOptions.lean) {\n      return _this.model.populate(docs, pop, callback);\n    }\n\n    completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, (err, docs) => {\n      if (err != null) {\n        return callback(err);\n      }\n      _this.model.populate(docs, pop, callback);\n    });\n  };\n\n  const options = this._optionsForExec();\n  options.projection = this._fieldsForExec();\n  const filter = this._conditions;\n\n  this._collection.collection.find(filter, options, (err, cursor) => {\n    if (err != null) {\n      return cb(err);\n    }\n\n    if (options.explain) {\n      return cursor.explain(cb);\n    }\n    try {\n      return cursor.toArray(cb);\n    } catch (err) {\n      return cb(err);\n    }\n  });\n});\n\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\n *\n * ####Example\n *\n *     // Using async/await\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n *     // Using callbacks\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\n *\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  this.op = 'find';\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  const opts = { overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\nQuery.prototype._completeOne = function(doc, res, callback) {\n  if (!doc && !this.options.rawResult) {\n    return callback(null, null);\n  }\n\n  const model = this.model;\n  const projection = utils.clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {};\n  // `populate`, `lean`\n  const mongooseOptions = this._mongooseOptions;\n  // `rawResult`\n  const options = this.options;\n\n  if (options.explain) {\n    return callback(null, doc);\n  }\n\n  if (!mongooseOptions.populate) {\n    return mongooseOptions.lean ?\n      _completeOneLean(doc, res, options, callback) :\n      completeOne(model, doc, res, options, projection, userProvidedFields,\n        null, callback);\n  }\n\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n  if (mongooseOptions.lean) {\n    return model.populate(doc, pop, (err, doc) => {\n      if (err != null) {\n        return callback(err);\n      }\n      _completeOneLean(doc, res, options, callback);\n    });\n  }\n\n  completeOne(model, doc, res, options, projection, userProvidedFields, [], (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    model.populate(doc, pop, callback);\n  });\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(this, {}, (err, doc) => {\n    if (err) {\n      callback(err);\n      return null;\n    }\n\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\n  });\n});\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * ####Example\n *\n *     const query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  this.op = 'findOne';\n  this._validateOp();\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around countDocuments()\n *\n * @param {Function} [callback]\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around estimatedDocumentCount()\n *\n * @param {Function} [callback]\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = wrapThunk(function(callback) {\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  const options = this._optionsForExec();\n\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\n});\n\n/**\n * Specifies this query as a `count` query.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @deprecated\n * @param {Object} [filter] count documents that match this object\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(filter, callback) {\n  this.op = 'count';\n  this._validateOp();\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = undefined;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * ####Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api public\n */\n\nQuery.prototype.estimatedDocumentCount = function(options, callback) {\n  this.op = 'estimatedDocumentCount';\n  this._validateOp();\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * versus `count()`.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * ####Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count(callback);\n *\n *     query.countDocuments({ color: 'black' }, callback);\n *\n *     query.where('color', 'black').countDocuments(function(err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     });\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api public\n */\n\nQuery.prototype.countDocuments = function(conditions, options, callback) {\n  this.op = 'countDocuments';\n  this._validateOp();\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Thunk around distinct()\n *\n * @param {Function} [callback]\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n\n  const options = this._optionsForExec();\n\n  // don't pass in the conditions because we already merged them in\n  this._collection.collection.\n    distinct(this._distinct, this._conditions, options, callback);\n});\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  this.op = 'distinct';\n  this._validateOp();\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (field != null) {\n    this._distinct = field;\n  }\n\n  if (callback != null) {\n    this.exec(callback);\n  }\n\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation. `remove()` is\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\n *\n * This function does not trigger any middleware\n *\n * ####Example\n *\n *     Character.remove({ name: /Stark/ }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#remove()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.remove({ name: /Stark/ });\n *     // Number of docs deleted\n *     res.deletedCount;\n *\n * ####Note\n *\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\n * or call [`Query#exec()`](#query_Query-exec).\n *\n *     // not executed\n *     const query = Character.remove({ name: /Stark/ });\n *\n *     // executed\n *     Character.remove({ name: /Stark/ }, callback);\n *     Character.remove({ name: /Stark/ }).remove(callback);\n *\n *     // executed without a callback\n *     Character.exec();\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @deprecated\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB driver remove http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\n * @api public\n */\n\nQuery.prototype.remove = function(filter, callback) {\n  this.op = 'remove';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._remove = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.remove.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * ####Example\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n *     // Using callbacks:\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteOne http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function(filter, options, callback) {\n  this.op = 'deleteOne';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk for `deleteOne()`\n */\n\nQuery.prototype._deleteOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteOne.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * ####Example\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n *     // Using callbacks:\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * ####Example\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteMany http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function(filter, options, callback) {\n  this.op = 'deleteMany';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk around `deleteMany()`\n */\n\nQuery.prototype._deleteMany = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteMany.call(this, helpers.handleDeleteWriteOpResult(callback));\n});\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  const opts = pop ?\n    { populated: pop }\n    : undefined;\n\n  if (options.rawResult && doc == null) {\n    _init(null);\n    return null;\n  }\n\n  const casted = helpers.createModel(model, doc, fields, userProvidedFields, options);\n  try {\n    casted.$init(doc, opts, _init);\n  } catch (error) {\n    _init(error);\n  }\n\n  function _init(err) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n\n\n    if (options.rawResult) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n      return immediate(() => callback(null, res));\n    }\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n    immediate(() => callback(null, casted));\n  }\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  const schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any) to the callback. The query executes if\n * `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options = options ? utils.clone(options) : {};\n\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n\n\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  this._findAndModify('update', callback);\n});\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to\n * the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @instance\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions, callback) // executes\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete(callback)   // executes\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndDelete = function(conditions, options, callback) {\n  this.op = 'findOneAndDelete';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndDelete()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndDelete = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  let fields = null;\n\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const doc = res.value;\n\n    return this._completeOne(doc, res, callback);\n  }));\n});\n\n/**\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(callback); // executes\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\n  this.op = 'findOneAndReplace';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = void 0;\n      }\n      break;\n    case 2:\n      if (typeof replacement === 'function') {\n        callback = replacement;\n        replacement = void 0;\n      }\n      break;\n    case 1:\n      if (typeof filter === 'function') {\n        callback = filter;\n        filter = void 0;\n        replacement = void 0;\n        options = void 0;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (replacement != null) {\n    if (hasDollarKeys(replacement)) {\n      throw new Error('The replacement document must not contain atomic operators.');\n    }\n    this._mergeUpdate(replacement);\n  }\n\n  options = options || {};\n\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n  this.setOptions({ overwrite: true });\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndReplace()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndReplace = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  convertNewToReturnDocument(options);\n  let fields = null;\n\n  let castedDoc = new this.model(this._update, null, true);\n  this._update = castedDoc;\n\n  this._applyPaths();\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  castedDoc.$validate(err => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    if (castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n\n      return this._completeOne(doc, res, callback);\n    }));\n  });\n});\n\n/*!\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  }\n  // Temporary since driver 4.0.0-beta does not support `returnDocument`\n  if (typeof options.returnDocument === 'string') {\n    options.returnOriginal = options.returnDocument === 'before';\n  }\n}\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    callback(this.error());\n    return;\n  }\n\n  this._findAndModify('remove', callback);\n});\n\n/*!\n * Get options from query opts, falling back to the base mongoose object.\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n\n  if (option in opts) {\n    return opts[option];\n  }\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n  return def;\n}\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  const model = this.model;\n  const schema = model.schema;\n  const _this = this;\n  let fields;\n\n  const castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  _castArrayFilters(this);\n\n  const opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts) && !('returnOriginal' in opts) && !('returnDocument' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    if (!isOverwriting) {\n      this._update = castDoc(this, opts.overwrite);\n      const _opts = Object.assign({}, opts, {\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n      });\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\n      if (!this._update || Object.keys(this._update).length === 0) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          const doc = utils.clone(castedQuery);\n          delete doc._id;\n          this._update = { $set: doc };\n        } else {\n          this._executionStack = null;\n          this.findOne(callback);\n          return this;\n        }\n      } else if (this._update instanceof Error) {\n        return callback(this._update);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n          delete this._update.$set;\n        }\n      }\n    }\n\n    if (Array.isArray(opts.arrayFilters)) {\n      opts.arrayFilters = removeUnusedArrayFilters(this._update, opts.arrayFilters);\n    }\n  }\n\n  this._applyPaths();\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.projection = this._castFields(fields);\n    if (opts.projection instanceof Error) {\n      return callback(opts.projection);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  const cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    _this._completeOne(doc, res, callback);\n  };\n\n  const runValidators = _getOption(this, 'runValidators', false);\n\n  // Bypass mquery\n  const collection = _this._collection.collection;\n  convertNewToReturnDocument(opts);\n\n  if (type === 'remove') {\n    collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n\n    return this;\n  }\n\n  // honors legacy overwrite option for backward compatibility\n  const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\n\n  if (runValidators) {\n    this.validate(this._update, opts, isOverwriting, error => {\n      if (error) {\n        return callback(error);\n      }\n      if (this._update && this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    });\n  } else {\n    if (this._update && this._update.toBSON) {\n      this._update = this._update.toBSON();\n    }\n    collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (doc == null || (typeof doc === 'object' && Object.keys(doc).length === 0)) {\n    return;\n  }\n\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  const sort = [];\n\n  for (const key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/*!\n * ignore\n */\n\nfunction _updateThunk(op, callback) {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  const castedQuery = this._conditions;\n  const options = this._optionsForExec(this.model);\n\n  this._update = utils.clone(this._update, options);\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    if (op === 'updateOne' || op === 'updateMany') {\n      return callback(new MongooseError('The MongoDB server disallows ' +\n        'overwriting documents using `' + op + '`. See: ' +\n        'https://mongoosejs.com/docs/deprecations.html#update'));\n    }\n    this._update = new this.model(this._update, null, true);\n  } else {\n    this._update = castDoc(this, options.overwrite);\n\n    if (this._update instanceof Error) {\n      callback(this._update);\n      return null;\n    }\n\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      callback(null, { acknowledged: false });\n      return null;\n    }\n\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\n      this._update, _opts);\n  }\n\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    this.validate(this._update, options, isOverwriting, err => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      this._collection[op](castedQuery, this._update, options, callback);\n    });\n    return null;\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  this._collection[op](castedQuery, this._update, options, callback);\n  return null;\n}\n\n/*!\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\n  return promiseOrCallback(callback, cb => {\n    try {\n      if (isOverwriting) {\n        castedDoc.$validate(cb);\n      } else {\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\n      }\n    } catch (err) {\n      immediate(function() {\n        cb(err);\n      });\n    }\n  });\n};\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'update', callback);\n});\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n});\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n});\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n});\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators` (boolean) if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert` (boolean) `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `read`\n *  - `writeConcern`\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op. The update operation will be ignored and the callback executed without sending the command to MongoDB.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n *     const q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n *     // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(filter, doc, options, cb) // executes\n *     update(filter, doc, options)\n *     update(filter, doc, cb) // executes\n *     update(filter, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes\n *     update()\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * ####Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except it does not support the `multi` option.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * ####Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * ####Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  query._validateOp();\n  filter = utils.toObject(filter);\n  doc = doc || {};\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) &&\n      filter != null &&\n      filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    query.exec(callback);\n\n    return query;\n  }\n\n  return Query.base[op].call(query, filter, void 0, options, callback);\n}\n\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `transform()` will run **after** any post hooks.\n *\n * ####Example:\n *\n *     const res = await MyModel.findOne().transform(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method transform\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\nQuery.prototype.transform = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * ####Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\nQuery.prototype.orFail = function(err) {\n  this.transform(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'replaceOne':\n      case 'update':\n      case 'updateMany':\n      case 'updateOne':\n        if (get(res, 'modifiedCount') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndDelete':\n      case 'findOneAndRemove':\n        if (get(res, 'lastErrorObject.n') === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if (get(res, 'lastErrorObject.updatedExisting') === false) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'deleteMany':\n      case 'deleteOne':\n      case 'remove':\n        if (res.deletedCount === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return res;\n  });\n  return this;\n};\n\n/*!\n * Get the error to throw for `orFail()`\n */\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n\n  return err;\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  const _this = this;\n  // Ensure that `exec()` is the first thing that shows up in\n  // the stack when cast errors happen.\n  const castError = new CastError();\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  if (this.op == null) {\n    throw new Error('Query must have `op` before executing');\n  }\n  this._validateOp();\n\n  callback = this.model.$handleCallbackError(callback);\n\n  return promiseOrCallback(callback, (cb) => {\n    cb = this.model.$wrapCallback(cb);\n\n    if (!_this.op) {\n      cb();\n      return;\n    }\n\n    this._hooks.execPre('exec', this, [], (error) => {\n      if (error != null) {\n        return cb(_cleanCastErrorStack(castError, error));\n      }\n      let thunk = '_' + this.op;\n      if (this.op === 'update') {\n        thunk = '_execUpdate';\n      } else if (this.op === 'distinct') {\n        thunk = '__distinct';\n      }\n      this[thunk].call(this, (error, res) => {\n        if (error) {\n          return cb(_cleanCastErrorStack(castError, error));\n        }\n\n        this._hooks.execPost('exec', this, [], {}, (error) => {\n          if (error) {\n            return cb(_cleanCastErrorStack(castError, error));\n          }\n\n          cb(null, res);\n        });\n      });\n    });\n  }, this.model.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _cleanCastErrorStack(castError, error) {\n  if (error instanceof CastError) {\n    castError.copy(error);\n    return castError;\n  }\n\n  return error;\n}\n\n/*!\n * ignore\n */\n\nfunction _wrapThunkCallback(query, cb) {\n  return function(error, res) {\n    if (error != null) {\n      return cb(error);\n    }\n\n    for (const fn of query._transforms) {\n      try {\n        res = fn(res);\n      } catch (error) {\n        return cb(error);\n      }\n    }\n\n    return cb(null, res);\n  };\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.pre = function(fn) {\n  this._hooks.pre('exec', fn);\n  return this;\n};\n\n/**\n * Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * ####Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.post = function(fn) {\n  this._hooks.post('exec', fn);\n  return this;\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  let schema = this.schema;\n\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n  if (this._mongooseOptions.overwriteDiscriminatorKey &&\n      obj[discriminatorKey] != null &&\n      baseSchema.discriminators) {\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n\n  let upsert;\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n\n  const filter = this._conditions;\n  if (schema != null &&\n      utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) &&\n      typeof filter[schema.options.discriminatorKey] !== 'object' &&\n      schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] ||\n      (byValue && byValue.schema) ||\n      schema;\n  }\n\n  return castUpdate(schema, obj, {\n    overwrite: overwrite,\n    strict: this._mongooseOptions.strict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters\n  }, this, this._conditions);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n\n  const res = utils.populate.apply(null, arguments);\n\n  // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n\n    for (const populateOptions of res) {\n      if (readConcern != null && get(populateOptions, 'options.readConcern') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n      if (readPref != null && get(populateOptions, 'options.readPreference') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n\n  const opts = this._mongooseOptions;\n\n  if (opts.lean != null) {\n    const lean = opts.lean;\n    for (const populateOptions of res) {\n      if (get(populateOptions, 'options.lean') == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  const pop = opts.populate;\n\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n\n    pop[populateOptions.path] = populateOptions;\n  }\n  return this;\n};\n\n/**\n * Gets a list of paths to be populated by this query\n *\n * ####Example:\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * ####Example:\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (obj != null &&\n      obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n\n  try {\n    return cast(model.schema, obj, {\n      upsert: this.options && this.options.upsert,\n      strict: (this.options && 'strict' in this.options) ?\n        this.options.strict :\n        get(model, 'schema.options.strict', null),\n      strictQuery: (this.options && 'strictQuery' in this.options) ?\n        this.options.strictQuery :\n        (this.options && 'strict' in this.options) ?\n          this.options.strict :\n          get(model, 'schema.options.strictQuery', null)\n    }, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n\n  let _selectPopulatedPaths = true;\n\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * ####Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {\n *       console.log(doc);\n *     }\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({ projection: this._fieldsForExec() });\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  const options = Object.assign({}, this._optionsForExec(), {\n    projection: this.projection()\n  });\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this, options))._markError(err);\n  }\n\n  return new QueryCursor(this, options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable(); // true\n *     query.tailable(true);\n *     query.tailable(false);\n *\n *     // Set both `tailable` and `awaitData` options\n *     query.tailable({ awaitData: true });\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Boolean} [opts.awaitData] false by default. Set to true to keep the cursor open even if there's no data.\n * @param {Number} [opts.maxAwaitTimeMS] the maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitData : true }) as well as the\n  // tailable(true, {awaitData :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitData' || key === 'awaitdata') { // backwards compat, see gh-10875\n        // For backwards compatibility\n        this.options['awaitData'] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({ center: arguments[0], spherical: sphere });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({ center: arguments[1], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/**\n * Specifies a `$polygon` condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * ####Example\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.model;\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryhelpers');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](/docs/api.html#query_Query-cursor) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.query = query;\n  const _this = this;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = options || {};\n\n  model.hooks.execPre('find', query, (err) => {\n    if (err != null) {\n      _this._markError(err);\n      _this.listeners('error').length > 0 && _this.emit('error', err);\n      return;\n    }\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      this.options.cursor = options.cursor || {};\n      this.options.cursor.batchSize = options.batchSize;\n\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    model.collection.find(query._conditions, this.options, (err, cursor) => {\n      if (err != null) {\n        _this._markError(err);\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n        return;\n      }\n\n      if (_this._error) {\n        cursor.close(function() {});\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nQueryCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @api public\n * @method map\n */\n\nQueryCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nQueryCursor.prototype.close = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  }, this.model.events);\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return cb(error);\n      }\n      cb(null, doc);\n    });\n  }, this.model.events);\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * ####Example\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        return ctx.cursor.next(_onNext.bind({ ctx, callback }));\n      }\n    } else {\n      return ctx.cursor.next(function(error, doc) {\n        if (error) {\n          return callback(error);\n        }\n        if (!doc) {\n          return callback(null, null);\n        }\n\n        if (!ctx.query._mongooseOptions.populate) {\n          return _nextDoc(ctx, doc, null, callback);\n        }\n\n        ctx.query.model.populate(doc, ctx._pop, function(err, doc) {\n          if (err) {\n            return callback(err);\n          }\n          return _nextDoc(ctx, doc, ctx._pop, callback);\n        });\n      });\n    }\n  } else {\n    ctx.once('error', cb);\n\n    ctx.once('cursor', function(cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n\n  this.ctx._batchDocs.push(doc);\n\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next(_onNext.bind(this)));\n    }\n    this.ctx.cursor.next(_onNext.bind(this));\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  const _this = this;\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop, function(err) {\n    if (err) {\n      return _this.callback(err);\n    }\n\n    _nextDoc(_this.ctx, _this.ctx._batchDocs.shift(), _this.ctx._pop, _this.callback);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n\n  ctx.query._completeOne(doc, null, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function(cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\nmodule.exports = QueryCursor;\n","\n\n/*!\n * Module dependencies.\n */\n\nconst immediate = require('../immediate');\nconst promiseOrCallback = require('../promiseOrCallback');\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} next the thunk to call to get the next document\n * @param {Function} fn\n * @param {Object} options\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nmodule.exports = function eachAsync(next, fn, options, callback) {\n  const parallel = options.parallel || 1;\n  const batchSize = options.batchSize;\n  const enqueue = asyncQueue();\n\n  return promiseOrCallback(callback, cb => {\n    if (batchSize != null) {\n      if (typeof batchSize !== 'number') {\n        throw new TypeError('batchSize must be a number');\n      }\n      if (batchSize < 1) {\n        throw new TypeError('batchSize must be at least 1');\n      }\n      if (batchSize !== Math.floor(batchSize)) {\n        throw new TypeError('batchSize must be a positive integer');\n      }\n    }\n\n    iterate(cb);\n  });\n\n  function iterate(finalCallback) {\n    let drained = false;\n    let handleResultsInProgress = 0;\n    let currentDocumentIndex = 0;\n    let documentsBatch = [];\n\n    let error = null;\n    for (let i = 0; i < parallel; ++i) {\n      enqueue(fetch);\n    }\n\n    function fetch(done) {\n      if (drained || error) {\n        return done();\n      }\n\n      next(function(err, doc) {\n        if (drained || error != null) {\n          return done();\n        }\n        if (err != null) {\n          error = err;\n          finalCallback(err);\n          return done();\n        }\n        if (doc == null) {\n          drained = true;\n          if (handleResultsInProgress <= 0) {\n            finalCallback(null);\n          } else if (batchSize != null && documentsBatch.length) {\n            handleNextResult(documentsBatch, currentDocumentIndex++, handleNextResultCallBack);\n          }\n          return done();\n        }\n\n        ++handleResultsInProgress;\n\n        // Kick off the subsequent `next()` before handling the result, but\n        // make sure we know that we still have a result to handle re: #8422\n        immediate(() => done());\n\n        if (batchSize != null) {\n          documentsBatch.push(doc);\n        }\n\n        // If the current documents size is less than the provided patch size don't process the documents yet\n        if (batchSize != null && documentsBatch.length !== batchSize) {\n          setTimeout(() => enqueue(fetch), 0);\n          return;\n        }\n\n        const docsToProcess = batchSize != null ? documentsBatch : doc;\n\n        function handleNextResultCallBack(err) {\n          if (batchSize != null) {\n            handleResultsInProgress -= documentsBatch.length;\n            documentsBatch = [];\n          } else {\n            --handleResultsInProgress;\n          }\n          if (err != null) {\n            error = err;\n            return finalCallback(err);\n          }\n          if (drained && handleResultsInProgress <= 0) {\n            return finalCallback(null);\n          }\n\n          setTimeout(() => enqueue(fetch), 0);\n        }\n\n        handleNextResult(docsToProcess, currentDocumentIndex++, handleNextResultCallBack);\n      });\n    }\n  }\n\n  function handleNextResult(doc, i, callback) {\n    const promise = fn(doc, i);\n    if (promise && typeof promise.then === 'function') {\n      promise.then(\n        function() { callback(null); },\n        function(error) { callback(error || new Error('`eachAsync()` promise rejected without error')); });\n    } else {\n      callback(null);\n    }\n  }\n};\n\n// `next()` can only execute one at a time, so make sure we always execute\n// `next()` in series, while still allowing multiple `fn()` instances to run\n// in parallel.\nfunction asyncQueue() {\n  const _queue = [];\n  let inProgress = null;\n  let id = 0;\n\n  return function enqueue(fn) {\n    if (_queue.length === 0 && inProgress == null) {\n      inProgress = id++;\n      return fn(_step);\n    }\n    _queue.push(fn);\n  };\n\n  function _step() {\n    inProgress = null;\n    if (_queue.length > 0) {\n      inProgress = id++;\n      const fn = _queue.shift();\n      fn(_step);\n    }\n  }\n}\n","\n\nconst utils = require('../../utils');\n\nmodule.exports = function applyGlobalMaxTimeMS(options, model) {\n  if (utils.hasUserDefinedProperty(options, 'maxTimeMS')) {\n    return;\n  }\n\n  if (utils.hasUserDefinedProperty(model.db.options, 'maxTimeMS')) {\n    options.maxTimeMS = model.db.options.maxTimeMS;\n  } else if (utils.hasUserDefinedProperty(model.base.options, 'maxTimeMS')) {\n    options.maxTimeMS = model.base.options.maxTimeMS;\n  }\n};","\n\nconst get = require('../get');\n\nmodule.exports = function applyWriteConcern(schema, options) {\n  const writeConcern = get(schema, 'options.writeConcern', {});\n  if (Object.keys(writeConcern).length != 0) {\n    options.writeConcern = {};\n    if (!('w' in options) && writeConcern.w != null) {\n      options.writeConcern.w = writeConcern.w;\n    }\n    if (!('j' in options) && writeConcern.j != null) {\n      options.writeConcern.j = writeConcern.j;\n    }\n    if (!('wtimeout' in options) && writeConcern.wtimeout != null) {\n      options.writeConcern.wtimeout = writeConcern.wtimeout;\n    }\n  }\n  else {\n    if (!('w' in options) && writeConcern.w != null) {\n      options.w = writeConcern.w;\n    }\n    if (!('j' in options) && writeConcern.j != null) {\n      options.j = writeConcern.j;\n    }\n    if (!('wtimeout' in options) && writeConcern.wtimeout != null) {\n      options.wtimeout = writeConcern.wtimeout;\n    }\n  }\n};\n","\n\nconst castFilterPath = require('../query/castFilterPath');\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst getPath = require('../schema/getPath');\nconst updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');\n\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  let strictQuery = schema.options.strict;\n  if (query._mongooseOptions.strict != null) {\n    strictQuery = query._mongooseOptions.strict;\n  }\n  if (schema._userProvidedOptions.strictQuery != null) {\n    strictQuery = schema._userProvidedOptions.strictQuery;\n  }\n  if (query._mongooseOptions.strictQuery != null) {\n    strictQuery = query._mongooseOptions.strictQuery;\n  }\n\n  _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query);\n};\n\nfunction _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query) {\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n    for (const key of Object.keys(filter)) {\n      if (key === '$and' || key === '$or') {\n        _castArrayFilters(filter[key], schema, strictQuery, updatedPathsByFilter, query);\n        continue;\n      }\n      if (filter[key] == null) {\n        continue;\n      }\n      if (updatedPathsByFilter[key] === null) {\n        continue;\n      }\n      if (Object.keys(updatedPathsByFilter).length === 0) {\n        continue;\n      }\n      const dot = key.indexOf('.');\n      let filterPath = dot === -1 ?\n        updatedPathsByFilter[key] + '.0' :\n        updatedPathsByFilter[key.substr(0, dot)] + '.0' + key.substr(dot);\n      if (filterPath == null) {\n        throw new Error(`Filter path not found for ${key}`);\n      }\n\n      // If there are multiple array filters in the path being updated, make sure\n      // to replace them so we can get the schema path.\n      filterPath = cleanPositionalOperators(filterPath);\n      const schematype = getPath(schema, filterPath);\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        }\n        // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(filter[key]);\n      }\n    }\n  }\n}","\n\nconst isOperator = require('./isOperator');\n\nmodule.exports = function castFilterPath(query, schematype, val) {\n  const ctx = query;\n  const any$conditionals = Object.keys(val).some(isOperator);\n\n  if (!any$conditionals) {\n    return schematype.castForQueryWrapper({\n      val: val,\n      context: ctx\n    });\n  }\n\n  const ks = Object.keys(val);\n\n  let k = ks.length;\n\n  while (k--) {\n    const $cond = ks[k];\n    const nested = val[$cond];\n\n    if ($cond === '$not') {\n      if (nested && schematype && !schematype.caster) {\n        const _keys = Object.keys(nested);\n        if (_keys.length && isOperator(_keys[0])) {\n          for (const key of Object.keys(nested)) {\n            nested[key] = schematype.castForQueryWrapper({\n              $conditional: key,\n              val: nested[key],\n              context: ctx\n            });\n          }\n        } else {\n          val[$cond] = schematype.castForQueryWrapper({\n            $conditional: $cond,\n            val: nested,\n            context: ctx\n          });\n        }\n        continue;\n      }\n      // cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);\n    } else {\n      val[$cond] = schematype.castForQueryWrapper({\n        $conditional: $cond,\n        val: nested,\n        context: ctx\n      });\n    }\n  }\n\n  return val;\n};","\n\n/*!\n * Behaves like `Schema#path()`, except for it also digs into arrays without\n * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.\n */\n\nmodule.exports = function getPath(schema, path) {\n  let schematype = schema.path(path);\n  if (schematype != null) {\n    return schematype;\n  }\n\n  const pieces = path.split('.');\n  let cur = '';\n  let isArray = false;\n\n  for (const piece of pieces) {\n    if (/^\\d+$/.test(piece) && isArray) {\n      continue;\n    }\n    cur = cur.length === 0 ? piece : cur + '.' + piece;\n\n    schematype = schema.path(cur);\n    if (schematype != null && schematype.schema) {\n      schema = schematype.schema;\n      cur = '';\n      if (schematype.$isMongooseDocumentArray) {\n        isArray = true;\n      }\n    }\n  }\n\n  return schematype;\n};","\n\nconst modifiedPaths = require('./modifiedPaths');\n\nmodule.exports = function updatedPathsByArrayFilter(update) {\n  if (update == null) {\n    return {};\n  }\n  const updatedPaths = modifiedPaths(update);\n\n  return Object.keys(updatedPaths).reduce((cur, path) => {\n    const matches = path.match(/\\$\\[[^\\]]+\\]/g);\n    if (matches == null) {\n      return cur;\n    }\n    for (const match of matches) {\n      const firstMatch = path.indexOf(match);\n      if (firstMatch !== path.lastIndexOf(match)) {\n        throw new Error(`Path '${path}' contains the same array filter multiple times`);\n      }\n      cur[match.substring(2, match.length - 1)] = path.\n        substr(0, firstMatch - 1).\n        replace(/\\$\\[[^\\]]+\\]/g, '0');\n    }\n    return cur;\n  }, {});\n};","\n\nconst _modifiedPaths = require('../common').modifiedPaths;\n\n/**\n * Given an update document with potential update operators (`$set`, etc.)\n * returns an object whose keys are the directly modified paths.\n *\n * If there are any top-level keys that don't start with `$`, we assume those\n * will get wrapped in a `$set`. The Mongoose Query is responsible for wrapping\n * top-level keys in `$set`.\n *\n * @param {Object} update\n * @return {Object} modified\n */\n\nmodule.exports = function modifiedPaths(update) {\n  const keys = Object.keys(update);\n  const res = {};\n\n  const withoutDollarKeys = {};\n  for (const key of keys) {\n    if (key.startsWith('$')) {\n      _modifiedPaths(update[key], '', res);\n      continue;\n    }\n    withoutDollarKeys[key] = update[key];\n  }\n\n  _modifiedPaths(withoutDollarKeys, '', res);\n\n  return res;\n};\n","\n\nconst CastError = require('../../error/cast');\nconst MongooseError = require('../../error/mongooseError');\nconst StrictModeError = require('../../error/strict');\nconst ValidationError = require('../../error/validation');\nconst castNumber = require('../../cast/number');\nconst cast = require('../../cast');\nconst getConstructorName = require('../getConstructorName');\nconst getEmbeddedDiscriminatorPath = require('./getEmbeddedDiscriminatorPath');\nconst handleImmutable = require('./handleImmutable');\nconst moveImmutableProperties = require('../update/moveImmutableProperties');\nconst schemaMixedSymbol = require('../../schema/symbols').schemaMixedSymbol;\nconst setDottedPath = require('../path/setDottedPath');\nconst utils = require('../../utils');\n\n/*!\n * Casts an update op based on the given schema\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} options\n * @param {Boolean} [options.overwrite] defaults to false\n * @param {Boolean|String} [options.strict] defaults to true\n * @param {Query} context passed to setters\n * @return {Boolean} true iff the update is non-empty\n */\nmodule.exports = function castUpdate(schema, obj, options, context, filter) {\n  if (obj == null) {\n    return undefined;\n  }\n  options = options || {};\n  // Update pipeline\n  if (Array.isArray(obj)) {\n    const len = obj.length;\n    for (let i = 0; i < len; ++i) {\n      const ops = Object.keys(obj[i]);\n      for (const op of ops) {\n        obj[i][op] = castPipelineOperator(op, obj[i][op]);\n      }\n    }\n    return obj;\n  }\n  if (schema.options.strict === 'throw' && obj.hasOwnProperty(schema.options.discriminatorKey)) {\n    throw new StrictModeError(schema.options.discriminatorKey);\n  } else if (context._mongooseOptions != null && !context._mongooseOptions.overwriteDiscriminatorKey) {\n    delete obj[schema.options.discriminatorKey];\n  }\n  if (options.upsert) {\n    moveImmutableProperties(schema, obj, context);\n  }\n\n  const ops = Object.keys(obj);\n  let i = ops.length;\n  const ret = {};\n  let val;\n  let hasDollarKey = false;\n  const overwrite = options.overwrite;\n\n  filter = filter || {};\n  while (i--) {\n    const op = ops[i];\n    // if overwrite is set, don't do any of the special $set stuff\n    if (op[0] !== '$' && !overwrite) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if (op === '$set') {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n  // cast each value\n  i = ops.length;\n  while (i--) {\n    const op = ops[i];\n    val = ret[op];\n    hasDollarKey = hasDollarKey || op.startsWith('$');\n\n    if (val &&\n        typeof val === 'object' &&\n        !Buffer.isBuffer(val) &&\n        (!overwrite || hasDollarKey)) {\n      walkUpdatePath(schema, val, op, options, context, filter);\n    } else if (overwrite && ret && typeof ret === 'object') {\n      walkUpdatePath(schema, ret, '$set', options, context, filter);\n    } else {\n      const msg = 'Invalid atomic update value for ' + op + '. '\n          + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n\n    if (op.startsWith('$') && utils.isEmptyObject(val)) {\n      delete ret[op];\n    }\n  }\n\n  if (Object.keys(ret).length === 0 &&\n      options.upsert &&\n      Object.keys(filter).length > 0) {\n    // Trick the driver into allowing empty upserts to work around\n    // https://github.com/mongodb/node-mongodb-native/pull/2490\n    return { $setOnInsert: filter };\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction castPipelineOperator(op, val) {\n  if (op === '$unset') {\n    if (typeof val !== 'string' && (!Array.isArray(val) || val.find(v => typeof v !== 'string'))) {\n      throw new MongooseError('Invalid $unset in pipeline, must be ' +\n        ' a string or an array of strings');\n    }\n    return val;\n  }\n  if (op === '$project') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid $project in pipeline, must be an object');\n    }\n    return val;\n  }\n  if (op === '$addFields' || op === '$set') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  } else if (op === '$replaceRoot' || op === '$replaceWith') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  }\n\n  throw new MongooseError('Invalid update pipeline operator: \"' + op + '\"');\n}\n\n/*!\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Schema} schema\n * @param {Object} obj - part of a query\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {Object} options\n * @param {Boolean|String} [options.strict]\n * @param {Query} context\n * @param {String} pref - path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nfunction walkUpdatePath(schema, obj, op, options, context, filter, pref) {\n  const strict = options.strict;\n  const prefix = pref ? pref + '.' : '';\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys = false;\n  let schematype;\n  let key;\n  let val;\n\n  let aggregatedError = null;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    // `$pull` is special because we need to cast the RHS as a query, not as\n    // an update.\n    if (op === '$pull') {\n      schematype = schema._getSchema(prefix + key);\n      if (schematype != null && schematype.schema != null) {\n        obj[key] = cast(schematype.schema, obj[key], options, context);\n        hasKeys = true;\n        continue;\n      }\n    }\n\n    if (getConstructorName(val) === 'Object') {\n      // watch for embedded doc schemas\n      schematype = schema._getSchema(prefix + key);\n\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, prefix + key, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n        }\n      }\n\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      if (schematype && schematype.caster && op in castOps) {\n        // embedded doc schema\n        if ('$each' in val) {\n          hasKeys = true;\n          try {\n            obj[key] = {\n              $each: castUpdateVal(schematype, val.$each, op, key, context, prefix + key)\n            };\n          } catch (error) {\n            aggregatedError = _handleCastError(error, context, key, aggregatedError);\n          }\n\n          if (val.$slice != null) {\n            obj[key].$slice = val.$slice | 0;\n          }\n\n          if (val.$sort) {\n            obj[key].$sort = val.$sort;\n          }\n\n          if (val.$position != null) {\n            obj[key].$position = castNumber(val.$position);\n          }\n        } else {\n          if (schematype != null && schematype.$isSingleNested) {\n            const _strict = strict == null ? schematype.schema.options.strict : strict;\n            try {\n              obj[key] = schematype.castForQuery(val, context, { strict: _strict });\n            } catch (error) {\n              aggregatedError = _handleCastError(error, context, key, aggregatedError);\n            }\n          } else {\n            try {\n              obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n            } catch (error) {\n              aggregatedError = _handleCastError(error, context, key, aggregatedError);\n            }\n          }\n\n          if (obj[key] === void 0) {\n            delete obj[key];\n            continue;\n          }\n\n          hasKeys = true;\n        }\n      } else if ((op === '$currentDate') || (op in castOps && schematype)) {\n        // $currentDate can take an object\n        try {\n          obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      } else {\n        const pathToCheck = (prefix + key);\n        const v = schema._getPathType(pathToCheck);\n        let _strict = strict;\n        if (v && v.schema && _strict == null) {\n          _strict = v.schema.options.strict;\n        }\n\n        if (v.pathType === 'undefined') {\n          if (_strict === 'throw') {\n            throw new StrictModeError(pathToCheck);\n          } else if (_strict) {\n            delete obj[key];\n            continue;\n          }\n        }\n\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= walkUpdatePath(schema, val, op, options, context, filter, prefix + key) ||\n          (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      const checkPath = (key === '$each' || key === '$or' || key === '$and' || key === '$in') ?\n        pref : prefix + key;\n      schematype = schema._getSchema(checkPath);\n\n      // You can use `$setOnInsert` with immutable keys\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      let pathDetails = schema._getPathType(checkPath);\n\n      // If no schema type, check for embedded discriminators because the\n      // filter or update may imply an embedded discriminator type. See #8378\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, checkPath, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n          pathDetails = _res.type;\n        }\n      }\n\n      let isStrict = strict;\n      if (pathDetails && pathDetails.schema && strict == null) {\n        isStrict = pathDetails.schema.options.strict;\n      }\n\n      const skip = isStrict &&\n        !schematype &&\n        !/real|nested/.test(pathDetails.pathType);\n\n      if (skip) {\n        // Even if strict is `throw`, avoid throwing an error because of\n        // virtuals because of #6731\n        if (isStrict === 'throw' && schema.virtuals[checkPath] == null) {\n          throw new StrictModeError(prefix + key);\n        } else {\n          delete obj[key];\n        }\n      } else {\n        // gh-1845 temporary fix: ignore $rename. See gh-3027 for tracking\n        // improving this.\n        if (op === '$rename') {\n          hasKeys = true;\n          continue;\n        }\n\n        try {\n          if (prefix.length === 0 || key.indexOf('.') === -1) {\n            obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n          } else {\n            // Setting a nested dotted path that's in the schema. We don't allow paths with '.' in\n            // a schema, so replace the dotted path with a nested object to avoid ending up with\n            // dotted properties in the updated object. See (gh-10200)\n            setDottedPath(obj, key, castUpdateVal(schematype, val, op, key, context, prefix + key));\n            delete obj[key];\n          }\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (Array.isArray(obj[key]) && (op === '$addToSet' || op === '$push') && key !== '$each') {\n          if (schematype && schematype.caster && !schematype.caster.$isMongooseArray) {\n            obj[key] = { $each: obj[key] };\n          }\n        }\n\n        if (obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      }\n    }\n  }\n\n  if (aggregatedError != null) {\n    throw aggregatedError;\n  }\n\n  return hasKeys;\n}\n\n/*!\n * ignore\n */\n\nfunction _handleCastError(error, query, key, aggregatedError) {\n  if (typeof query !== 'object' || !query.options.multipleCastError) {\n    throw error;\n  }\n  aggregatedError = aggregatedError || new ValidationError();\n  aggregatedError.addError(key, error);\n  return aggregatedError;\n}\n\n/*!\n * These operators should be cast to numbers instead\n * of their path schema type.\n */\n\nconst numberOps = {\n  $pop: 1,\n  $inc: 1\n};\n\n/*!\n * These ops require no casting because the RHS doesn't do anything.\n */\n\nconst noCastOps = {\n  $unset: 1\n};\n\n/*!\n * These operators require casting docs\n * to real Documents for Update operations.\n */\n\nconst castOps = {\n  $push: 1,\n  $addToSet: 1,\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * ignore\n */\n\nconst overwriteOps = {\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {SchemaType} schema\n * @param {Object} val\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} $conditional\n * @param {Query} context\n * @api private\n */\n\nfunction castUpdateVal(schema, val, op, $conditional, context, path) {\n  if (!schema) {\n    // non-existing schema path\n    if (op in numberOps) {\n      try {\n        return castNumber(val);\n      } catch (err) {\n        throw new CastError('number', val, path);\n      }\n    }\n    return val;\n  }\n\n  const cond = schema.caster && op in castOps &&\n      (utils.isObject(val) || Array.isArray(val));\n  if (cond && !overwriteOps[op]) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    let schemaArrayDepth = 0;\n    let cur = schema;\n    while (cur.$isMongooseArray) {\n      ++schemaArrayDepth;\n      cur = cur.caster;\n    }\n    let arrayDepth = 0;\n    let _val = val;\n    while (Array.isArray(_val)) {\n      ++arrayDepth;\n      _val = _val[0];\n    }\n\n    const additionalNesting = schemaArrayDepth - arrayDepth;\n    while (arrayDepth < schemaArrayDepth) {\n      val = [val];\n      ++arrayDepth;\n    }\n\n    let tmp = schema.applySetters(Array.isArray(val) ? val : [val], context);\n\n    for (let i = 0; i < additionalNesting; ++i) {\n      tmp = tmp[0];\n    }\n    return tmp;\n  }\n\n  if (op in noCastOps) {\n    return val;\n  }\n  if (op in numberOps) {\n    // Null and undefined not allowed for $pop, $inc\n    if (val == null) {\n      throw new CastError('number', val, schema.path);\n    }\n    if (op === '$inc') {\n      // Support `$inc` with long, int32, etc. (gh-4283)\n      return schema.castForQueryWrapper({\n        val: val,\n        context: context\n      });\n    }\n    try {\n      return castNumber(val);\n    } catch (error) {\n      throw new CastError('number', val, schema.path);\n    }\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return { $type: val.$type };\n    }\n    return Boolean(val);\n  }\n\n  if (/^\\$/.test($conditional)) {\n    return schema.castForQueryWrapper({\n      $conditional: $conditional,\n      val: val,\n      context: context\n    });\n  }\n\n  if (overwriteOps[op]) {\n    return schema.castForQueryWrapper({\n      val: val,\n      context: context,\n      $skipQueryCastForUpdate: val != null && schema.$isMongooseArray && schema.$fullPath != null && !schema.$fullPath.match(/\\d+$/),\n      $applySetters: schema[schemaMixedSymbol] != null\n    });\n  }\n\n  return schema.castForQueryWrapper({ val: val, context: context });\n}\n","\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst get = require('../get');\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\nconst updatedPathsByArrayFilter = require('../update/updatedPathsByArrayFilter');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(schema, update, filter, path, options) {\n  const parts = path.split('.');\n  let schematype = null;\n  let type = 'adhocOrUndefined';\n\n  filter = filter || {};\n  update = update || {};\n  const arrayFilters = options != null && Array.isArray(options.arrayFilters) ?\n    options.arrayFilters : [];\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = cleanPositionalOperators(parts.slice(0, i + 1).join('.'));\n    schematype = schema.path(subpath);\n    if (schematype == null) {\n      continue;\n    }\n\n    type = schema.pathType(subpath);\n    if ((schematype.$isSingleNested || schematype.$isMongooseDocumentArrayElement) &&\n        schematype.schema.discriminators != null) {\n      const key = get(schematype, 'schema.options.discriminatorKey');\n      const discriminatorValuePath = subpath + '.' + key;\n      const discriminatorFilterPath =\n        discriminatorValuePath.replace(/\\.\\d+\\./, '.');\n      let discriminatorKey = null;\n\n      if (discriminatorValuePath in filter) {\n        discriminatorKey = filter[discriminatorValuePath];\n      }\n      if (discriminatorFilterPath in filter) {\n        discriminatorKey = filter[discriminatorFilterPath];\n      }\n\n      const wrapperPath = subpath.replace(/\\.\\d+$/, '');\n      if (schematype.$isMongooseDocumentArrayElement &&\n          get(filter[wrapperPath], '$elemMatch.' + key) != null) {\n        discriminatorKey = filter[wrapperPath].$elemMatch[key];\n      }\n\n      if (discriminatorValuePath in update) {\n        discriminatorKey = update[discriminatorValuePath];\n      }\n\n      for (const filterKey of Object.keys(updatedPathsByFilter)) {\n        const schemaKey = updatedPathsByFilter[filterKey] + '.' + key;\n        const arrayFilterKey = filterKey + '.' + key;\n        if (schemaKey === discriminatorFilterPath) {\n          const filter = arrayFilters.find(filter => filter.hasOwnProperty(arrayFilterKey));\n          if (filter != null) {\n            discriminatorKey = filter[arrayFilterKey];\n          }\n        }\n      }\n\n      if (discriminatorKey == null) {\n        continue;\n      }\n\n      const discriminatorSchema = getDiscriminatorByValue(schematype.caster.discriminators, discriminatorKey).schema;\n\n      const rest = parts.slice(i + 1).join('.');\n      schematype = discriminatorSchema.path(rest);\n      if (schematype != null) {\n        type = discriminatorSchema._getPathType(rest);\n        break;\n      }\n    }\n  }\n\n  return { type: type, schematype: schematype };\n};\n","\n\nconst StrictModeError = require('../../error/strict');\n\nmodule.exports = function handleImmutable(schematype, strict, obj, key, fullPath, ctx) {\n  if (schematype == null || !schematype.options || !schematype.options.immutable) {\n    return false;\n  }\n  let immutable = schematype.options.immutable;\n\n  if (typeof immutable === 'function') {\n    immutable = immutable.call(ctx, ctx);\n  }\n  if (!immutable) {\n    return false;\n  }\n\n  if (strict === false) {\n    return false;\n  }\n  if (strict === 'throw') {\n    throw new StrictModeError(null,\n      `Field ${fullPath} is immutable and strict = 'throw'`);\n  }\n\n  delete obj[key];\n  return true;\n};\n","\n\nconst get = require('../get');\n\n/**\n * Given an update, move all $set on immutable properties to $setOnInsert.\n * This should only be called for upserts, because $setOnInsert bypasses the\n * strictness check for immutable properties.\n */\n\nmodule.exports = function moveImmutableProperties(schema, update, ctx) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  for (const key of keys) {\n    const isDollarKey = key.startsWith('$');\n\n    if (key === '$set') {\n      const updatedPaths = Object.keys(update[key]);\n      for (const path of updatedPaths) {\n        _walkUpdatePath(schema, update[key], path, update, ctx);\n      }\n    } else if (!isDollarKey) {\n      _walkUpdatePath(schema, update, key, update, ctx);\n    }\n\n  }\n};\n\nfunction _walkUpdatePath(schema, op, path, update, ctx) {\n  const schematype = schema.path(path);\n  if (schematype == null) {\n    return;\n  }\n\n  let immutable = get(schematype, 'options.immutable', null);\n  if (immutable == null) {\n    return;\n  }\n  if (typeof immutable === 'function') {\n    immutable = immutable.call(ctx, ctx);\n  }\n\n  if (!immutable) {\n    return;\n  }\n\n  update.$setOnInsert = update.$setOnInsert || {};\n  update.$setOnInsert[path] = op[path];\n  delete op[path];\n}","\n\nconst helpers = require('../../queryhelpers');\nconst immediate = require('../immediate');\n\nmodule.exports = completeMany;\n\n/*!\n * Given a model and an array of docs, hydrates all the docs to be instances\n * of the model. Used to initialize docs returned from the db from `find()`\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields the projection used, including `select` from schemas\n * @param {Object} userProvidedFields the user-specified projection\n * @param {Object} opts\n * @param {Array} [opts.populated]\n * @param {ClientSession} [opts.session]\n * @param {Function} callback\n */\n\nfunction completeMany(model, docs, fields, userProvidedFields, opts, callback) {\n  const arr = [];\n  let count = docs.length;\n  const len = count;\n  let error = null;\n\n  function init(_error) {\n    if (_error != null) {\n      error = error || _error;\n    }\n    if (error != null) {\n      --count || immediate(() => callback(error));\n      return;\n    }\n    --count || immediate(() => callback(error, arr));\n  }\n\n  for (let i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);\n    try {\n      arr[i].$init(docs[i], opts, init);\n    } catch (error) {\n      init(error);\n    }\n\n    if (opts.session != null) {\n      arr[i].$session(opts.session);\n    }\n  }\n}\n","\n\n/*!\n * ignore\n */\n\nmodule.exports = function(obj) {\n  if (obj == null || typeof obj !== 'object') {\n    return false;\n  }\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  for (let i = 0; i < len; ++i) {\n    if (keys[i].startsWith('$')) {\n      return true;\n    }\n  }\n  return false;\n};\n","\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n\n  const props = Object.keys(projection);\n  const numProps = props.length;\n  if (numProps === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < numProps; ++i) {\n    const prop = props[i];\n    // Plus paths can't define the projection (see gh-7050)\n    if (prop.startsWith('+')) {\n      continue;\n    }\n    // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","\n\n/*!\n * Determines if `path2` is a subpath of or equal to `path1`\n *\n * @param {string} path1\n * @param {string} path2\n * @return {Boolean}\n */\n\nmodule.exports = function isSubpath(path1, path2) {\n  return path1 === path2 || path2.startsWith(path1 + '.');\n};\n","\n\n/**\n * Convert a string or array into a projection object, retaining all\n * `-` and `+` paths.\n */\n\nmodule.exports = function parseProjection(v, retainMinusPaths) {\n  const type = typeof v;\n\n  if (type === 'string') {\n    v = v.split(/\\s+/);\n  }\n  if (!Array.isArray(v) && Object.prototype.toString.call(v) !== '[object Arguments]') {\n    return v;\n  }\n\n  const len = v.length;\n  const ret = {};\n  for (let i = 0; i < len; ++i) {\n    let field = v[i];\n    if (!field) {\n      continue;\n    }\n    const include = '-' == field[0] ? 0 : 1;\n    if (!retainMinusPaths && include === 0) {\n      field = field.substring(1);\n    }\n    ret[field] = include;\n  }\n\n  return ret;\n};","\n\n/**\n * MongoDB throws an error if there's unused array filters. That is, if `options.arrayFilters` defines\n * a filter, but none of the `update` keys use it. This should be enough to filter out all unused array\n * filters.\n */\n\nmodule.exports = function removeUnusedArrayFilters(update, arrayFilters) {\n  const updateKeys = Object.keys(update).\n    map(key => Object.keys(update[key])).\n    reduce((cur, arr) => cur.concat(arr), []);\n  return arrayFilters.filter(obj => {\n    return _checkSingleFilterKey(obj, updateKeys);\n  });\n};\n\nfunction _checkSingleFilterKey(arrayFilter, updateKeys) {\n  const firstKey = Object.keys(arrayFilter)[0];\n\n  if (firstKey === '$and' || firstKey === '$or') {\n    if (!Array.isArray(arrayFilter[firstKey])) {\n      return false;\n    }\n    return arrayFilter[firstKey].find(filter => _checkSingleFilterKey(filter, updateKeys)) != null;\n  }\n\n  const firstDot = firstKey.indexOf('.');\n  const arrayFilterKey = firstDot === -1 ? firstKey : firstKey.slice(0, firstDot);\n\n  return updateKeys.find(key => key.includes('$[' + arrayFilterKey + ']')) != null;\n}","\n\nconst hasDollarKeys = require('./hasDollarKeys');\nconst { trustedSymbol } = require('./trusted');\n\nmodule.exports = function sanitizeFilter(filter) {\n  if (filter == null || typeof filter !== 'object') {\n    return filter;\n  }\n  if (Array.isArray(filter)) {\n    for (const subfilter of filter) {\n      sanitizeFilter(subfilter);\n    }\n    return filter;\n  }\n\n  const filterKeys = Object.keys(filter);\n  for (const key of filterKeys) {\n    const value = filter[key];\n    if (value != null && value[trustedSymbol]) {\n      continue;\n    }\n    if (key === '$and' || key === '$or') {\n      sanitizeFilter(value);\n      continue;\n    }\n\n    if (hasDollarKeys(value)) {\n      const keys = Object.keys(value);\n      if (keys.length === 1 && keys[0] === '$eq') {\n        continue;\n      }\n      filter[key] = { $eq: filter[key] };\n    }\n  }\n\n  return filter;\n};","\n\nmodule.exports = function sanitizeProjection(projection) {\n  if (projection == null) {\n    return;\n  }\n\n  const keys = Object.keys(projection);\n  for (let i = 0; i < keys.length; ++i) {\n    if (typeof projection[keys[i]] === 'string') {\n      projection[keys[i]] = 1;\n    }\n  }\n};","\n\nconst isExclusive = require('../projection/isExclusive');\nconst isInclusive = require('../projection/isInclusive');\n\n/*!\n * ignore\n */\n\nmodule.exports = function selectPopulatedFields(fields, userProvidedFields, populateOptions) {\n  if (populateOptions == null) {\n    return;\n  }\n\n  const paths = Object.keys(populateOptions);\n  userProvidedFields = userProvidedFields || {};\n  if (isInclusive(fields)) {\n    for (const path of paths) {\n      if (!isPathInFields(userProvidedFields, path)) {\n        fields[path] = 1;\n      } else if (userProvidedFields[path] === 0) {\n        delete fields[path];\n      }\n    }\n  } else if (isExclusive(fields)) {\n    for (const path of paths) {\n      if (userProvidedFields[path] == null) {\n        delete fields[path];\n      }\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction isPathInFields(userProvidedFields, path) {\n  const pieces = path.split('.');\n  const len = pieces.length;\n  let cur = pieces[0];\n  for (let i = 1; i < len; ++i) {\n    if (userProvidedFields[cur] != null || userProvidedFields[cur + '.$'] != null) {\n      return true;\n    }\n    cur += '.' + pieces[i];\n  }\n  return userProvidedFields[cur] != null || userProvidedFields[cur + '.$'] != null;\n}\n","\nconst modifiedPaths = require('./common').modifiedPaths;\nconst get = require('./get');\n\n/**\n * Applies defaults to update and findOneAndUpdate operations.\n *\n * @param {Object} filter\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method setDefaultsOnInsert\n * @api private\n */\n\nmodule.exports = function(filter, schema, castedDoc, options) {\n  options = options || {};\n\n  const shouldSetDefaultsOnInsert =\n    options.setDefaultsOnInsert != null ?\n      options.setDefaultsOnInsert :\n      schema.base.options.setDefaultsOnInsert;\n\n  if (!options.upsert || shouldSetDefaultsOnInsert === false) {\n    return castedDoc;\n  }\n\n  const keys = Object.keys(castedDoc || {});\n  const updatedKeys = {};\n  const updatedValues = {};\n  const numKeys = keys.length;\n  const modified = {};\n\n  let hasDollarUpdate = false;\n\n  for (let i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      hasDollarUpdate = true;\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n  }\n\n  const paths = Object.keys(filter);\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    const path = paths[i];\n    const condition = filter[path];\n    if (condition && typeof condition === 'object') {\n      const conditionKeys = Object.keys(condition);\n      const numConditionKeys = conditionKeys.length;\n      let hasDollarKey = false;\n      for (let j = 0; j < numConditionKeys; ++j) {\n        if (conditionKeys[j].startsWith('$')) {\n          hasDollarKey = true;\n          break;\n        }\n      }\n      if (hasDollarKey) {\n        continue;\n      }\n    }\n    updatedKeys[path] = true;\n    modified[path] = true;\n  }\n\n  if (options && options.overwrite && !hasDollarUpdate) {\n    // Defaults will be set later, since we're overwriting we'll cast\n    // the whole update to a document\n    return castedDoc;\n  }\n\n  schema.eachPath(function(path, schemaType) {\n    // Skip single nested paths if underneath a map\n    if (schemaType.path === '_id' && schemaType.options.auto) {\n      return;\n    }\n    const def = schemaType.getDefault(null, true);\n    if (!isModified(modified, path) && typeof def !== 'undefined') {\n      castedDoc = castedDoc || {};\n      castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n      if (get(castedDoc, path) == null) {\n        castedDoc.$setOnInsert[path] = def;\n      }\n      updatedValues[path] = def;\n    }\n  });\n\n  return castedDoc;\n};\n\nfunction isModified(modified, path) {\n  if (modified[path]) {\n    return true;\n  }\n  const sp = path.split('.');\n  let cur = sp[0];\n  for (let i = 1; i < sp.length; ++i) {\n    if (modified[cur]) {\n      return true;\n    }\n    cur += '.' + sp[i];\n  }\n  return false;\n}\n","\n\n/*!\n * Module dependencies.\n */\n\nconst ValidationError = require('../error/validation');\nconst cleanPositionalOperators = require('./schema/cleanPositionalOperators');\nconst flatten = require('./common').flatten;\nconst modifiedPaths = require('./common').modifiedPaths;\n\n/**\n * Applies validators and defaults to update and findOneAndUpdate operations,\n * specifically passing a null doc as `this` to validators and defaults\n *\n * @param {Query} query\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method runValidatorsOnUpdate\n * @api private\n */\n\nmodule.exports = function(query, schema, castedDoc, options, callback) {\n  const keys = Object.keys(castedDoc || {});\n  let updatedKeys = {};\n  let updatedValues = {};\n  const isPull = {};\n  const arrayAtomicUpdates = {};\n  const numKeys = keys.length;\n  let hasDollarUpdate = false;\n  const modified = {};\n  let currentUpdate;\n  let key;\n  let i;\n\n  for (i = 0; i < numKeys; ++i) {\n    if (keys[i].startsWith('$')) {\n      hasDollarUpdate = true;\n      if (keys[i] === '$push' || keys[i] === '$addToSet') {\n        const _keys = Object.keys(castedDoc[keys[i]]);\n        for (let ii = 0; ii < _keys.length; ++ii) {\n          currentUpdate = castedDoc[keys[i]][_keys[ii]];\n          if (currentUpdate && currentUpdate.$each) {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat(currentUpdate.$each);\n          } else {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat([currentUpdate]);\n          }\n        }\n        continue;\n      }\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      const flat = flatten(castedDoc[keys[i]], null, null, schema);\n      const paths = Object.keys(flat);\n      const numPaths = paths.length;\n      for (let j = 0; j < numPaths; ++j) {\n        const updatedPath = cleanPositionalOperators(paths[j]);\n        key = keys[i];\n        // With `$pull` we might flatten `$in`. Skip stuff nested under `$in`\n        // for the rest of the logic, it will get handled later.\n        if (updatedPath.includes('$')) {\n          continue;\n        }\n        if (key === '$set' || key === '$setOnInsert' ||\n            key === '$pull' || key === '$pullAll') {\n          updatedValues[updatedPath] = flat[paths[j]];\n          isPull[updatedPath] = key === '$pull' || key === '$pullAll';\n        } else if (key === '$unset') {\n          updatedValues[updatedPath] = undefined;\n        }\n        updatedKeys[updatedPath] = true;\n      }\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n    updatedValues = flatten(castedDoc, null, null, schema);\n    updatedKeys = Object.keys(updatedValues);\n  }\n\n  const updates = Object.keys(updatedValues);\n  const numUpdates = updates.length;\n  const validatorsToExecute = [];\n  const validationErrors = [];\n\n  const alreadyValidated = [];\n\n  const context = query;\n  function iter(i, v) {\n    const schemaPath = schema._getSchema(updates[i]);\n    if (schemaPath == null) {\n      return;\n    }\n    if (schemaPath.instance === 'Mixed' && schemaPath.path !== updates[i]) {\n      return;\n    }\n\n    if (v && Array.isArray(v.$in)) {\n      v.$in.forEach((v, i) => {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            v,\n            function(err) {\n              if (err) {\n                err.path = updates[i] + '.$in.' + i;\n                validationErrors.push(err);\n              }\n              callback(null);\n            },\n            context,\n            { updateValidator: true });\n        });\n      });\n    } else {\n      if (isPull[updates[i]] &&\n          schemaPath.$isMongooseArray) {\n        return;\n      }\n\n      if (schemaPath.$isMongooseDocumentArrayElement && v != null && v.$__ != null) {\n        alreadyValidated.push(updates[i]);\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(v, function(err) {\n            if (err) {\n              err.path = updates[i];\n              validationErrors.push(err);\n              return callback(null);\n            }\n\n            v.validate(function(err) {\n              if (err) {\n                if (err.errors) {\n                  for (const key of Object.keys(err.errors)) {\n                    const _err = err.errors[key];\n                    _err.path = updates[i] + '.' + key;\n                    validationErrors.push(_err);\n                  }\n                } else {\n                  err.path = updates[i];\n                  validationErrors.push(err);\n                }\n              }\n              callback(null);\n            });\n          }, context, { updateValidator: true });\n        });\n      } else {\n        validatorsToExecute.push(function(callback) {\n          for (const path of alreadyValidated) {\n            if (updates[i].startsWith(path + '.')) {\n              return callback(null);\n            }\n          }\n\n          schemaPath.doValidate(v, function(err) {\n            if (schemaPath.schema != null &&\n                schemaPath.schema.options.storeSubdocValidationError === false &&\n                err instanceof ValidationError) {\n              return callback(null);\n            }\n\n            if (err) {\n              err.path = updates[i];\n              validationErrors.push(err);\n            }\n            callback(null);\n          }, context, { updateValidator: true });\n        });\n      }\n    }\n  }\n  for (i = 0; i < numUpdates; ++i) {\n    iter(i, updatedValues[updates[i]]);\n  }\n\n  const arrayUpdates = Object.keys(arrayAtomicUpdates);\n  for (const arrayUpdate of arrayUpdates) {\n    let schemaPath = schema._getSchema(arrayUpdate);\n    if (schemaPath && schemaPath.$isMongooseDocumentArray) {\n      validatorsToExecute.push(function(callback) {\n        schemaPath.doValidate(\n          arrayAtomicUpdates[arrayUpdate],\n          getValidationCallback(arrayUpdate, validationErrors, callback),\n          options && options.context === 'query' ? query : null);\n      });\n    } else {\n      schemaPath = schema._getSchema(arrayUpdate + '.0');\n      for (const atomicUpdate of arrayAtomicUpdates[arrayUpdate]) {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            atomicUpdate,\n            getValidationCallback(arrayUpdate, validationErrors, callback),\n            options && options.context === 'query' ? query : null,\n            { updateValidator: true });\n        });\n      }\n    }\n  }\n\n  if (callback != null) {\n    let numValidators = validatorsToExecute.length;\n    if (numValidators === 0) {\n      return _done(callback);\n    }\n    for (const validator of validatorsToExecute) {\n      validator(function() {\n        if (--numValidators <= 0) {\n          _done(callback);\n        }\n      });\n    }\n\n    return;\n  }\n\n  return function(callback) {\n    let numValidators = validatorsToExecute.length;\n    if (numValidators === 0) {\n      return _done(callback);\n    }\n    for (const validator of validatorsToExecute) {\n      validator(function() {\n        if (--numValidators <= 0) {\n          _done(callback);\n        }\n      });\n    }\n  };\n\n  function _done(callback) {\n    if (validationErrors.length) {\n      const err = new ValidationError(null);\n\n      for (const validationError of validationErrors) {\n        err.addError(validationError.path, validationError);\n      }\n\n      return callback(err);\n    }\n    callback(null);\n  }\n\n  function getValidationCallback(arrayUpdate, validationErrors, callback) {\n    return function(err) {\n      if (err) {\n        err.path = arrayUpdate;\n        validationErrors.push(err);\n      }\n      callback(null);\n    };\n  }\n};\n\n","\n\nconst MongooseError = require('../../error/mongooseError');\n\n/*!\n * A query thunk is the function responsible for sending the query to MongoDB,\n * like `Query#_findOne()` or `Query#_execUpdate()`. The `Query#exec()` function\n * calls a thunk. The term \"thunk\" here is the traditional Node.js definition:\n * a function that takes exactly 1 parameter, a callback.\n *\n * This function defines common behavior for all query thunks.\n */\n\nmodule.exports = function wrapThunk(fn) {\n  return function _wrappedThunk(cb) {\n    if (this._executionStack != null) {\n      let str = this.toString();\n      if (str.length > 60) {\n        str = str.slice(0, 60) + '...';\n      }\n      const err = new MongooseError('Query was already executed: ' + str);\n      err.originalStack = this._executionStack.stack;\n      return cb(err);\n    }\n    this._executionStack = new Error();\n\n    fn.call(this, cb);\n  };\n};","\n\n/*!\n * Module dependencies.\n */\n\nconst Aggregate = require('./aggregate');\nconst ChangeStream = require('./cursor/ChangeStream');\nconst Document = require('./document');\nconst DocumentNotFoundError = require('./error/notFound');\nconst DivergentArrayError = require('./error/divergentArray');\nconst EventEmitter = require('events').EventEmitter;\nconst MongooseBuffer = require('./types/buffer');\nconst MongooseError = require('./error/index');\nconst OverwriteModelError = require('./error/overwriteModel');\nconst PromiseProvider = require('./promise_provider');\nconst Query = require('./query');\nconst RemoveOptions = require('./options/removeOptions');\nconst SaveOptions = require('./options/saveOptions');\nconst Schema = require('./schema');\nconst ServerSelectionError = require('./error/serverSelection');\nconst ValidationError = require('./error/validation');\nconst VersionError = require('./error/version');\nconst ParallelSaveError = require('./error/parallelSave');\nconst applyQueryMiddleware = require('./helpers/query/applyQueryMiddleware');\nconst applyHooks = require('./helpers/model/applyHooks');\nconst applyMethods = require('./helpers/model/applyMethods');\nconst applyStaticHooks = require('./helpers/model/applyStaticHooks');\nconst applyStatics = require('./helpers/model/applyStatics');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst assignVals = require('./helpers/populate/assignVals');\nconst castBulkWrite = require('./helpers/model/castBulkWrite');\nconst createPopulateQueryFilter = require('./helpers/populate/createPopulateQueryFilter');\nconst getDefaultBulkwriteResult = require('./helpers/getDefaultBulkwriteResult');\nconst discriminator = require('./helpers/model/discriminator');\nconst each = require('./helpers/each');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst getModelsMapForPopulate = require('./helpers/populate/getModelsMapForPopulate');\nconst immediate = require('./helpers/immediate');\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst isDefaultIdIndex = require('./helpers/indexes/isDefaultIdIndex');\nconst isIndexEqual = require('./helpers/indexes/isIndexEqual');\nconst isPathSelectedInclusive = require('./helpers/projection/isPathSelectedInclusive');\nconst leanPopulateMap = require('./helpers/populate/leanPopulateMap');\nconst modifiedPaths = require('./helpers/update/modifiedPaths');\nconst parallelLimit = require('./helpers/parallelLimit');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst removeDeselectedForeignField = require('./helpers/populate/removeDeselectedForeignField');\nconst util = require('util');\nconst utils = require('./utils');\n\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = require('./helpers/symbols').modelSymbol;\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\n\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](./api.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](./api.html#mongoose_Mongoose-model) and\n * [`connection.model()`](./api.html#connection_Connection-model) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * ####Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](./api.html#query_Query-select).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document http://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved without passing a callback and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` must be a POJO or string, ' +\n      '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/*!\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n */\n\nModel.prototype.__proto__ = Document.prototype;\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * Collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * ####Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'notanid' }).catch(noop);\n *\n * @api public\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static events\n */\n\nModel.events;\n\n/*!\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function(options, callback) {\n  const _this = this;\n  let saveOptions = {};\n\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern != 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n  const session = this.$session();\n  if (!saveOptions.hasOwnProperty('session')) {\n    saveOptions.session = session;\n  }\n\n  if (Object.keys(saveOptions).length === 0) {\n    saveOptions = null;\n  }\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function() {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions, function(err, ret) {\n      if (err) {\n        _setIsNew(_this, true);\n\n        callback(err, null);\n        return;\n      }\n\n      callback(null, ret);\n    });\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n  } else {\n    // Make sure we don't treat it as a new object on error,\n    // since it already exists\n    this.$__.inserting = false;\n\n    const delta = this.$__delta();\n    if (delta) {\n      if (delta instanceof MongooseError) {\n        callback(delta);\n        return;\n      }\n\n      const where = this.$__where(delta[0]);\n      if (where instanceof MongooseError) {\n        callback(where);\n        return;\n      }\n\n      _applyCustomWhere(this, where);\n      this[modelCollectionSymbol].updateOne(where, delta[1], saveOptions, (err, ret) => {\n        if (err) {\n          this.$__undoReset();\n\n          callback(err);\n          return;\n        }\n        ret.$where = where;\n        callback(null, ret);\n      });\n    } else {\n      const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n      const where = this.$__where();\n      if (this.$__schema.options.optimisticConcurrency) {\n        const key = this.$__schema.options.versionKey;\n        const val = this.$__getValue(key);\n        if (val != null) {\n          where[key] = val;\n        }\n      }\n      this.constructor.exists(where, optionsWithCustomValues).\n        then((documentExists) => {\n          if (!documentExists) {\n            const matchedCount = 0;\n            return callback(null, { $where: where, matchedCount });\n          }\n\n          const matchedCount = 1;\n          callback(null, { $where: where, matchedCount });\n        }).\n        catch(callback);\n      return;\n    }\n\n    // store the modified paths before the document is reset\n    this.$__.modifiedPaths = this.modifiedPaths();\n    this.$__reset();\n\n    _setIsNew(this, false);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function(options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    const hooks = this.$__schema.s.hooks;\n    if (error) {\n      return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    if (get(options, 'safe.w') !== 0 && get(options, 'w') !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n      // was this an update that required a version bump?\n      if (this.$__.version && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError ||\n            new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where,\n          this.constructor.modelName, numAffected, result);\n        return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation with just the modified paths if `isNew` is `false`.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = function(options, fn) {\n  let parallelSave;\n  this.$op = 'save';\n\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = undefined;\n  }\n\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n\n  fn = this.constructor.$handleCallbackError(fn);\n  return this.constructor.db.base._promiseOrCallback(fn, cb => {\n    cb = this.constructor.$wrapCallback(cb);\n\n    if (parallelSave) {\n      this.$__handleReject(parallelSave);\n      return cb(parallelSave);\n    }\n\n    this.$__.saveOptions = options;\n\n    this.$__save(options, error => {\n      this.$__.saving = undefined;\n      delete this.$__.saveOptions;\n      delete this.$__.$versionError;\n      this.$op = null;\n\n      if (error) {\n        this.$__handleReject(error);\n        return cb(error);\n      }\n      cb(null, this);\n    });\n  }, this.constructor.events);\n};\n\nModel.prototype.$save = Model.prototype.save;\n\n/*!\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n\n  return skipVersioning[path];\n}\n\n/*!\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [operation]\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n\n  if (self.$__schema.options.optimisticConcurrency) {\n    self.$__.version = VERSION_ALL;\n    return;\n  }\n\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    self.$__.version = VERSION_INC;\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/*!\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function(atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({ depopulate: 1, _isNested: true });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n\n    return operand(self, where, delta, data, value);\n  }\n\n  function iter(mem) {\n    return utils.isMongooseObject(mem)\n      ? mem.toObject({ depopulate: 1, _isNested: true })\n      : mem;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({ depopulate: true, transform: false, _isNested: true });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n\n    if (op === '$addToSet') {\n      val = { $each: val };\n    }\n\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function() {\n  const dirty = this.$__dirty();\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if (get(where, '_id.$__', null) != null) {\n    where._id = where._id.toObject({ transform: false, depopulate: true });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (value.isMongooseArray && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      value = utils.clone(value, {\n        depopulate: true,\n        transform: false,\n        virtuals: false,\n        getters: false,\n        _isNested: true\n      });\n      operand(this, where, delta, data, value);\n    }\n  }\n\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n  return [where, delta];\n};\n\n/*!\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @return {String|undefined}\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n\n  if (!(pop && array && array.isMongooseArray)) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match ||\n      pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted\n      pop.options.options && pop.options.options.skip || // 0 is permitted\n      pop.options.select && // deselected _id?\n      (pop.options.select._id === 0 ||\n      /\\s?-_id\\s?/.test(pop.options.select));\n\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function(where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      this.$__setValue(key, delta[key] = 0);\n    }\n    return;\n  }\n\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * ####Example:\n *\n *     Model.findById(id, function (err, doc) {\n *       doc.increment();\n *       doc.save(function (err) { .. })\n *     })\n *\n * @see versionKeys http://mongoosejs.com/docs/guide.html#versionKey\n * @api public\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n\n  return where;\n};\n\n/**\n * Removes this document from the db.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       if (err) return handleError(err);\n *       Product.findById(product._id, function (err, product) {\n *         console.log(product) // null\n *       })\n *     })\n *\n *\n * As an extra measure of flow control, remove will return a Promise (bound to `fn` if passed) so it could be chained, or hooked to receive errors\n *\n * ####Example:\n *     product.remove().then(function (product) {\n *        ...\n *     }).catch(function (err) {\n *        assert.ok(err)\n *     })\n *\n * @param {Object} [options]\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {function(err,product)} [fn] optional callback\n * @return {Promise} Promise\n * @api public\n */\n\nModel.prototype.remove = function remove(options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = undefined;\n  }\n\n  options = new RemoveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  this.$op = 'remove';\n\n  fn = this.constructor.$handleCallbackError(fn);\n\n  return this.constructor.db.base._promiseOrCallback(fn, cb => {\n    cb = this.constructor.$wrapCallback(cb);\n    this.$__remove(options, (err, res) => {\n      this.$op = null;\n      cb(err, res);\n    });\n  }, this.constructor.events);\n};\n\n/*!\n * Alias for remove\n */\n\nModel.prototype.$remove = Model.prototype.remove;\nModel.prototype.delete = Model.prototype.remove;\n\n/**\n * Removes this document from the db. Equivalent to `.remove()`.\n *\n * ####Example:\n *     product = await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @param {function(err,product)} [fn] optional callback\n * @return {Promise} Promise\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = undefined;\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  fn = this.constructor.$handleCallbackError(fn);\n\n  return this.constructor.db.base._promiseOrCallback(fn, cb => {\n    cb = this.constructor.$wrapCallback(cb);\n    this.$__deleteOne(options, cb);\n  }, this.constructor.events);\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__remove = function $__remove(options, cb) {\n  if (this.$__.isDeleted) {\n    return immediate(() => cb(null, this));\n  }\n\n  const where = this.$__where();\n  if (where instanceof MongooseError) {\n    return cb(where);\n  }\n\n  _applyCustomWhere(this, where);\n\n  const session = this.$session();\n  if (!options.hasOwnProperty('session')) {\n    options.session = session;\n  }\n\n  this[modelCollectionSymbol].deleteOne(where, options, err => {\n    if (!err) {\n      this.$__.isDeleted = true;\n      this.$emit('remove', this);\n      this.constructor.emit('remove', this);\n      return cb(null, this);\n    }\n    this.$__.isDeleted = false;\n    cb(err);\n  });\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__deleteOne = Model.prototype.$__remove;\n\n/**\n * Returns another Model instance.\n *\n * ####Example:\n *\n *     const doc = new Tank;\n *     doc.model('User').findById(id, callback);\n *\n * @param {String} name model name\n * @api public\n */\n\nModel.prototype.model = function model(name) {\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns true if at least one document exists in the database that matches\n * the given `filter`, and false otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * ####Example:\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] callback\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options, callback) {\n  _checkContext(this, 'exists');\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const query = this.findOne(filter).\n    select({ _id: 1 }).\n    lean().\n    setOptions(options);\n\n  if (typeof callback === 'function') {\n    return query.exec(callback);\n  }\n  options = options || {};\n  if (!options.explain) {\n    return query.then(doc => !!doc);\n  }\n\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * ####Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function(name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = get(options, 'clone', true);\n\n  _checkContext(this, 'discriminator');\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this, name, schema, value, true);\n  if (this.db.models[name]) {\n    throw new OverwriteModelError(name);\n  }\n\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  d.prototype.__proto__ = this.prototype;\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] =\n        model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n\n  return d;\n};\n\n/*!\n * Make sure `this` is a model\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' +\n      'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are not calling ' +\n      '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for building [indexes](https://docs.mongodb.com/manual/indexes/),\n * unless [`autoIndex`](http://mongoosejs.com/docs/guide.html#autoIndex) is turned off.\n *\n * Mongoose calls this function automatically when a model is created using\n * [`mongoose.model()`](/docs/api.html#mongoose_Mongoose-model) or\n * [`connection.model()`](/docs/api.html#connection_Connection-model), so you\n * don't need to call it. This function is also idempotent, so you may call it\n * to get back a promise that will resolve when your indexes are finished\n * building as an alternative to [`MyModel.on('index')`](/docs/guide.html#indexes)\n *\n * ####Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true }})\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.init().then(function(Event) {\n *       // You can also use `Event.on('index')` if you prefer event emitters\n *       // over promises.\n *       console.log('Indexes are done building!');\n *     });\n *\n * @api public\n * @param {Function} [callback]\n * @returns {Promise}\n */\n\nModel.init = function init(callback) {\n  _checkContext(this, 'init');\n\n  this.schema.emit('init', this);\n\n  if (this.$init != null) {\n    if (callback) {\n      this.$init.then(() => callback(), err => callback(err));\n      return null;\n    }\n    return this.$init;\n  }\n\n  const Promise = PromiseProvider.get();\n  const autoIndex = utils.getOption('autoIndex',\n    this.schema.options, this.db.config, this.db.base.options);\n  const autoCreate = utils.getOption('autoCreate',\n    this.schema.options, this.db.config, this.db.base.options);\n\n  const _ensureIndexes = autoIndex ?\n    cb => this.ensureIndexes({ _automatic: true }, cb) :\n    cb => cb();\n  const _createCollection = autoCreate ?\n    cb => this.createCollection({}, cb) :\n    cb => cb();\n\n  this.$init = new Promise((resolve, reject) => {\n    _createCollection(error => {\n      if (error) {\n        return reject(error);\n      }\n      _ensureIndexes(error => {\n        if (error) {\n          return reject(error);\n        }\n        resolve(this);\n      });\n    });\n  });\n\n  if (callback) {\n    this.$init.then(() => callback(), err => callback(err));\n    this.$caught = true;\n    return null;\n  } else {\n    const _catch = this.$init.catch;\n    const _this = this;\n    this.$init.catch = function() {\n      this.$caught = true;\n      return _catch.apply(_this.$init, arguments);\n    };\n  }\n\n  return this.$init;\n};\n\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://docs.mongodb.com/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](http://mongodb.github.io/node-mongodb-native/3.1/api/Db.html#createCollection)\n * @param {Function} [callback]\n * @returns {Promise}\n */\n\nModel.createCollection = function createCollection(options, callback) {\n  _checkContext(this, 'createCollection');\n\n  if (typeof options === 'string') {\n    throw new MongooseError('You can\\'t specify a new collection name in Model.createCollection.' +\n      'This is not like Connection.createCollection. Only options are accepted here.');\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = void 0;\n  }\n\n  const schemaCollation = get(this, ['schema', 'options', 'collation'], null);\n  if (schemaCollation != null) {\n    options = Object.assign({ collation: schemaCollation }, options);\n  }\n  const capped = get(this, ['schema', 'options', 'capped']);\n  if (capped) {\n    options = Object.assign({ capped: true }, capped, options);\n  }\n  const timeseries = get(this, ['schema', 'options', 'timeseries']);\n  if (timeseries != null) {\n    options = Object.assign({ timeseries }, options);\n  }\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n\n    this.db.createCollection(this.$__collection.collectionName, options, utils.tick((err) => {\n      if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n        return cb(err);\n      }\n      this.$__collection = this.db.collection(this.$__collection.collectionName, options);\n      cb(null, this.$__collection);\n    }));\n  }, this.events);\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](http://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.syncIndexes = function syncIndexes(options, callback) {\n  _checkContext(this, 'syncIndexes');\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n\n    this.createCollection(err => {\n      if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n        return cb(err);\n      }\n      this.cleanIndexes((err, dropped) => {\n        if (err != null) {\n          return cb(err);\n        }\n        this.createIndexes(options, err => {\n          if (err != null) {\n            return cb(err);\n          }\n          cb(null, dropped);\n        });\n      });\n    });\n  }, this.events);\n};\n\n/**\n * Does a dry-run of Model.syncIndexes(), meaning that\n * the result of this function would be the result of\n * Model.syncIndexes().\n *\n * @param {Object} options not used at all.\n * @param {Function} callback optional callback\n * @returns {Promise} which containts an object, {toDrop, toCreate}, which\n * are indexes that would be dropped in mongodb and indexes that would be created in mongodb.\n */\n\nModel.diffIndexes = function diffIndexes(options, callback) {\n  const toDrop = [];\n  const toCreate = [];\n  callback = this.$handleCallbackError(callback);\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n    this.listIndexes((err, indexes) => {\n      if (indexes === undefined) {\n        indexes = [];\n      }\n      const schemaIndexes = this.schema.indexes();\n      // Iterate through the indexes created in mongodb and\n      // compare against the indexes in the schema.\n      for (const index of indexes) {\n        let found = false;\n        // Never try to drop `_id` index, MongoDB server doesn't allow it\n        if (isDefaultIdIndex(index)) {\n          continue;\n        }\n\n        for (const schemaIndex of schemaIndexes) {\n          const key = schemaIndex[0];\n          const options = _decorateDiscriminatorIndexOptions(this,\n            utils.clone(schemaIndex[1]));\n          if (isIndexEqual(key, options, index)) {\n            found = true;\n          }\n        }\n\n        if (!found) {\n          toDrop.push(index.name);\n        }\n      }\n      // Iterate through the indexes created on the schema and\n      // compare against the indexes in mongodb.\n      for (const schemaIndex of schemaIndexes) {\n        const key = schemaIndex[0];\n        let found = false;\n        const options = _decorateDiscriminatorIndexOptions(this,\n          utils.clone(schemaIndex[1]));\n        for (const index of indexes) {\n          if (isDefaultIdIndex(index)) {\n            continue;\n          }\n          if (isIndexEqual(key, options, index)) {\n            found = true;\n          }\n        }\n        if (!found) {\n          toCreate.push(key);\n        }\n      }\n      cb(null, { toDrop, toCreate });\n    });\n  });\n};\n\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = function cleanIndexes(callback) {\n  _checkContext(this, 'cleanIndexes');\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    const collection = this.$__collection;\n\n    this.listIndexes((err, indexes) => {\n      if (err != null) {\n        return cb(err);\n      }\n\n      const schemaIndexes = this.schema.indexes();\n      const toDrop = [];\n\n      for (const index of indexes) {\n        let found = false;\n        // Never try to drop `_id` index, MongoDB server doesn't allow it\n        if (isDefaultIdIndex(index)) {\n          continue;\n        }\n\n        for (const schemaIndex of schemaIndexes) {\n          const key = schemaIndex[0];\n          const options = _decorateDiscriminatorIndexOptions(this,\n            utils.clone(schemaIndex[1]));\n          if (isIndexEqual(key, options, index)) {\n            found = true;\n          }\n        }\n\n        if (!found) {\n          toDrop.push(index.name);\n        }\n      }\n\n      if (toDrop.length === 0) {\n        return cb(null, []);\n      }\n\n      dropIndexes(toDrop, cb);\n    });\n\n    function dropIndexes(toDrop, cb) {\n      let remaining = toDrop.length;\n      let error = false;\n      toDrop.forEach(indexName => {\n        collection.dropIndex(indexName, err => {\n          if (err != null) {\n            error = true;\n            return cb(err);\n          }\n          if (!error) {\n            --remaining || cb(null, toDrop);\n          }\n        });\n      });\n    }\n  });\n};\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @param {Function} [cb] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.listIndexes = function init(callback) {\n  _checkContext(this, 'listIndexes');\n\n  const _listIndexes = cb => {\n    this.$__collection.listIndexes().toArray(cb);\n  };\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n\n    // Buffering\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(_listIndexes, [cb]);\n    } else {\n      _listIndexes(cb);\n    }\n  }, this.events);\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * ####Example:\n *\n *     Event.ensureIndexes(function (err) {\n *       if (err) return handleError(err);\n *     });\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * ####Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true }})\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     })\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @param {Function} [cb] optional callback\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = function ensureIndexes(options, callback) {\n  _checkContext(this, 'ensureIndexes');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n\n    _ensureIndexes(this, options || {}, error => {\n      if (error) {\n        return cb(error);\n      }\n      cb(null);\n    });\n  }, this.events);\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @param {Function} [cb] optional callback\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = function createIndexes(options, callback) {\n  _checkContext(this, 'createIndexes');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  options.createIndex = true;\n  return this.ensureIndexes(options, callback);\n};\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n\n  options = options || {};\n  const done = function(err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' +\n        'model name \"' + model.modelName + '\", ' +\n        'MongoDB does not allow overwriting the default `_id` index. See ' +\n        'http://bit.ly/mongodb-id-index');\n    }\n  }\n\n  if (!indexes.length) {\n    immediate(function() {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function(err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function(fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n\n  const create = function() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false ||\n          (model.schema.options.autoIndex == null && model.db.config.autoIndex === false)) {\n        return done();\n      }\n    }\n\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n\n    const indexFields = utils.clone(index[0]);\n    const indexOptions = utils.clone(index[1]);\n    let isTextIndex = false;\n    for (const key of Object.keys(indexFields)) {\n      if (indexFields[key] === 'text') {\n        isTextIndex = true;\n      }\n    }\n    delete indexOptions._autoIndex;\n    _decorateDiscriminatorIndexOptions(model, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n\n    indexSingleStart(indexFields, options);\n\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n    if (model.schema.options.hasOwnProperty('collation') &&\n        !indexOptions.hasOwnProperty('collation') &&\n        !isTextIndex) {\n      indexOptions.collation = model.schema.options.collation;\n    }\n\n    model.collection.createIndex(indexFields, indexOptions, utils.tick(function(err, name) {\n      indexSingleDone(err, indexFields, indexOptions, name);\n      if (err) {\n        if (!indexError) {\n          indexError = err;\n        }\n        if (!model.$caught) {\n          model.emit('error', err);\n        }\n      }\n      create();\n    }));\n  };\n\n  immediate(function() {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n}\n\nfunction _decorateDiscriminatorIndexOptions(model, indexOptions) {\n  // If the model is a discriminator and it has a unique index, add a\n  // partialFilterExpression by default so the unique index will only apply\n  // to that discriminator.\n  if (model.baseModelName != null &&\n    !('partialFilterExpression' in indexOptions) &&\n    !('sparse' in indexOptions)) {\n    const value = (\n      model.schema.discriminatorMapping &&\n      model.schema.discriminatorMapping.value\n    ) || model.modelName;\n    const discriminatorKey = model.schema.options.discriminatorKey;\n\n    indexOptions.partialFilterExpression = { [discriminatorKey]: value };\n  }\n  return indexOptions;\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @receiver Model\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/*!\n * Connection instance the model uses.\n *\n * @property db\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/*!\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * ####Example:\n *\n *     Character\n *       .find(Character.translateAliases({\n *         '名': 'Eddard Stark' // Alias for 'name'\n *       })\n *       .exec(function(err, characters) {})\n *\n * ####Note:\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} raw fields/conditions that may contain aliased keys\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields) {\n  _checkContext(this, 'translateAliases');\n\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      }\n      else\n        currentSchema = null;\n    }\n\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map)\n      fields.set(translatedKey, value);\n    else\n      fields[translatedKey] = value;\n\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          }\n        }\n      }\n    }\n\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Removes all documents that match `conditions` from the collection.\n * To remove just the first document that matches `conditions`, set the `single`\n * option to true.\n *\n * This method is deprecated. See [Deprecation Warnings](../deprecations.html#remove) for details.\n *\n * ####Example:\n *\n *     const res = await Character.remove({ name: 'Eddard Stark' });\n *     res.deletedCount; // Number of documents removed\n *\n * ####Note:\n *\n * This method sends a remove command directly to MongoDB, no Mongoose documents\n * are involved. Because no Mongoose documents are involved, Mongoose does\n * not execute [document middleware](/docs/middleware.html#types-of-middleware).\n *\n * @deprecated\n * @param {Object} conditions\n * @param {Object} [options]\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this operation.\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.remove = function remove(conditions, options, callback) {\n  _checkContext(this, 'remove');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // get the mongodb collection object\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.remove(conditions, callback);\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * ####Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * ####Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options, callback) {\n  _checkContext(this, 'deleteOne');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    options = null;\n  }\n  else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.deleteOne(conditions, callback);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * ####Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * ####Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options, callback) {\n  _checkContext(this, 'deleteMany');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.deleteMany(conditions, callback);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * ####Examples:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, passing results to callback\n *     MyModel.find({ name: 'john', age: { $gte: 18 }}, function (err, docs) {});\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|Array<String>} [projection] optional fields to return, see [`Query.prototype.select()`](http://mongoosejs.com/docs/api.html#query_Query-select)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see query casting /docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options, callback) {\n  _checkContext(this, 'find');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    projection = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n\n  mq.setOptions(options);\n  if (this.schema.discriminatorMapping &&\n      this.schema.discriminatorMapping.isRoot &&\n      mq.selectedInclusively()) {\n    // Need to select discriminator key because original schema doesn't have it\n    mq.select(this.schema.options.discriminatorKey);\n  }\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.find(conditions, callback);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * ####Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // using callback\n *     Adventure.findById(id, function (err, adventure) {});\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|Array<String>} [projection] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see lean queries /docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options, callback) {\n  _checkContext(this, 'findById');\n\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.findOne({ _id: id }, projection, options, callback);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * ####Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // using callback\n *     Adventure.findOne({ country: 'Croatia' }, function (err, adventure) {});\n *\n *     // select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|Array<String>} [projection] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see lean queries /docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options, callback) {\n  _checkContext(this, 'findOne');\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    projection = null;\n    options = null;\n  } else if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    projection = null;\n    options = null;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  if (this.schema.discriminatorMapping &&\n      this.schema.discriminatorMapping.isRoot &&\n      mq.selectedInclusively()) {\n    mq.select(this.schema.options.discriminatorKey);\n  }\n\n  callback = this.$handleCallbackError(callback);\n  return mq.findOne(conditions, callback);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * ####Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options, callback) {\n  _checkContext(this, 'estimatedDocumentCount');\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.estimatedDocumentCount(options, callback);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * ####Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](/docs/api.html#model_Model.estimatedDocumentCount)\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options, callback) {\n  _checkContext(this, 'countDocuments');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.countDocuments(conditions, callback);\n};\n\n/**\n * Counts number of documents that match `filter` in a database collection.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#model_Model.estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#model_Model.countDocuments) function instead.\n *\n * ####Example:\n *\n *     const count = await Adventure.count({ type: 'jungle' });\n *     console.log('there are %d jungle adventures', count);\n *\n * @deprecated\n * @param {Object} filter\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.count = function count(conditions, callback) {\n  _checkContext(this, 'count');\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  callback = this.$handleCallbackError(callback);\n\n  return mq.count(conditions, callback);\n};\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     Link.distinct('url', { clicks: {$gt: 100}}, function (err, result) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(result));\n *       console.log('unique urls with more than 100 clicks', result);\n *     })\n *\n *     const query = Link.distinct('url');\n *     query.exec(callback);\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions, callback) {\n  _checkContext(this, 'distinct');\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n  callback = this.$handleCallbackError(callback);\n\n  return mq.distinct(field, conditions, callback);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec(callback);\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where #query_Query-%24where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findAndModify update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * ####Options:\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `overwrite`: bool - if true, replace the entire document.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndUpdate(conditions, update, options, callback) // executes\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update, callback) // executes\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * ####Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options, callback)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options, callback)\n *\n * This helps prevent accidentally overwriting your document with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.overwrite=false] By default, if you don't include any [update operators](https://docs.mongodb.com/manual/reference/operator/update/) in `update`, Mongoose will wrap `update` in `$set` for you. This prevents you from accidentally overwriting the document. This option tells Mongoose to skip adding `$set`. An alternative to this would be using [Model.findOneAndReplace(conditions, update, options, callback)](https://mongoosejs.com/docs/api/model.html#model_Model.findOneAndReplace).\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|Array<String>} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Function} [callback]\n * @return {Query}\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findOneAndUpdate = function(conditions, update, options, callback) {\n  _checkContext(this, 'findOneAndUpdate');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else if (arguments.length === 1) {\n    if (typeof conditions === 'function') {\n      const msg = 'Model.findOneAndUpdate(): First argument must not be a function.\\n\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options, callback)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(update)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate()\\n';\n      throw new TypeError(msg);\n    }\n    update = conditions;\n    conditions = undefined;\n  }\n  callback = this.$handleCallbackError(callback);\n\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n\n  update = utils.clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n\n  _decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndUpdate(conditions, update, options, callback);\n};\n\n/*!\n * Decorate the update with a version key, if necessary\n */\n\nfunction _decorateUpdateWithVersionKey(update, options, versionKey) {\n  if (!versionKey || !get(options, 'upsert', false)) {\n    return;\n  }\n\n  const updatedPaths = modifiedPaths(update);\n  if (!updatedPaths[versionKey]) {\n    if (options.overwrite) {\n      update[versionKey] = 0;\n    } else {\n      if (!update.$setOnInsert) {\n        update.$setOnInsert = {};\n      }\n      update.$setOnInsert[versionKey] = 0;\n    }\n  }\n}\n\n/**\n * Issues a mongodb findAndModify update command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any) to the\n * callback. The query executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Options:\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to false\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `select`: sets the document fields to return\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findByIdAndUpdate(id, update, options, callback) // executes\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update, callback) // executes\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * ####Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options, callback)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options, callback)\n *\n * This helps prevent accidentally overwriting your document with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.overwrite=false] By default, if you don't include any [update operators](https://docs.mongodb.com/manual/reference/operator/update/) in `update`, Mongoose will wrap `update` in `$set` for you. This prevents you from accidentally overwriting the document. This option tells Mongoose to skip adding `$set`. An alternative to this would be using [Model.findOneAndReplace({ _id: id }, update, options, callback)](https://mongoosejs.com/docs/api/model.html#model_Model.findOneAndReplace).\n * @param {Function} [callback]\n * @return {Query}\n * @see Model.findOneAndUpdate #model_Model.findOneAndUpdate\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findByIdAndUpdate = function(id, update, options, callback) {\n  _checkContext(this, 'findByIdAndUpdate');\n\n  callback = this.$handleCallbackError(callback);\n  if (arguments.length === 1) {\n    if (typeof id === 'function') {\n      const msg = 'Model.findByIdAndUpdate(): First argument must not be a function.\\n\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate(id, callback)\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate(id)\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate()\\n';\n      throw new TypeError(msg);\n    }\n    return this.findOneAndUpdate({ _id: id }, undefined);\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n\n  return this.findOneAndUpdate.call(this, { _id: id }, update, options, callback);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and passes the found document\n * (if any) to the callback.\n *\n * Executes the query if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `select`: sets the document fields to return, ex. `{ projection: { _id: 0 } }`\n * - `projection`: equivalent to `select`\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndDelete(conditions, options, callback) // executes\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions, callback) // executes\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|Array<String>} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function(conditions, options, callback) {\n  _checkContext(this, 'findOneAndDelete');\n\n  if (arguments.length === 1 && typeof conditions === 'function') {\n    const msg = 'Model.findOneAndDelete(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findOneAndDelete(conditions, callback)\\n'\n        + '  ' + this.modelName + '.findOneAndDelete(conditions)\\n'\n        + '  ' + this.modelName + '.findOneAndDelete()\\n';\n    throw new TypeError(msg);\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  callback = this.$handleCallbackError(callback);\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndDelete(conditions, options, callback);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback]\n * @return {Query}\n * @see Model.findOneAndRemove #model_Model.findOneAndRemove\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n */\n\nModel.findByIdAndDelete = function(id, options, callback) {\n  _checkContext(this, 'findByIdAndDelete');\n\n  if (arguments.length === 1 && typeof id === 'function') {\n    const msg = 'Model.findByIdAndDelete(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findByIdAndDelete(id, callback)\\n'\n        + '  ' + this.modelName + '.findByIdAndDelete(id)\\n'\n        + '  ' + this.modelName + '.findByIdAndDelete()\\n';\n    throw new TypeError(msg);\n  }\n  callback = this.$handleCallbackError(callback);\n\n  return this.findOneAndDelete({ _id: id }, options, callback);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and passes the\n * returned doc to the callback.\n *\n * Executes the query if `callback` is passed.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `select`: sets the document fields to return\n * - `projection`: like select, it determines which fields to return, ex. `{ projection: { _id: 0 } }`\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndReplace(conditions, options, callback) // executes\n *     A.findOneAndReplace(conditions, options)  // return Query\n *     A.findOneAndReplace(conditions, callback) // executes\n *     A.findOneAndReplace(conditions) // returns Query\n *     A.findOneAndReplace()           // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|Array<String>} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function(filter, replacement, options, callback) {\n  _checkContext(this, 'findOneAndReplace');\n\n  if (arguments.length === 1 && typeof filter === 'function') {\n    const msg = 'Model.findOneAndReplace(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findOneAndReplace(conditions, callback)\\n'\n        + '  ' + this.modelName + '.findOneAndReplace(conditions)\\n'\n        + '  ' + this.modelName + '.findOneAndReplace()\\n';\n    throw new TypeError(msg);\n  }\n\n  if (arguments.length === 3 && typeof options === 'function') {\n    callback = options;\n    options = replacement;\n    replacement = void 0;\n  }\n  if (arguments.length === 2 && typeof replacement === 'function') {\n    callback = replacement;\n    replacement = void 0;\n    options = void 0;\n  }\n  callback = this.$handleCallbackError(callback);\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndReplace(filter, replacement, options, callback);\n};\n\n/**\n * Issue a mongodb findAndModify remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback.\n *\n * Executes the query if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `select`: sets the document fields to return\n * - `projection`: like select, it determines which fields to return, ex. `{ projection: { _id: 0 } }`\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndRemove(conditions, options, callback) // executes\n *     A.findOneAndRemove(conditions, options)  // return Query\n *     A.findOneAndRemove(conditions, callback) // executes\n *     A.findOneAndRemove(conditions) // returns Query\n *     A.findOneAndRemove()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|Array<String>} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Function} [callback]\n * @return {Query}\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findOneAndRemove = function(conditions, options, callback) {\n  _checkContext(this, 'findOneAndRemove');\n\n  if (arguments.length === 1 && typeof conditions === 'function') {\n    const msg = 'Model.findOneAndRemove(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findOneAndRemove(conditions, callback)\\n'\n        + '  ' + this.modelName + '.findOneAndRemove(conditions)\\n'\n        + '  ' + this.modelName + '.findOneAndRemove()\\n';\n    throw new TypeError(msg);\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  callback = this.$handleCallbackError(callback);\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndRemove(conditions, options, callback);\n};\n\n/**\n * Issue a mongodb findAndModify remove command by a document's _id field. `findByIdAndRemove(id, ...)` is equivalent to `findOneAndRemove({ _id: id }, ...)`.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback.\n *\n * Executes the query if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `select`: sets the document fields to return\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findByIdAndRemove(id, options, callback) // executes\n *     A.findByIdAndRemove(id, options)  // return Query\n *     A.findByIdAndRemove(id, callback) // executes\n *     A.findByIdAndRemove(id) // returns Query\n *     A.findByIdAndRemove()           // returns Query\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Object|String|Array<String>} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](#query_Query-select)\n * @param {Function} [callback]\n * @return {Query}\n * @see Model.findOneAndRemove #model_Model.findOneAndRemove\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n */\n\nModel.findByIdAndRemove = function(id, options, callback) {\n  _checkContext(this, 'findByIdAndRemove');\n\n  if (arguments.length === 1 && typeof id === 'function') {\n    const msg = 'Model.findByIdAndRemove(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove(id, callback)\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove(id)\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove()\\n';\n    throw new TypeError(msg);\n  }\n  callback = this.$handleCallbackError(callback);\n\n  return this.findOneAndRemove({ _id: id }, options, callback);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * ####Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread.\n * @param {Function} [callback] callback\n * @return {Promise}\n * @api public\n */\n\nModel.create = function create(doc, options, callback) {\n  _checkContext(this, 'create');\n\n  let args;\n  let cb;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  if (Array.isArray(doc)) {\n    args = doc;\n    cb = typeof options === 'function' ? options : callback;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    // Handle falsy callbacks re: #5061\n    if (typeof last === 'function' || (arguments.length > 1 && !last)) {\n      cb = last;\n      args = utils.args(arguments, 0, arguments.length - 1);\n    } else {\n      args = utils.args(arguments);\n    }\n\n    if (args.length === 2 &&\n        args[0] != null &&\n        args[1] != null &&\n        args[0].session == null &&\n        getConstructorName(last.session) === 'ClientSession' &&\n        !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' +\n        'Mongoose, you **must** pass an array as the first argument. See: ' +\n        'https://mongoosejs.com/docs/api.html#model_Model.create');\n    }\n  }\n\n  return this.db.base._promiseOrCallback(cb, cb => {\n    cb = this.$wrapCallback(cb);\n\n    if (args.length === 0) {\n      if (Array.isArray(doc)) {\n        return cb(null, []);\n      } else {\n        return cb(null);\n      }\n    }\n\n    const toExecute = [];\n    let firstError;\n    args.forEach(doc => {\n      toExecute.push(callback => {\n        const Model = this.discriminators && doc[discriminatorKey] != null ?\n          this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n          this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        const callbackWrapper = (error, doc) => {\n          if (error) {\n            if (!firstError) {\n              firstError = error;\n            }\n            return callback(null, { error: error });\n          }\n          callback(null, { doc: doc });\n        };\n\n        if (!(toSave instanceof Model)) {\n          try {\n            toSave = new Model(toSave);\n          } catch (error) {\n            return callbackWrapper(error);\n          }\n        }\n\n        toSave.$save(options, callbackWrapper);\n      });\n    });\n\n    let numFns = toExecute.length;\n    if (numFns === 0) {\n      return cb(null, []);\n    }\n    const _done = (error, res) => {\n      const savedDocs = [];\n      const len = res.length;\n      for (let i = 0; i < len; ++i) {\n        if (res[i].doc) {\n          savedDocs.push(res[i].doc);\n        }\n      }\n\n      if (firstError) {\n        return cb(firstError, savedDocs);\n      }\n\n      if (doc instanceof Array) {\n        cb(null, savedDocs);\n      } else {\n        cb.apply(this, [null].concat(savedDocs));\n      }\n    };\n\n    const _res = [];\n    toExecute.forEach((fn, i) => {\n      fn((err, res) => {\n        _res[i] = res;\n        if (--numFns <= 0) {\n          return _done(null, _res);\n        }\n      });\n    });\n  }, this.events);\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://docs.mongodb.com/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * ####Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html#watch)\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function(pipeline, options) {\n  _checkContext(this, 'watch');\n\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://docs.mongodb.com/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://docs.mongodb.com/manual/core/retryable-writes/),\n * and [transactions](http://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * ####Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @param {Function} [callback]\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function() {\n  _checkContext(this, 'startSession');\n\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * ####Example:\n *\n *     const arr = [{ name: 'Star Wars' }, { name: 'The Empire Strikes Back' }];\n *     Movies.insertMany(arr, function(error, docs) {});\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#insertMany)\n * @param {Boolean} [options.ordered = true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult = false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~insertWriteOpCallback) with a `mongoose` property that contains `validationErrors` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean = false] if `true`, skips hydrating and validating the documents. This option is useful if you need the extra performance, but Mongoose won't validate the documents before inserting.\n * @param {Number} [options.limit = null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate = null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Function} [callback] callback\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = function(arr, options, callback) {\n  _checkContext(this, 'insertMany');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  return this.db.base._promiseOrCallback(callback, cb => {\n    this.$__insertMany(arr, options, cb);\n  }, this.events);\n};\n\n/*!\n * ignore\n */\n\nModel.$__insertMany = function(arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  if (callback) {\n    callback = this.$handleCallbackError(callback);\n    callback = this.$wrapCallback(callback);\n  }\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = get(options, 'limit', 1000);\n  const rawResult = get(options, 'rawResult', false);\n  const ordered = get(options, 'ordered', true);\n  const lean = get(options, 'lean', false);\n\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n\n  const validationErrors = [];\n  const toExecute = arr.map(doc =>\n    callback => {\n      if (!(doc instanceof _this)) {\n        try {\n          doc = new _this(doc);\n        } catch (err) {\n          return callback(err);\n        }\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      // If option `lean` is set to true bypass validation\n      if (lean) {\n        // we have to execute callback at the nextTick to be compatible\n        // with parallelLimit, as `results` variable has TDZ issue if we\n        // execute the callback synchronously\n        return immediate(() => callback(null, doc));\n      }\n      doc.$validate({ __noPromise: true }, function(error) {\n        if (error) {\n          // Option `ordered` signals that insert should be continued after reaching\n          // a failing insert. Therefore we delegate \"null\", meaning the validation\n          // failed. It's up to the next function to filter out all failed models\n          if (ordered === false) {\n            validationErrors.push(error);\n            return callback(null, null);\n          }\n          return callback(error);\n        }\n        callback(null, doc);\n      });\n    });\n\n  parallelLimit(toExecute, limit, function(error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function(doc) {\n      return doc != null;\n    });\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length < 1) {\n      if (rawResult) {\n        const res = {\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = docAttributes.map(function(doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      if (doc.initializeTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n\n    _this.$__collection.insertMany(docObjects, options, function(error, res) {\n      if (error) {\n        // `writeErrors` is a property reported by the MongoDB driver,\n        // just not if there's only 1 error.\n        if (error.writeErrors == null &&\n            get(error, 'result.result.writeErrors') != null) {\n          error.writeErrors = error.result.result.writeErrors;\n        }\n\n        // `insertedDocs` is a Mongoose-specific property\n        const erroredIndexes = new Set(get(error, 'writeErrors', []).map(err => err.index));\n\n        let firstErroredIndex = -1;\n        error.insertedDocs = docAttributes.\n          filter((doc, i) => {\n            const isErrored = erroredIndexes.has(i);\n\n            if (ordered) {\n              if (firstErroredIndex > -1) {\n                return i < firstErroredIndex;\n              }\n\n              if (isErrored) {\n                firstErroredIndex = i;\n              }\n            }\n\n            return !isErrored;\n          }).\n          map(function setIsNewForInsertedDoc(doc) {\n            doc.$__reset();\n            _setIsNew(doc, false);\n            return doc;\n          });\n\n        callback(error, null);\n        return;\n      }\n\n      for (const attribute of docAttributes) {\n        attribute.$__reset();\n        _setIsNew(attribute, false);\n      }\n\n      if (rawResult) {\n        if (ordered === false) {\n          // Decorate with mongoose validation errors in case of unordered,\n          // because then still do `insertMany()`\n          res.mongoose = {\n            validationErrors: validationErrors\n          };\n        }\n        return callback(null, res);\n      }\n\n      if (options.populate != null) {\n        return _this.populate(docAttributes, options.populate, err => {\n          if (err != null) {\n            error.insertedDocs = docAttributes;\n            return callback(err);\n          }\n\n          callback(null, docs);\n        });\n      }\n\n      callback(null, docAttributes);\n    });\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](http://mongoosejs.com/docs/api.html#model_Model.create) instead.\n *\n * ####Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           {\n *             filter: { name: 'Eddard Stark' }\n *           }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n * The [supported operations](https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [opts.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [opts.updateOne.update] An object containing [update operators](https://docs.mongodb.com/manual/reference/operator/update/)\n * @param {Boolean} [opts.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [opts.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [opts.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [opts.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [opts.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [opts.updateMany.update] An object containing [update operators](https://docs.mongodb.com/manual/reference/operator/update/)\n * @param {Boolean} [opts.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [opts.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [opts.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [opts.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [opts.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [opts.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [opts.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [opts.replaceOne.replacement] The replacement document\n * @param {Boolean} [opts.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://docs.mongodb.com/manual/reference/write-concern/). See [`Query#w()`](/docs/api.html#query_Query-w) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://docs.mongodb.com/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://docs.mongodb.com/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @param {Function} [callback] callback `function(error, bulkWriteOpResult) {}`\n * @return {Promise} resolves to a [`BulkWriteOpResult`](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~BulkWriteOpResult) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = function(ops, options, callback) {\n  _checkContext(this, 'bulkWrite');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n\n  callback = this.$handleCallbackError(callback);\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n    each(validations, (fn, cb) => fn(cb), error => {\n      if (error) {\n        return cb(error);\n      }\n\n      if (ops.length === 0) {\n        return cb(null, getDefaultBulkwriteResult());\n      }\n\n      this.$__collection.bulkWrite(ops, options, (error, res) => {\n        if (error) {\n          return cb(error);\n        }\n\n        cb(null, res);\n      });\n    });\n  }, this.events);\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {[Document]} documents\n *\n */\nModel.bulkSave = function(documents) {\n  const preSavePromises = documents.map(buildPreSavePromise);\n\n  const writeOperations = this.buildBulkWriteOperations(documents, { skipValidation: true });\n\n  let bulkWriteResultPromise;\n  return Promise.all(preSavePromises)\n    .then(() => bulkWriteResultPromise = this.bulkWrite(writeOperations))\n    .then(() => documents.map(buildSuccessfulWriteHandlerPromise))\n    .then(() => bulkWriteResultPromise)\n    .catch((err) => {\n      if (!get(err, 'writeErrors.length')) {\n        throw err;\n      }\n      return Promise.all(\n        documents.map((document) => {\n          const documentError = err.writeErrors.find(writeError => {\n            const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n            return writeErrorDocumentId.toString() === document._id.toString();\n          });\n\n          if (documentError == null) {\n            return buildSuccessfulWriteHandlerPromise(document);\n          }\n        })\n      ).then(() => {\n        throw err;\n      });\n    });\n};\n\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction buildSuccessfulWriteHandlerPromise(document) {\n  return new Promise((resolve, reject) => {\n    handleSuccessfulWrite(document, resolve, reject);\n  });\n}\n\nfunction handleSuccessfulWrite(document, resolve, reject) {\n  if (document.$isNew) {\n    _setIsNew(document, false);\n  }\n\n  document.$__reset();\n  document.schema.s.hooks.execPost('save', document, {}, (err) => {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve();\n  });\n}\n\n/**\n *\n * @param {[Document]} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @returns\n */\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n\n  setDefaultOptions();\n\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      accumulator.push({\n        insertOne: { document }\n      });\n\n      return accumulator;\n    }\n\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n\n      _applyCustomWhere(document, where);\n\n      document.$__version(where, delta);\n\n      accumulator.push({\n        updateOne: {\n          filter: where,\n          update: changes\n        }\n      });\n\n      return accumulator;\n    }\n\n    return accumulator;\n  }, []);\n\n  return writeOperations;\n\n\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * ####Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|Array<String>} [projection] optional projection containing which fields should be selected for this document\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function(obj, projection) {\n  _checkContext(this, 'hydrate');\n\n  const document = require('./queryhelpers').createModel(this, obj, projection);\n  document.$init(obj);\n  return document;\n};\n\n/**\n * Updates one document in the database without returning it.\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * This method is deprecated. See [Deprecation Warnings](../deprecations.html#update) for details.\n *\n * ####Examples:\n *\n *     MyModel.update({ age: { $gt: 18 } }, { oldEnough: true }, fn);\n *\n *     const res = await MyModel.update({ name: 'Tobi' }, { ferret: true });\n *     res.n; // Number of documents that matched `{ name: 'Tobi' }`\n *     // Number of documents that were changed. If every doc matched already\n *     // had `ferret` set to `true`, `nModified` will be 0.\n *     res.nModified;\n *\n * ####Valid options:\n *\n *  - `strict` (boolean): overrides the [schema-level `strict` option](/docs/guide.html#strict) for this update\n *  - `upsert` (boolean): whether to create the doc if it doesn't match (false)\n *  - `writeConcern` (object): sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n *  - `multi` (boolean): whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert` (boolean): if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `timestamps` (boolean): If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n *  - `overwrite` (boolean): disables update-only mode, allowing you to overwrite the doc (false)\n *\n * All `update` values are cast to their appropriate SchemaTypes before being sent.\n *\n * The `callback` function receives `(err, rawResponse)`.\n *\n * - `err` is the error if any occurred\n * - `rawResponse` is the full response from Mongo\n *\n * ####Note:\n *\n * All top level keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     const query = { name: 'borne' };\n *     Model.update(query, { name: 'jason bourne' }, options, callback);\n *\n *     // is sent as\n *     Model.update(query, { $set: { name: 'jason bourne' }}, options, function(err, res));\n *     // if overwrite option is false. If overwrite is true, sent without the $set wrapper.\n *\n * This helps prevent accidentally overwriting all documents in your collection with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a \"Mod on _id not allowed\" error.\n *\n * @deprecated\n * @see strict http://mongoosejs.com/docs/guide.html#strict\n * @see response http://docs.mongodb.org/v2.6/reference/command/update/#output\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.multi=false] whether multiple documents should be updated or just the first one that matches `filter`.\n * @param {Boolean} [options.runValidators=false] if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * @param {Boolean} [options.setDefaultsOnInsert=false] `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.overwrite=false] By default, if you don't include any [update operators](https://docs.mongodb.com/manual/reference/operator/update/) in `doc`, Mongoose will wrap `doc` in `$set` for you. This prevents you from accidentally overwriting the document. This option tells Mongoose to skip adding `$set`.\n * @param {Function} [callback] params are (error, [updateWriteOpResult](https://mongodb.github.io/node-mongodb-native/3.6/api/Collection.html#~updateWriteOpResult))\n * @param {Function} [callback]\n * @return {Query}\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/3.6/api/Collection.html#~updateWriteOpResult\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @api public\n */\n\nModel.update = function update(conditions, doc, options, callback) {\n  _checkContext(this, 'update');\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * ####Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] `function(error, res) {}` where `res` has 5 properties: `modifiedCount`, `matchedCount`, `acknowledged`, `upsertedId`, and `upsertedCount`.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options, callback) {\n  _checkContext(this, 'updateMany');\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except it does not support the `multi` or `overwrite`\n * options.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * ####Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options, callback) {\n  _checkContext(this, 'updateOne');\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except MongoDB replace the existing document with the\n * given document (no atomic operators like `$set`).\n *\n * ####Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] `function(error, res) {}` where `res` has 3 properties: `n`, `nModified`, `ok`.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options, callback) {\n  _checkContext(this, 'replaceOne');\n\n  const versionKey = get(this, 'schema.options.versionKey', null);\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n */\n\nfunction _update(model, op, conditions, doc, options, callback) {\n  const mq = new model.Query({}, {}, model, model.collection);\n  callback = model.$handleCallbackError(callback);\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = utils.clone(conditions);\n  }\n  options = typeof options === 'function' ? options : utils.clone(options);\n\n  const versionKey = get(model, 'schema.options.versionKey', null);\n  _decorateUpdateWithVersionKey(doc, options, versionKey);\n\n  return mq[op](conditions, doc, options, callback);\n}\n\n/**\n * Executes a mapReduce command.\n *\n * `o` is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See [node-mongodb-native mapReduce() documentation](http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#mapreduce) for more detail about options.\n *\n * This function does not trigger any middleware.\n *\n * ####Example:\n *\n *     const o = {};\n *     // `map()` and `reduce()` are run on the MongoDB server, not Node.js,\n *     // these functions are converted to strings\n *     o.map = function () { emit(this.name, 1) };\n *     o.reduce = function (k, vals) { return vals.length };\n *     User.mapReduce(o, function (err, results) {\n *       console.log(results)\n *     })\n *\n * ####Other options:\n *\n * - `query` {Object} query filter object.\n * - `sort` {Object} sort input objects using this key\n * - `limit` {Number} max number of documents\n * - `keeptemp` {Boolean, default:false} keep temporary data\n * - `finalize` {Function} finalize function\n * - `scope` {Object} scope variables exposed to map/reduce/finalize during execution\n * - `jsMode` {Boolean, default:false} it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X\n * - `verbose` {Boolean, default:false} provide statistics on job execution time.\n * - `readPreference` {String}\n * - `out*` {Object, default: {inline:1}} sets the output target for the map reduce job.\n *\n * ####* out options:\n *\n * - `{inline:1}` the results are returned in an array\n * - `{replace: 'collectionName'}` add the results to collectionName: the results replace the collection\n * - `{reduce: 'collectionName'}` add the results to collectionName: if dups are detected, uses the reducer / finalize functions\n * - `{merge: 'collectionName'}` add the results to collectionName: if dups exist the new docs overwrite the old\n *\n * If `options.out` is set to `replace`, `merge`, or `reduce`, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the [`lean` option](/docs/tutorials/lean.html); meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).\n *\n * ####Example:\n *\n *     const o = {};\n *     // You can also define `map()` and `reduce()` as strings if your\n *     // linter complains about `emit()` not being defined\n *     o.map = 'function () { emit(this.name, 1) }';\n *     o.reduce = 'function (k, vals) { return vals.length }';\n *     o.out = { replace: 'createdCollectionNameForResults' }\n *     o.verbose = true;\n *\n *     User.mapReduce(o, function (err, model, stats) {\n *       console.log('map reduce took %d ms', stats.processtime)\n *       model.find().where('value').gt(10).exec(function (err, docs) {\n *         console.log(docs);\n *       });\n *     })\n *\n *     // `mapReduce()` returns a promise. However, ES6 promises can only\n *     // resolve to exactly one value,\n *     o.resolveToObject = true;\n *     const promise = User.mapReduce(o);\n *     promise.then(function (res) {\n *       const model = res.model;\n *       const stats = res.stats;\n *       console.log('map reduce took %d ms', stats.processtime)\n *       return model.find().where('value').gt(10).exec();\n *     }).then(function (docs) {\n *        console.log(docs);\n *     }).then(null, handleError).end()\n *\n * @param {Object} o an object specifying map-reduce options\n * @param {Function} [callback] optional callback\n * @see http://www.mongodb.org/display/DOCS/MapReduce\n * @return {Promise}\n * @api public\n */\n\nModel.mapReduce = function mapReduce(o, callback) {\n  _checkContext(this, 'mapReduce');\n\n  callback = this.$handleCallbackError(callback);\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n\n    if (!Model.mapReduce.schema) {\n      const opts = { _id: false, id: false, strict: false };\n      Model.mapReduce.schema = new Schema({}, opts);\n    }\n\n    if (!o.out) o.out = { inline: 1 };\n    if (o.verbose !== false) o.verbose = true;\n\n    o.map = String(o.map);\n    o.reduce = String(o.reduce);\n\n    if (o.query) {\n      let q = new this.Query(o.query);\n      q.cast(this);\n      o.query = q._conditions;\n      q = undefined;\n    }\n\n    this.$__collection.mapReduce(null, null, o, (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n      if (res.collection) {\n        // returned a collection, convert to Model\n        const model = Model.compile('_mapreduce_' + res.collection.collectionName,\n          Model.mapReduce.schema, res.collection.collectionName, this.db,\n          this.base);\n\n        model._mapreduce = true;\n        res.model = model;\n\n        return cb(null, res);\n      }\n\n      cb(null, res);\n    });\n  }, this.events);\n};\n\n/**\n * Performs [aggregations](http://docs.mongodb.org/manual/applications/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * ####Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * ####NOTE:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](http://docs.mongodb.org/manual/applications/aggregation/)\n *\n * @see Aggregate #aggregate_Aggregate\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @param {Function} [callback]\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options, callback) {\n  _checkContext(this, 'aggregate');\n\n  if (arguments.length > 3 || get(pipeline, 'constructor.name') === 'Object') {\n    throw new MongooseError('Mongoose 5.x disallows passing a spread of operators ' +\n      'to `Model.aggregate()`. Instead of ' +\n      '`Model.aggregate({ $match }, { $skip })`, do ' +\n      '`Model.aggregate([{ $match }, { $skip }])`');\n  }\n\n  if (typeof pipeline === 'function') {\n    callback = pipeline;\n    pipeline = [];\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n\n  if (options != null) {\n    aggregate.option(options);\n  }\n\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n\n  callback = this.$handleCallbackError(callback);\n  callback = this.$wrapCallback(callback);\n\n  aggregate.exec(callback);\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * ####Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Array} pathsToValidate\n * @param {Object} [context]\n * @param {Function} [callback]\n * @return {Promise|undefined}\n * @api public\n */\n\nModel.validate = function validate(obj, pathsToValidate, context, callback) {\n  if ((arguments.length < 3) || (arguments.length === 3 && typeof arguments[2] === 'function')) {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n\n  return this.db.base._promiseOrCallback(callback, cb => {\n    const schema = this.schema;\n    let paths = Object.keys(schema.paths);\n\n    if (pathsToValidate != null) {\n      const _pathsToValidate = new Set(pathsToValidate);\n      paths = paths.filter(p => {\n        const pieces = p.split('.');\n        let cur = pieces[0];\n\n        for (const piece of pieces) {\n          if (_pathsToValidate.has(cur)) {\n            return true;\n          }\n          cur += '.' + piece;\n        }\n\n        return _pathsToValidate.has(p);\n      });\n    }\n\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (!schemaType || !schemaType.$isMongooseArray) {\n        continue;\n      }\n\n      const val = get(obj, path);\n      pushNestedArrayPaths(val, path);\n    }\n\n    let remaining = paths.length;\n    let error = null;\n\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n\n      const pieces = path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n\n      let val = get(obj, path, void 0);\n\n      if (val != null) {\n        try {\n          val = schemaType.cast(val);\n          cur[pieces[pieces.length - 1]] = val;\n        } catch (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n\n          _checkDone();\n          continue;\n        }\n      }\n\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          if (err instanceof ValidationError) {\n            for (const _err of Object.keys(err.errors)) {\n              error.addError(`${path}.${err.errors[_err].path}`, _err);\n            }\n          } else {\n            error.addError(err.path, err);\n          }\n        }\n        _checkDone();\n      }, context, { path: path });\n    }\n\n    function pushNestedArrayPaths(nestedArray, path) {\n      if (nestedArray == null) {\n        return;\n      }\n\n      for (let i = 0; i < nestedArray.length; ++i) {\n        if (Array.isArray(nestedArray[i])) {\n          pushNestedArrayPaths(nestedArray[i], path + '.' + i);\n        } else {\n          paths.push(path + '.' + i);\n        }\n      }\n    }\n\n    function _checkDone() {\n      if (--remaining <= 0) {\n        return cb(error);\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * ####Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to an array. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * ####Examples:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = function(docs, paths, callback) {\n  _checkContext(this, 'populate');\n\n  const _this = this;\n\n  // normalized paths\n  paths = utils.populate(paths);\n\n  // data that should persist across subPopulate calls\n  const cache = {};\n\n  callback = this.$handleCallbackError(callback);\n  return this.db.base._promiseOrCallback(callback, cb => {\n    cb = this.$wrapCallback(cb);\n    _populate(_this, docs, paths, cache, cb);\n  }, this.events);\n};\n\n/*!\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {Function} [cb(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\n\nfunction populate(model, docs, options, callback) {\n  const populateOptions = { ...options };\n  if (model.base.options.strictPopulate != null && options.strictPopulate == null) {\n    populateOptions.strictPopulate = model.base.options.strictPopulate;\n  }\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function() {\n      callback(modelsMap);\n    });\n  }\n\n  const len = modelsMap.length;\n  let vals = [];\n\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n\n    const assignmentOpts = {};\n    assignmentOpts.sort = get(mod, 'options.options.sort', void 0);\n    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);\n\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n\n    hasOne = true;\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else {\n        // preserve original select conditions by copying\n        select = utils.object.shallowCopy(select);\n        delete select._id;\n      }\n    }\n\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length > 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (options.populate != null) {\n      const opts = utils.populate(options.populate).map(pop => Object.assign({}, pop, {\n        path: options.path + '.' + pop.path\n      }));\n      return model.populate(docs, opts, callback);\n    }\n    return callback();\n  }\n\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      _assign(model, vals, mod, assignmentOpts);\n    }\n\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  const subPopulate = utils.clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' && query.selectedInclusively() &&\n        !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => { pop.strictPopulate = false; });\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n\n    query.populate(subPopulate);\n  }\n\n  query.exec((err, docs) => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    for (const val of docs) {\n      leanPopulateMap.set(val, mod.model);\n    }\n    callback(null, docs);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = get(options, 'options.lean', false);\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = utils.clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual ||\n            rawDocs[key].constructor !== val.constructor ||\n            String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = true;\n      }\n    }\n  }\n\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/*!\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n\n  if (!(model.prototype instanceof Model)) {\n    model.__proto__ = Model;\n    model.prototype.__proto__ = Model.prototype;\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n\n  schema._preCompile();\n\n  model.prototype.$__setSchema(schema);\n\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n\n  model.prototype.collection = connection.collection(\n    collectionName,\n    collectionOptions\n  );\n\n  model.prototype.$collection = model.prototype.collection;\n  model.prototype[modelCollectionSymbol] = model.prototype.collection;\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n\n  model.schema = model.prototype.$__schema;\n  model.collection = model.prototype.collection;\n  model.$__collection = model.collection;\n\n  // Create custom query constructor\n  model.Query = function() {\n    Query.apply(this, arguments);\n  };\n  model.Query.prototype = Object.create(Query.prototype);\n  model.Query.base = Query.base;\n  applyQueryMiddleware(model.Query, model);\n  applyQueryMethods(model, schema.query);\n\n  return model;\n};\n\n/*!\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/*!\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n\n  Model.__proto__ = _this;\n  Model.prototype.__proto__ = _this.prototype;\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].\n        __subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n\n  const s = schema && typeof schema !== 'string'\n    ? schema\n    : _this.prototype.$__schema;\n\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') ||\n      utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init(() => {});\n  return Model;\n};\n\nModel.$handleCallbackError = function(callback) {\n  if (callback == null) {\n    return callback;\n  }\n  if (typeof callback !== 'function') {\n    throw new MongooseError('Callback must be a function, got ' + callback);\n  }\n\n  const _this = this;\n  return function() {\n    immediate(() => {\n      try {\n        callback.apply(null, arguments);\n      } catch (error) {\n        _this.emit('error', error);\n      }\n    });\n  };\n};\n\n/*!\n * ignore\n */\n\nModel.$wrapCallback = function(callback) {\n  const serverSelectionError = new ServerSelectionError();\n  const _this = this;\n\n  return function(err) {\n    if (err != null && err.name === 'MongoServerSelectionError') {\n      arguments[0] = serverSelectionError.assimilateError(err);\n    }\n    if (err != null && err.name === 'MongoNetworkTimeoutError' && err.message.endsWith('timed out')) {\n      _this.db.emit('timeout');\n    }\n\n    return callback.apply(null, arguments);\n  };\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * ####Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function() {\n  return `Model { ${this.modelName} }`;\n};\n\nif (util.inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;\n","\n\n/*!\n * Module dependencies\n */\n\nconst AggregationCursor = require('./cursor/AggregationCursor');\nconst Query = require('./query');\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst stringifyFunctionOperators = require('./helpers/aggregate/stringifyFunctionOperators');\nconst util = require('util');\nconst utils = require('./utils');\nconst read = Query.prototype.read;\nconst readConcern = Query.prototype.readConcern;\n\n/**\n * Aggregate constructor used for building aggregation pipelines. Do not\n * instantiate this class directly, use [Model.aggregate()](/docs/api.html#model_Model.aggregate) instead.\n *\n * ####Example:\n *\n *     const aggregate = Model.aggregate([\n *       { $project: { a: 1, b: 1 } },\n *       { $skip: 5 }\n *     ]);\n *\n *     Model.\n *       aggregate([{ $match: { age: { $gte: 21 }}}]).\n *       unwind('tags').\n *       exec(callback);\n *\n * ####Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database\n *\n * ```javascript\n *   new Aggregate([{ $match: { _id: '00000000000000000000000a' } }]);\n *   // Do this instead to cast to an ObjectId\n *   new Aggregate([{ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } }]);\n * ```\n *\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Model} [model] the model to use with this aggregate.\n * @api public\n */\n\nfunction Aggregate(pipeline, model) {\n  this._pipeline = [];\n  this._model = model;\n  this.options = {};\n\n  if (arguments.length === 1 && util.isArray(pipeline)) {\n    this.append.apply(this, pipeline);\n  }\n}\n\n/**\n * Contains options passed down to the [aggregate command](https://docs.mongodb.com/manual/reference/command/aggregate/).\n * Supported options are:\n *\n * - `readPreference`\n * - [`cursor`](./api.html#aggregate_Aggregate-cursor)\n * - [`explain`](./api.html#aggregate_Aggregate-explain)\n * - [`allowDiskUse`](./api.html#aggregate_Aggregate-allowDiskUse)\n * - `maxTimeMS`\n * - `bypassDocumentValidation`\n * - `raw`\n * - `promoteLongs`\n * - `promoteValues`\n * - `promoteBuffers`\n * - [`collation`](./api.html#aggregate_Aggregate-collation)\n * - `comment`\n * - [`session`](./api.html#aggregate_Aggregate-session)\n *\n * @property options\n * @memberOf Aggregate\n * @api public\n */\n\nAggregate.prototype.options;\n\n/**\n * Get/set the model that this aggregation will execute on.\n *\n * ####Example:\n *     const aggregate = MyModel.aggregate([{ $match: { answer: 42 } }]);\n *     aggregate.model() === MyModel; // true\n *\n *     // Change the model. There's rarely any reason to do this.\n *     aggregate.model(SomeOtherModel);\n *     aggregate.model() === SomeOtherModel; // true\n *\n * @param {Model} [model] set the model associated with this aggregate.\n * @return {Model}\n * @api public\n */\n\nAggregate.prototype.model = function(model) {\n  if (arguments.length === 0) {\n    return this._model;\n  }\n\n  this._model = model;\n  if (model.schema != null) {\n    if (this.options.readPreference == null &&\n        model.schema.options.read != null) {\n      this.options.readPreference = model.schema.options.read;\n    }\n    if (this.options.collation == null &&\n        model.schema.options.collation != null) {\n      this.options.collation = model.schema.options.collation;\n    }\n  }\n\n  return model;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * ####Examples:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     const pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {Object} ops operator(s) to append\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function() {\n  const args = (arguments.length === 1 && util.isArray(arguments[0]))\n    ? arguments[0]\n    : utils.args(arguments);\n\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n\n  this._pipeline = this._pipeline.concat(args);\n\n  return this;\n};\n\n/**\n * Appends a new $addFields operator to this aggregate pipeline.\n * Requires MongoDB v3.4+ to work\n *\n * ####Examples:\n  *\n *     // adding new fields based on existing fields\n *     aggregate.addFields({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.addFields({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object} arg field specification\n * @see $addFields https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/\n * @return {Aggregate}\n * @api public\n */\nAggregate.prototype.addFields = function(arg) {\n  const fields = {};\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else {\n    throw new Error('Invalid addFields() argument. Must be an object');\n  }\n  return this.append({ $addFields: fields });\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](#query_Query-select) is also supported.\n *\n * ####Examples:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function(arg) {\n  const fields = {};\n\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n\n  return this.append({ $project: fields });\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" ] } });\n *\n * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.skip(10);\n *\n * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @instance\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.limit(10);\n *\n * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @instance\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * ####NOTE:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * ####Examples:\n *\n *     aggregate.near({\n *       near: [40.724, -73.997],\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       uniqueDocs: true,\n *       num: 5\n *     });\n *\n * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @instance\n * @param {Object} arg\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function(arg) {\n  const op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out'.split(' ').forEach(function($operator) {\n  Aggregate.prototype[$operator] = function(arg) {\n    const op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *     aggregate.unwind({ path: '$tags', preserveNullAndEmptyArrays: true });\n *\n * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/\n * @param {String|Object} fields the field(s) to unwind, either as field names or as [objects with options](https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/#document-operand-with-options). If passing a string, prefixing the field name with '$' is optional. If passing an object, `path` must start with '$'.\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function() {\n  const args = utils.args(arguments);\n\n  const res = [];\n  for (const arg of args) {\n    if (arg && typeof arg === 'object') {\n      res.push({ $unwind: arg });\n    } else if (typeof arg === 'string') {\n      res.push({\n        $unwind: (arg && arg.startsWith('$')) ? arg : '$' + arg\n      });\n    } else {\n      throw new Error('Invalid arg \"' + arg + '\" to unwind(), ' +\n        'must be string or object');\n    }\n  }\n\n  return this.append.apply(this, res);\n};\n\n/**\n * Appends a new $replaceRoot operator to this aggregate pipeline.\n *\n * Note that the `$replaceRoot` operator requires field strings to start with '$'.\n * If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'.\n * If you are passing in an object the strings in your expression will not be altered.\n *\n * ####Examples:\n *\n *     aggregate.replaceRoot(\"user\");\n *\n *     aggregate.replaceRoot({ x: { $concat: ['$this', '$that'] } });\n *\n * @see $replaceRoot https://docs.mongodb.org/manual/reference/operator/aggregation/replaceRoot\n * @param {String|Object} the field or document which will become the new root document\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.replaceRoot = function(newRoot) {\n  let ret;\n\n  if (typeof newRoot === 'string') {\n    ret = newRoot.startsWith('$') ? newRoot : '$' + newRoot;\n  } else {\n    ret = newRoot;\n  }\n\n  return this.append({\n    $replaceRoot: {\n      newRoot: ret\n    }\n  });\n};\n\n/**\n * Appends a new $count operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.count(\"userCount\");\n *\n * @see $count https://docs.mongodb.org/manual/reference/operator/aggregation/count\n * @param {String} the name of the count field\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.count = function(countName) {\n  return this.append({ $count: countName });\n};\n\n/**\n * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name\n * or a pipeline object.\n *\n * Note that the `$sortByCount` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field name doesn't start with '$'.\n *\n * ####Examples:\n *\n *     aggregate.sortByCount('users');\n *     aggregate.sortByCount({ $mergeObjects: [ \"$employee\", \"$business\" ] })\n *\n * @see $sortByCount https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sortByCount = function(arg) {\n  if (arg && typeof arg === 'object') {\n    return this.append({ $sortByCount: arg });\n  } else if (typeof arg === 'string') {\n    return this.append({\n      $sortByCount: (arg && arg.startsWith('$')) ? arg : '$' + arg\n    });\n  } else {\n    throw new TypeError('Invalid arg \"' + arg + '\" to sortByCount(), ' +\n      'must be string or object');\n  }\n};\n\n/**\n * Appends new custom $lookup operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}* @api public\n */\n\nAggregate.prototype.lookup = function(options) {\n  return this.append({ $lookup: options });\n};\n\n/**\n * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.\n *\n * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `{ allowDiskUse: true }` is specified.\n *\n * #### Examples:\n *      // Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n *      aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites\n *\n * @see $graphLookup https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup\n * @param {Object} options to $graphLookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.graphLookup = function(options) {\n  const cloneOptions = {};\n  if (options) {\n    if (!utils.isObject(options)) {\n      throw new TypeError('Invalid graphLookup() argument. Must be an object.');\n    }\n\n    utils.mergeClone(cloneOptions, options);\n    const startWith = cloneOptions.startWith;\n\n    if (startWith && typeof startWith === 'string') {\n      cloneOptions.startWith = cloneOptions.startWith.startsWith('$') ?\n        cloneOptions.startWith :\n        '$' + cloneOptions.startWith;\n    }\n\n  }\n  return this.append({ $graphLookup: cloneOptions });\n};\n\n/**\n * Appends new custom $sample operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function(size) {\n  return this.append({ $sample: { size: size } });\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Examples:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function(arg) {\n  // TODO refactor to reuse the query builder logic\n\n  const sort = {};\n\n  if (getConstructorName(arg) === 'Object') {\n    const desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function(field) {\n      // If sorting by text score, skip coercing into 1/-1\n      if (arg[field] instanceof Object && arg[field].$meta) {\n        sort[field] = arg[field];\n        return;\n      }\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      const ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n\n  return this.append({ $sort: sort });\n};\n\n/**\n * Appends new $unionWith operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.unionWith({ coll: 'users', pipeline: [ { $match: { _id: 1 } } ] });\n *\n * @see $unionWith https://docs.mongodb.com/manual/reference/operator/aggregation/unionWith\n * @param {Object} options to $unionWith query as described in the above link\n * @return {Aggregate}* @api public\n */\n\nAggregate.prototype.unionWith = function(options) {\n  return this.append({ $unionWith: options });\n};\n\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * ####Example:\n *\n *     await Model.aggregate(pipeline).read('primaryPreferred');\n *\n * @param {String} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n */\n\nAggregate.prototype.read = function(pref, tags) {\n  if (!this.options) {\n    this.options = {};\n  }\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Sets the readConcern level for the aggregation query.\n *\n * ####Example:\n *\n *     await Model.aggregate(pipeline).readConcern('majority');\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.readConcern = function(level) {\n  if (!this.options) {\n    this.options = {};\n  }\n  readConcern.call(this, level);\n  return this;\n};\n\n/**\n * Appends a new $redact operator to this aggregate pipeline.\n *\n * If 3 arguments are supplied, Mongoose will wrap them with if-then-else of $cond operator respectively\n * If `thenExpr` or `elseExpr` is string, make sure it starts with $$, like `$$DESCEND`, `$$PRUNE` or `$$KEEP`.\n *\n * ####Example:\n *\n *     await Model.aggregate(pipeline).redact({\n *       $cond: {\n *         if: { $eq: [ '$level', 5 ] },\n *         then: '$$PRUNE',\n *         else: '$$DESCEND'\n *       }\n *     });\n *\n *     // $redact often comes with $cond operator, you can also use the following syntax provided by mongoose\n *     await Model.aggregate(pipeline).redact({ $eq: [ '$level', 5 ] }, '$$PRUNE', '$$DESCEND');\n *\n * @param {Object} expression redact options or conditional expression\n * @param {String|Object} [thenExpr] true case for the condition\n * @param {String|Object} [elseExpr] false case for the condition\n * @return {Aggregate} this\n * @see $redact https://docs.mongodb.com/manual/reference/operator/aggregation/redact/\n * @api public\n */\n\nAggregate.prototype.redact = function(expression, thenExpr, elseExpr) {\n  if (arguments.length === 3) {\n    if ((typeof thenExpr === 'string' && !thenExpr.startsWith('$$')) ||\n        (typeof elseExpr === 'string' && !elseExpr.startsWith('$$'))) {\n      throw new Error('If thenExpr or elseExpr is string, it must start with $$. e.g. $$DESCEND, $$PRUNE, $$KEEP');\n    }\n\n    expression = {\n      $cond: {\n        if: expression,\n        then: thenExpr,\n        else: elseExpr\n      }\n    };\n  } else if (arguments.length !== 1) {\n    throw new TypeError('Invalid arguments');\n  }\n\n  return this.append({ $redact: expression });\n};\n\n/**\n * Execute the aggregation with explain\n *\n * ####Example:\n *\n *     Model.aggregate(..).explain(callback)\n *\n * @param {Function} callback\n * @return {Promise}\n */\n\nAggregate.prototype.explain = function(callback) {\n  const model = this._model;\n\n  return promiseOrCallback(callback, cb => {\n    if (!this._pipeline.length) {\n      const err = new Error('Aggregate has empty pipeline');\n      return cb(err);\n    }\n\n    prepareDiscriminatorPipeline(this._pipeline, this._model.schema);\n\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n\n      this.options.explain = true;\n\n      model.collection.aggregate(this._pipeline, this.options, (error, cursor) => {\n        if (error != null) {\n          const _opts = { error: error };\n          return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n            cb(error);\n          });\n        }\n        cursor.explain((error, result) => {\n          const _opts = { error: error };\n          return model.hooks.execPost('aggregate', this, [result], _opts, error => {\n            if (error) {\n              return cb(error);\n            }\n            return cb(null, result);\n          });\n        });\n      });\n    });\n  }, model.events);\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)\n *\n * ####Example:\n *\n *     await Model.aggregate([{ $match: { foo: 'bar' } }]).allowDiskUse(true);\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function(value) {\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Sets the hint option for the aggregation query (ignored for < 3.6.0)\n *\n * ####Example:\n *\n *     Model.aggregate(..).hint({ qty: 1, category: 1 }).exec(callback)\n *\n * @param {Object|String} value a hint object or the index name\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.hint = function(value) {\n  this.options.hint = value;\n  return this;\n};\n\n/**\n * Sets the session for this aggregation. Useful for [transactions](/docs/transactions.html).\n *\n * ####Example:\n *\n *     const session = await Model.startSession();\n *     await Model.aggregate(..).session(session);\n *\n * @param {ClientSession} session\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.session = function(session) {\n  if (session == null) {\n    delete this.options.session;\n  } else {\n    this.options.session = session;\n  }\n  return this;\n};\n\n/**\n * Lets you set arbitrary options, for middleware or plugins.\n *\n * ####Example:\n *\n *     const agg = Model.aggregate(..).option({ allowDiskUse: true }); // Set the `allowDiskUse` option\n *     agg.options; // `{ allowDiskUse: true }`\n *\n * @param {Object} options keys to merge into current options\n * @param [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n * @param [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation\n * @param [options.collation] object see [`Aggregate.prototype.collation()`](./docs/api.html#aggregate_Aggregate-collation)\n * @param [options.session] ClientSession see [`Aggregate.prototype.session()`](./docs/api.html#aggregate_Aggregate-session)\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.option = function(value) {\n  for (const key in value) {\n    this.options[key] = value[key];\n  }\n  return this;\n};\n\n/**\n * Sets the `cursor` option and executes this aggregation, returning an aggregation cursor.\n * Cursors are useful if you want to process the results of the aggregation one-at-a-time\n * because the aggregation result is too big to fit into memory.\n *\n * ####Example:\n *\n *     const cursor = Model.aggregate(..).cursor({ batchSize: 1000 });\n *     cursor.eachAsync(function(doc, i) {\n *       // use doc\n *     });\n *\n * @param {Object} options\n * @param {Number} options.batchSize set the cursor batch size\n * @param {Boolean} [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)\n * @return {AggregationCursor} cursor representing this aggregation\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function(options) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.cursor = options || {};\n  return new AggregationCursor(this); // return this;\n};\n\n/**\n * Adds a collation\n *\n * ####Example:\n *\n *     const res = await Model.aggregate(pipeline).collation({ locale: 'en_US', strength: 1 });\n *\n * @param {Object} collation options\n * @return {Aggregate} this\n * @api public\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#aggregate\n */\n\nAggregate.prototype.collation = function(collation) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.collation = collation;\n  return this;\n};\n\n/**\n * Combines multiple aggregation pipelines.\n *\n * ####Example:\n *\n *     const res = await Model.aggregate().facet({\n *       books: [{ groupBy: '$author' }],\n *       price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n *     });\n *\n *     // Output: { books: [...], price: [{...}, {...}] }\n *\n * @param {Object} facet options\n * @return {Aggregate} this\n * @see $facet https://docs.mongodb.com/v3.4/reference/operator/aggregation/facet/\n * @api public\n */\n\nAggregate.prototype.facet = function(options) {\n  return this.append({ $facet: options });\n};\n\n/**\n * Helper for [Atlas Text Search](https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/)'s\n * `$search` stage.\n *\n * ####Example:\n *\n *     const res = await Model.aggregate().\n *      search({\n *        text: {\n *          query: 'baseball',\n *          path: 'plot'\n *        }\n *      });\n *\n *     // Output: [{ plot: '...', title: '...' }]\n *\n * @param {Object} $search options\n * @return {Aggregate} this\n * @see $search https://docs.atlas.mongodb.com/reference/atlas-search/tutorial/\n * @api public\n */\n\nAggregate.prototype.search = function(options) {\n  return this.append({ $search: options });\n};\n\n/**\n * Returns the current pipeline\n *\n * ####Example:\n *\n *     MyModel.aggregate().match({ test: 1 }).pipeline(); // [{ $match: { test: 1 } }]\n *\n * @return {Array}\n * @api public\n */\n\n\nAggregate.prototype.pipeline = function() {\n  return this._pipeline;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * ####Example:\n *\n *     aggregate.exec(callback);\n *\n *     // Because a promise is returned, the `callback` is optional.\n *     const promise = aggregate.exec();\n *     promise.then(..);\n *\n * @see Promise #promise_Promise\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = function(callback) {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  const model = this._model;\n  const collection = this._model.collection;\n\n  applyGlobalMaxTimeMS(this.options, model);\n\n  if (this.options && this.options.cursor) {\n    return new AggregationCursor(this);\n  }\n\n  return promiseOrCallback(callback, cb => {\n    prepareDiscriminatorPipeline(this._pipeline, this._model.schema);\n    stringifyFunctionOperators(this._pipeline);\n\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        const _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n      if (!this._pipeline.length) {\n        return cb(new Error('Aggregate has empty pipeline'));\n      }\n\n      const options = utils.clone(this.options || {});\n\n      collection.aggregate(this._pipeline, options, (err, cursor) => {\n        if (err != null) {\n          return cb(err);\n        }\n\n        cursor.toArray((error, result) => {\n          const _opts = { error: error };\n          model.hooks.execPost('aggregate', this, [result], _opts, (error, result) => {\n            if (error) {\n              return cb(error);\n            }\n\n            cb(null, result);\n          });\n        });\n      });\n    });\n  }, model.events);\n};\n\n/**\n * Provides promise for aggregate.\n *\n * ####Example:\n *\n *     Model.aggregate(..).then(successCallback, errorCallback);\n *\n * @see Promise #promise_Promise\n * @param {Function} [resolve] successCallback\n * @param {Function} [reject]  errorCallback\n * @return {Promise}\n */\nAggregate.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like [`.then()`](#query_Query-then), but only takes a rejection handler.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Aggregate\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Aggregate.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor({ useMongooseAggCursor: true }).\n      transformNull().\n      _transformForAsyncIterator();\n  };\n}\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  if (typeof obj !== 'object') {\n    return false;\n  }\n\n  const k = Object.keys(obj);\n\n  return k.length === 1 && k.some(key => { return key[0] === '$'; });\n}\n\n/*!\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n */\n\nAggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;\n","/*!\n * Module dependencies.\n */\n\n\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](/docs/api.html#aggregate_Aggregate-cursor) instead.\n *\n * @param {Aggregate} agg\n * @param {Object} options\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  const model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n  this._mongooseOptions = {};\n\n  _init(model, this, agg);\n}\n\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function() {\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function() {\n      model.hooks.execPre('aggregate', agg, function() {\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nAggregationCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\nif (Symbol.asyncIterator != null) {\n  const msg = 'Mongoose does not support using async iterators with an ' +\n    'existing aggregation cursor. See http://bit.ly/mongoose-async-iterate-aggregation';\n\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    throw new MongooseError(msg);\n  };\n}\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {AggregationCursor}\n * @api public\n * @method map\n */\n\nAggregationCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nAggregationCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nAggregationCursor.prototype.close = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  });\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = function(callback) {\n  return promiseOrCallback(callback, cb => {\n    _next(this, cb);\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function(fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * ####Example\n *\n *     // Async iterator without explicitly calling `cursor()`. Mongoose still\n *     // creates an AggregationCursor instance internally.\n *     const agg = Model.aggregate([{ $match: { age: { $gte: 25 } } }]);\n *     for await (const doc of agg) {\n *       console.log(doc.name);\n *     }\n *\n *     // You can also use an AggregationCursor instance for async iteration\n *     const cursor = Model.aggregate([{ $match: { age: { $gte: 25 } } }]).cursor();\n *     for await (const doc of cursor) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not set if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf AggregationCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  AggregationCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nAggregationCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next(function(error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      if (!doc) {\n        return callback(null, null);\n      }\n\n      callback(null, doc);\n    });\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\nmodule.exports = AggregationCursor;\n","\n\nmodule.exports = function prepareDiscriminatorPipeline(pipeline, schema, prefix) {\n  const discriminatorMapping = schema && schema.discriminatorMapping;\n  prefix = prefix || '';\n\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    const originalPipeline = pipeline;\n    const filterKey = (prefix.length > 0 ? prefix + '.' : prefix) + discriminatorMapping.key;\n    const discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] != null && originalPipeline[0].$match && !originalPipeline[0].$match[filterKey]) {\n      originalPipeline[0].$match[filterKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] != null && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query =\n          originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[filterKey] = discriminatorValue;\n    } else if (originalPipeline[0] != null && originalPipeline[0].$search) {\n      if (originalPipeline[1] && originalPipeline[1].$match != null) {\n        originalPipeline[1].$match[filterKey] = originalPipeline[1].$match[filterKey] || discriminatorValue;\n      } else {\n        const match = {};\n        match[filterKey] = discriminatorValue;\n        originalPipeline.splice(1, 0, { $match: match });\n      }\n    } else {\n      const match = {};\n      match[filterKey] = discriminatorValue;\n      originalPipeline.unshift({ $match: match });\n    }\n  }\n};","\n\nmodule.exports = function stringifyFunctionOperators(pipeline) {\n  if (!Array.isArray(pipeline)) {\n    return;\n  }\n\n  for (const stage of pipeline) {\n    if (stage == null) {\n      continue;\n    }\n\n    const canHaveAccumulator = stage.$group || stage.$bucket || stage.$bucketAuto;\n    if (canHaveAccumulator != null) {\n      for (const key of Object.keys(canHaveAccumulator)) {\n        handleAccumulator(canHaveAccumulator[key]);\n      }\n    }\n\n    const stageType = Object.keys(stage)[0];\n    if (stageType && typeof stage[stageType] === 'object') {\n      const stageOptions = stage[stageType];\n      for (const key of Object.keys(stageOptions)) {\n        if (stageOptions[key] != null &&\n            stageOptions[key].$function != null &&\n            typeof stageOptions[key].$function.body === 'function') {\n          stageOptions[key].$function.body = stageOptions[key].$function.body.toString();\n        }\n      }\n    }\n\n    if (stage.$facet != null) {\n      for (const key of Object.keys(stage.$facet)) {\n        stringifyFunctionOperators(stage.$facet[key]);\n      }\n    }\n  }\n};\n\nfunction handleAccumulator(operator) {\n  if (operator == null || operator.$accumulator == null) {\n    return;\n  }\n\n  for (const key of ['init', 'accumulate', 'merge', 'finalize']) {\n    if (typeof operator.$accumulator[key] === 'function') {\n      operator.$accumulator[key] = String(operator.$accumulator[key]);\n    }\n  }\n}","\n\nconst clone = require('../helpers/clone');\n\nclass RemoveOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\n\nmodule.exports = RemoveOptions;","\n\nconst clone = require('../helpers/clone');\n\nclass SaveOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\n\nmodule.exports = SaveOptions;","\n\nconst get = require('../get');\nconst utils = require('../../utils');\n\n/*!\n * Register methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nmodule.exports = function applyMethods(model, schema) {\n  function apply(method, schema) {\n    Object.defineProperty(model.prototype, method, {\n      get: function() {\n        const h = {};\n        for (const k in schema.methods[method]) {\n          h[k] = schema.methods[method][k].bind(this);\n        }\n        return h;\n      },\n      configurable: true\n    });\n  }\n  for (const method of Object.keys(schema.methods)) {\n    const fn = schema.methods[method];\n    if (schema.tree.hasOwnProperty(method)) {\n      throw new Error('You have a method and a property in your schema both ' +\n        'named \"' + method + '\"');\n    }\n    if (schema.reserved[method] &&\n        !get(schema, `methodOptions.${method}.suppressWarning`, false)) {\n      utils.warn(`mongoose: the method name \"${method}\" is used by mongoose ` +\n        'internally, overwriting it may cause bugs. If you\\'re sure you know ' +\n        'what you\\'re doing, you can suppress this error by using ' +\n        `\\`schema.method('${method}', fn, { suppressWarning: true })\\`.`);\n    }\n    if (typeof fn === 'function') {\n      model.prototype[method] = fn;\n    } else {\n      apply(method, schema);\n    }\n  }\n\n  // Recursively call `applyMethods()` on child schemas\n  model.$appliedMethods = true;\n  for (const key of Object.keys(schema.paths)) {\n    const type = schema.paths[key];\n    if (type.$isSingleNested && !type.caster.$appliedMethods) {\n      applyMethods(type.caster, type.schema);\n    }\n    if (type.$isMongooseDocumentArray && !type.Constructor.$appliedMethods) {\n      applyMethods(type.Constructor, type.schema);\n    }\n  }\n};\n","\n\nconst middlewareFunctions = require('../query/applyQueryMiddleware').middlewareFunctions;\nconst promiseOrCallback = require('../promiseOrCallback');\n\nmodule.exports = function applyStaticHooks(model, hooks, statics) {\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1\n  };\n\n  hooks = hooks.filter(hook => {\n    // If the custom static overwrites an existing query middleware, don't apply\n    // middleware to it by default. This avoids a potential backwards breaking\n    // change with plugins like `mongoose-delete` that use statics to overwrite\n    // built-in Mongoose functions.\n    if (middlewareFunctions.indexOf(hook.name) !== -1) {\n      return !!hook.model;\n    }\n    return hook.model !== false;\n  });\n\n  model.$__insertMany = hooks.createWrapper('insertMany',\n    model.$__insertMany, model, kareemOptions);\n\n  for (const key of Object.keys(statics)) {\n    if (hooks.hasHooks(key)) {\n      const original = model[key];\n\n      model[key] = function() {\n        const numArgs = arguments.length;\n        const lastArg = numArgs > 0 ? arguments[numArgs - 1] : null;\n        const cb = typeof lastArg === 'function' ? lastArg : null;\n        const args = Array.prototype.slice.\n          call(arguments, 0, cb == null ? numArgs : numArgs - 1);\n        // Special case: can't use `Kareem#wrap()` because it doesn't currently\n        // support wrapped functions that return a promise.\n        return promiseOrCallback(cb, callback => {\n          hooks.execPre(key, model, args, function(err) {\n            if (err != null) {\n              return callback(err);\n            }\n\n            let postCalled = 0;\n            const ret = original.apply(model, args.concat(post));\n            if (ret != null && typeof ret.then === 'function') {\n              ret.then(res => post(null, res), err => post(err));\n            }\n\n            function post(error, res) {\n              if (postCalled++ > 0) {\n                return;\n              }\n\n              if (error != null) {\n                return callback(error);\n              }\n\n              hooks.execPost(key, model, [res], function(error) {\n                if (error != null) {\n                  return callback(error);\n                }\n                callback(null, res);\n              });\n            }\n          });\n        }, model.events);\n      };\n    }\n  }\n};","\n\n/*!\n * Register statics for this model\n * @param {Model} model\n * @param {Schema} schema\n */\nmodule.exports = function applyStatics(model, schema) {\n  for (const i in schema.statics) {\n    model[i] = schema.statics[i];\n  }\n};\n","\n\nconst MongooseMap = require('../../types/map');\nconst SkipPopulateValue = require('./SkipPopulateValue');\nconst assignRawDocsToIdStructure = require('./assignRawDocsToIdStructure');\nconst get = require('../get');\nconst getVirtual = require('./getVirtual');\nconst leanPopulateMap = require('./leanPopulateMap');\nconst lookupLocalFields = require('./lookupLocalFields');\nconst markArraySubdocsPopulated = require('./markArraySubdocsPopulated');\nconst mpath = require('mpath');\nconst sift = require('sift').default;\nconst utils = require('../../utils');\nconst { populateModelSymbol } = require('../symbols');\n\nmodule.exports = function assignVals(o) {\n  // Options that aren't explicitly listed in `populateOptions`\n  const userOptions = Object.assign({}, get(o, 'allOptions.options.options'), get(o, 'allOptions.options'));\n  // `o.options` contains options explicitly listed in `populateOptions`, like\n  // `match` and `limit`.\n  const populateOptions = Object.assign({}, o.options, userOptions, {\n    justOne: o.justOne\n  });\n  populateOptions.$nullIfNotFound = o.isVirtual;\n  const populatedModel = o.populatedModel;\n\n  const originalIds = [].concat(o.rawIds);\n\n  // replace the original ids in our intermediate _ids structure\n  // with the documents found by query\n  o.allIds = [].concat(o.allIds);\n  assignRawDocsToIdStructure(o.rawIds, o.rawDocs, o.rawOrder, populateOptions);\n\n  // now update the original documents being populated using the\n  // result structure that contains real documents.\n  const docs = o.docs;\n  const rawIds = o.rawIds;\n  const options = o.options;\n  const count = o.count && o.isVirtual;\n  let i;\n\n  function setValue(val) {\n    if (count) {\n      return val;\n    }\n    if (val instanceof SkipPopulateValue) {\n      return val.val;\n    }\n    if (val === void 0) {\n      return val;\n    }\n\n    const _allIds = o.allIds[i];\n\n    if (o.justOne === true && Array.isArray(val)) {\n      // Might be an embedded discriminator (re: gh-9244) with multiple models, so make sure to pick the right\n      // model before assigning.\n      const ret = [];\n      for (const doc of val) {\n        const _docPopulatedModel = leanPopulateMap.get(doc);\n        if (_docPopulatedModel == null || _docPopulatedModel === populatedModel) {\n          ret.push(doc);\n        }\n      }\n      // Since we don't want to have to create a new mongoosearray, make sure to\n      // modify the array in place\n      while (val.length > ret.length) {\n        Array.prototype.pop.apply(val, []);\n      }\n      for (let i = 0; i < ret.length; ++i) {\n        val[i] = ret[i];\n      }\n\n      return valueFilter(val[0], options, populateOptions, _allIds);\n    } else if (o.justOne === false && !Array.isArray(val)) {\n      return valueFilter([val], options, populateOptions, _allIds);\n    }\n    return valueFilter(val, options, populateOptions, _allIds);\n  }\n\n  for (i = 0; i < docs.length; ++i) {\n    const _path = o.path.endsWith('.$*') ? o.path.slice(0, -3) : o.path;\n    const existingVal = mpath.get(_path, docs[i], lookupLocalFields);\n    if (existingVal == null && !getVirtual(o.originalModel.schema, _path)) {\n      continue;\n    }\n\n    let valueToSet;\n    if (count) {\n      valueToSet = numDocs(rawIds[i]);\n    } else if (Array.isArray(o.match)) {\n      valueToSet = Array.isArray(rawIds[i]) ?\n        rawIds[i].filter(sift(o.match[i])) :\n        [rawIds[i]].filter(sift(o.match[i]))[0];\n    } else {\n      valueToSet = rawIds[i];\n    }\n\n    // If we're populating a map, the existing value will be an object, so\n    // we need to transform again\n    const originalSchema = o.originalModel.schema;\n    const isDoc = get(docs[i], '$__', null) != null;\n    let isMap = isDoc ?\n      existingVal instanceof Map :\n      utils.isPOJO(existingVal);\n    // If we pass the first check, also make sure the local field's schematype\n    // is map (re: gh-6460)\n    isMap = isMap && get(originalSchema._getSchema(_path), '$isSchemaMap');\n    if (!o.isVirtual && isMap) {\n      const _keys = existingVal instanceof Map ?\n        Array.from(existingVal.keys()) :\n        Object.keys(existingVal);\n      valueToSet = valueToSet.reduce((cur, v, i) => {\n        cur.set(_keys[i], v);\n        return cur;\n      }, new Map());\n    }\n\n    if (isDoc && Array.isArray(valueToSet)) {\n      for (const val of valueToSet) {\n        if (val != null && val.$__ != null) {\n          val.$__.parent = docs[i];\n        }\n      }\n    } else if (isDoc && valueToSet != null && valueToSet.$__ != null) {\n      valueToSet.$__.parent = docs[i];\n    }\n\n    if (o.isVirtual && isDoc) {\n      docs[i].$populated(_path, o.justOne ? originalIds[0] : originalIds, o.allOptions);\n      // If virtual populate and doc is already init-ed, need to walk through\n      // the actual doc to set rather than setting `_doc` directly\n      if (Array.isArray(valueToSet)) {\n        valueToSet = valueToSet.map(v => v == null ? void 0 : v);\n      }\n      mpath.set(_path, valueToSet, docs[i], void 0, setValue, false);\n      continue;\n    }\n\n    const parts = _path.split('.');\n    let cur = docs[i];\n    const curPath = parts[0];\n    for (let j = 0; j < parts.length - 1; ++j) {\n      // If we get to an array with a dotted path, like `arr.foo`, don't set\n      // `foo` on the array.\n      if (Array.isArray(cur) && !utils.isArrayIndex(parts[j])) {\n        break;\n      }\n\n      if (parts[j] === '$*') {\n        break;\n      }\n\n      if (cur[parts[j]] == null) {\n        // If nothing to set, avoid creating an unnecessary array. Otherwise\n        // we'll end up with a single doc in the array with only defaults.\n        // See gh-8342, gh-8455\n        const schematype = originalSchema._getSchema(curPath);\n        if (valueToSet == null && schematype != null && schematype.$isMongooseArray) {\n          break;\n        }\n        cur[parts[j]] = {};\n      }\n      cur = cur[parts[j]];\n      // If the property in MongoDB is a primitive, we won't be able to populate\n      // the nested path, so skip it. See gh-7545\n      if (typeof cur !== 'object') {\n        break;\n      }\n    }\n    if (docs[i].$__) {\n      o.allOptions.options[populateModelSymbol] = o.allOptions.model;\n      docs[i].$populated(_path, o.unpopulatedValues[i], o.allOptions.options);\n\n      if (valueToSet instanceof Map && !valueToSet.$isMongooseMap) {\n        valueToSet = new MongooseMap(valueToSet, _path, docs[i], docs[i].schema.path(_path).$__schemaType);\n      }\n    }\n\n    // If lean, need to check that each individual virtual respects\n    // `justOne`, because you may have a populated virtual with `justOne`\n    // underneath an array. See gh-6867\n    mpath.set(_path, valueToSet, docs[i], lookupLocalFields, setValue, false);\n\n    if (docs[i].$__) {\n      markArraySubdocsPopulated(docs[i], [o.allOptions.options]);\n    }\n  }\n};\n\nfunction numDocs(v) {\n  if (Array.isArray(v)) {\n    // If setting underneath an array of populated subdocs, we may have an\n    // array of arrays. See gh-7573\n    if (v.some(el => Array.isArray(el))) {\n      return v.map(el => numDocs(el));\n    }\n    return v.length;\n  }\n  return v == null ? 0 : 1;\n}\n\n/*!\n * 1) Apply backwards compatible find/findOne behavior to sub documents\n *\n *    find logic:\n *      a) filter out non-documents\n *      b) remove _id from sub docs when user specified\n *\n *    findOne\n *      a) if no doc found, set to null\n *      b) remove _id from sub docs when user specified\n *\n * 2) Remove _ids when specified by users query.\n *\n * background:\n * _ids are left in the query even when user excludes them so\n * that population mapping can occur.\n */\n\nfunction valueFilter(val, assignmentOpts, populateOptions, allIds) {\n  const userSpecifiedTransform = typeof populateOptions.transform === 'function';\n  const transform = userSpecifiedTransform ? populateOptions.transform : noop;\n  if (Array.isArray(val)) {\n    // find logic\n    const ret = [];\n    const numValues = val.length;\n    for (let i = 0; i < numValues; ++i) {\n      let subdoc = val[i];\n      const _allIds = Array.isArray(allIds) ? allIds[i] : allIds;\n      if (!isPopulatedObject(subdoc) && (!populateOptions.retainNullValues || subdoc != null) && !userSpecifiedTransform) {\n        continue;\n      } else if (userSpecifiedTransform) {\n        subdoc = transform(isPopulatedObject(subdoc) ? subdoc : null, _allIds);\n      }\n      maybeRemoveId(subdoc, assignmentOpts);\n      ret.push(subdoc);\n      if (assignmentOpts.originalLimit &&\n          ret.length >= assignmentOpts.originalLimit) {\n        break;\n      }\n    }\n\n    // Since we don't want to have to create a new mongoosearray, make sure to\n    // modify the array in place\n    while (val.length > ret.length) {\n      Array.prototype.pop.apply(val, []);\n    }\n    for (let i = 0; i < ret.length; ++i) {\n      if (val.isMongooseArrayProxy) {\n        val.set(i, ret[i], true);\n      } else {\n        val[i] = ret[i];\n      }\n    }\n    return val;\n  }\n\n  // findOne\n  if (isPopulatedObject(val) || utils.isPOJO(val)) {\n    maybeRemoveId(val, assignmentOpts);\n    return transform(val, allIds);\n  }\n  if (val instanceof Map) {\n    return val;\n  }\n\n  if (populateOptions.justOne === false) {\n    return [];\n  }\n\n  return val == null ? transform(val, allIds) : transform(null, allIds);\n}\n\n/*!\n * Remove _id from `subdoc` if user specified \"lean\" query option\n */\n\nfunction maybeRemoveId(subdoc, assignmentOpts) {\n  if (subdoc != null && assignmentOpts.excludeId) {\n    if (typeof subdoc.$__setValue === 'function') {\n      delete subdoc._doc._id;\n    } else {\n      delete subdoc._id;\n    }\n  }\n}\n\n/*!\n * Determine if `obj` is something we can set a populated path to. Can be a\n * document, a lean document, or an array/map that contains docs.\n */\n\nfunction isPopulatedObject(obj) {\n  if (obj == null) {\n    return false;\n  }\n\n  return Array.isArray(obj) ||\n    obj.$isMongooseMap ||\n    obj.$__ != null ||\n    leanPopulateMap.has(obj);\n}\n\nfunction noop(v) {\n  return v;\n}","\n\nmodule.exports = function SkipPopulateValue(val) {\n  if (!(this instanceof SkipPopulateValue)) {\n    return new SkipPopulateValue(val);\n  }\n\n  this.val = val;\n  return this;\n};","\n\nconst leanPopulateMap = require('./leanPopulateMap');\nconst modelSymbol = require('../symbols').modelSymbol;\nconst utils = require('../../utils');\n\nmodule.exports = assignRawDocsToIdStructure;\n\n/*!\n * Assign `vals` returned by mongo query to the `rawIds`\n * structure returned from utils.getVals() honoring\n * query sort order if specified by user.\n *\n * This can be optimized.\n *\n * Rules:\n *\n *   if the value of the path is not an array, use findOne rules, else find.\n *   for findOne the results are assigned directly to doc path (including null results).\n *   for find, if user specified sort order, results are assigned directly\n *   else documents are put back in original order of array if found in results\n *\n * @param {Array} rawIds\n * @param {Array} vals\n * @param {Boolean} sort\n * @api private\n */\n\nfunction assignRawDocsToIdStructure(rawIds, resultDocs, resultOrder, options, recursed) {\n  // honor user specified sort order\n  const newOrder = [];\n  const sorting = options.sort && rawIds.length > 1;\n  const nullIfNotFound = options.$nullIfNotFound;\n  let doc;\n  let sid;\n  let id;\n\n  if (rawIds.isMongooseArrayProxy) {\n    rawIds = rawIds.__array;\n  }\n\n  for (let i = 0; i < rawIds.length; ++i) {\n    id = rawIds[i];\n\n    if (Array.isArray(id)) {\n      // handle [ [id0, id2], [id3] ]\n      assignRawDocsToIdStructure(id, resultDocs, resultOrder, options, true);\n      newOrder.push(id);\n      continue;\n    }\n\n    if (id === null && !sorting) {\n      // keep nulls for findOne unless sorting, which always\n      // removes them (backward compat)\n      newOrder.push(id);\n      continue;\n    }\n\n    sid = String(id);\n\n    doc = resultDocs[sid];\n    // If user wants separate copies of same doc, use this option\n    if (options.clone && doc != null) {\n      if (options.lean) {\n        const _model = leanPopulateMap.get(doc);\n        doc = utils.clone(doc);\n        leanPopulateMap.set(doc, _model);\n      } else {\n        doc = doc.constructor.hydrate(doc._doc);\n      }\n    }\n\n    if (recursed) {\n      if (doc) {\n        if (sorting) {\n          const _resultOrder = resultOrder[sid];\n          if (Array.isArray(_resultOrder) && Array.isArray(doc) && _resultOrder.length === doc.length) {\n            newOrder.push(doc);\n          } else {\n            newOrder[_resultOrder] = doc;\n          }\n        } else {\n          newOrder.push(doc);\n        }\n      } else if (id != null && id[modelSymbol] != null) {\n        newOrder.push(id);\n      } else {\n        newOrder.push(options.retainNullValues || nullIfNotFound ? null : id);\n      }\n    } else {\n      // apply findOne behavior - if document in results, assign, else assign null\n      newOrder[i] = doc || null;\n    }\n  }\n\n  rawIds.length = 0;\n  if (newOrder.length) {\n    // reassign the documents based on corrected order\n\n    // forEach skips over sparse entries in arrays so we\n    // can safely use this to our advantage dealing with sorted\n    // result sets too.\n    newOrder.forEach(function(doc, i) {\n      rawIds[i] = doc;\n    });\n  }\n}","\n\n/*!\n * ignore\n */\n\nmodule.exports = new WeakMap();","\n\nmodule.exports = getVirtual;\n\n/*!\n * ignore\n */\n\nfunction getVirtual(schema, name) {\n  if (schema.virtuals[name]) {\n    return { virtual: schema.virtuals[name], path: void 0 };\n  }\n\n  const parts = name.split('.');\n  let cur = '';\n  let nestedSchemaPath = '';\n  for (let i = 0; i < parts.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + parts[i];\n    if (schema.virtuals[cur]) {\n      if (i === parts.length - 1) {\n        return { virtual: schema.virtuals[cur], path: nestedSchemaPath };\n      }\n      continue;\n    }\n\n    if (schema.nested[cur]) {\n      continue;\n    }\n\n    if (schema.paths[cur] && schema.paths[cur].schema) {\n      schema = schema.paths[cur].schema;\n      const rest = parts.slice(i + 1).join('.');\n\n      if (schema.virtuals[rest]) {\n        if (i === parts.length - 2) {\n          return {\n            virtual: schema.virtuals[rest],\n            nestedSchemaPath: [nestedSchemaPath, cur].filter(v => !!v).join('.')\n          };\n        }\n        continue;\n      }\n\n      if (i + 1 < parts.length && schema.discriminators) {\n        for (const key of Object.keys(schema.discriminators)) {\n          const res = getVirtual(schema.discriminators[key], rest);\n          if (res != null) {\n            const _path = [nestedSchemaPath, cur, res.nestedSchemaPath].\n              filter(v => !!v).join('.');\n            return {\n              virtual: res.virtual,\n              nestedSchemaPath: _path\n            };\n          }\n        }\n      }\n\n      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;\n      cur = '';\n      continue;\n    }\n\n    if (schema.discriminators) {\n      for (const discriminatorKey of Object.keys(schema.discriminators)) {\n        const virtualFromDiscriminator = getVirtual(schema.discriminators[discriminatorKey], name);\n        if (virtualFromDiscriminator) return virtualFromDiscriminator;\n      }\n    }\n\n    return null;\n  }\n}\n","\n\nmodule.exports = function lookupLocalFields(cur, path, val) {\n  if (cur == null) {\n    return cur;\n  }\n\n  if (cur._doc != null) {\n    cur = cur._doc;\n  }\n\n  if (arguments.length >= 3) {\n    if (typeof cur !== 'object') {\n      return void 0;\n    }\n    if (val === void 0) {\n      return void 0;\n    }\n    if (cur instanceof Map) {\n      cur.set(path, val);\n    } else {\n      cur[path] = val;\n    }\n    return val;\n  }\n\n\n  // Support populating paths under maps using `map.$*.subpath`\n  if (path === '$*') {\n    return cur instanceof Map ?\n      Array.from(cur.values()) :\n      Object.keys(cur).map(key => cur[key]);\n  }\n\n  if (cur instanceof Map) {\n    return cur.get(path);\n  }\n\n  return cur[path];\n};","\n\nconst getDiscriminatorByValue = require('../../helpers/discriminator/getDiscriminatorByValue');\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst cast = require('../../cast');\nconst castUpdate = require('../query/castUpdate');\nconst setDefaultsOnInsert = require('../setDefaultsOnInsert');\n\n/*!\n * Given a model and a bulkWrite op, return a thunk that handles casting and\n * validating the individual op.\n */\n\nmodule.exports = function castBulkWrite(originalModel, op, options) {\n  const now = originalModel.base.now();\n\n  if (op['insertOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['insertOne']['document']);\n\n      const doc = new model(op['insertOne']['document']);\n      if (model.schema.options.timestamps) {\n        doc.initializeTimestamps();\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      op['insertOne']['document'] = doc;\n      op['insertOne']['document'].$validate({ __noPromise: true }, function(error) {\n        if (error) {\n          return callback(error, null);\n        }\n        callback(null);\n      });\n    };\n  } else if (op['updateOne']) {\n    return (callback) => {\n      try {\n        if (!op['updateOne']['filter']) {\n          throw new Error('Must provide a filter object.');\n        }\n        if (!op['updateOne']['update']) {\n          throw new Error('Must provide an update object.');\n        }\n\n        const model = decideModelByObject(originalModel, op['updateOne']['filter']);\n        const schema = model.schema;\n        const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n        _addDiscriminatorToObject(schema, op['updateOne']['filter']);\n\n        if (model.schema.$timestamps != null && op['updateOne'].timestamps !== false) {\n          const createdAt = model.schema.$timestamps.createdAt;\n          const updatedAt = model.schema.$timestamps.updatedAt;\n          applyTimestampsToUpdate(now, createdAt, updatedAt, op['updateOne']['update'], {});\n        }\n\n        applyTimestampsToChildren(now, op['updateOne']['update'], model.schema);\n\n        if (op['updateOne'].setDefaultsOnInsert !== false) {\n          setDefaultsOnInsert(op['updateOne']['filter'], model.schema, op['updateOne']['update'], {\n            setDefaultsOnInsert: true,\n            upsert: op['updateOne'].upsert\n          });\n        }\n\n        op['updateOne']['filter'] = cast(model.schema, op['updateOne']['filter'], {\n          strict: strict,\n          upsert: op['updateOne'].upsert\n        });\n\n        op['updateOne']['update'] = castUpdate(model.schema, op['updateOne']['update'], {\n          strict: strict,\n          overwrite: false,\n          upsert: op['updateOne'].upsert\n        }, model, op['updateOne']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['updateMany']) {\n    return (callback) => {\n      try {\n        if (!op['updateMany']['filter']) {\n          throw new Error('Must provide a filter object.');\n        }\n        if (!op['updateMany']['update']) {\n          throw new Error('Must provide an update object.');\n        }\n\n        const model = decideModelByObject(originalModel, op['updateMany']['filter']);\n        const schema = model.schema;\n        const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n        if (op['updateMany'].setDefaultsOnInsert !== false) {\n          setDefaultsOnInsert(op['updateMany']['filter'], model.schema, op['updateMany']['update'], {\n            setDefaultsOnInsert: true,\n            upsert: op['updateMany'].upsert\n          });\n        }\n\n        if (model.schema.$timestamps != null && op['updateMany'].timestamps !== false) {\n          const createdAt = model.schema.$timestamps.createdAt;\n          const updatedAt = model.schema.$timestamps.updatedAt;\n          applyTimestampsToUpdate(now, createdAt, updatedAt, op['updateMany']['update'], {});\n        }\n\n        applyTimestampsToChildren(now, op['updateMany']['update'], model.schema);\n\n        _addDiscriminatorToObject(schema, op['updateMany']['filter']);\n\n        op['updateMany']['filter'] = cast(model.schema, op['updateMany']['filter'], {\n          strict: strict,\n          upsert: op['updateMany'].upsert\n        });\n\n        op['updateMany']['update'] = castUpdate(model.schema, op['updateMany']['update'], {\n          strict: strict,\n          overwrite: false,\n          upsert: op['updateMany'].upsert\n        }, model, op['updateMany']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['replaceOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['replaceOne']['filter']);\n      const schema = model.schema;\n      const strict = options.strict != null ? options.strict : model.schema.options.strict;\n\n      _addDiscriminatorToObject(schema, op['replaceOne']['filter']);\n      try {\n        op['replaceOne']['filter'] = cast(model.schema, op['replaceOne']['filter'], {\n          strict: strict,\n          upsert: op['replaceOne'].upsert\n        });\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      // set `skipId`, otherwise we get \"_id field cannot be changed\"\n      const doc = new model(op['replaceOne']['replacement'], strict, true);\n      if (model.schema.options.timestamps) {\n        doc.initializeTimestamps();\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      op['replaceOne']['replacement'] = doc;\n\n      op['replaceOne']['replacement'].$validate({ __noPromise: true }, function(error) {\n        if (error) {\n          return callback(error, null);\n        }\n        op['replaceOne']['replacement'] = op['replaceOne']['replacement'].toBSON();\n        callback(null);\n      });\n    };\n  } else if (op['deleteOne']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['deleteOne']['filter']);\n      const schema = model.schema;\n\n      _addDiscriminatorToObject(schema, op['deleteOne']['filter']);\n\n      try {\n        op['deleteOne']['filter'] = cast(model.schema,\n          op['deleteOne']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else if (op['deleteMany']) {\n    return (callback) => {\n      const model = decideModelByObject(originalModel, op['deleteMany']['filter']);\n      const schema = model.schema;\n\n      _addDiscriminatorToObject(schema, op['deleteMany']['filter']);\n\n      try {\n        op['deleteMany']['filter'] = cast(model.schema,\n          op['deleteMany']['filter']);\n      } catch (error) {\n        return callback(error, null);\n      }\n\n      callback(null);\n    };\n  } else {\n    return (callback) => {\n      callback(new Error('Invalid op passed to `bulkWrite()`'), null);\n    };\n  }\n};\n\nfunction _addDiscriminatorToObject(schema, obj) {\n  if (schema == null) {\n    return;\n  }\n  if (schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    obj[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/*!\n * gets discriminator model if discriminator key is present in object\n */\n\nfunction decideModelByObject(model, object) {\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (object != null && object.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, object[discriminatorKey]) || model;\n  }\n  return model;\n}\n","\n\nconst SkipPopulateValue = require('./SkipPopulateValue');\nconst parentPaths = require('../path/parentPaths');\nconst { trusted } = require('../query/trusted');\n\nmodule.exports = function createPopulateQueryFilter(ids, _match, _foreignField, model, skipInvalidIds) {\n  const match = _formatMatch(_match);\n\n  if (_foreignField.size === 1) {\n    const foreignField = Array.from(_foreignField)[0];\n    const foreignSchemaType = model.schema.path(foreignField);\n    if (foreignField !== '_id' || !match['_id']) {\n      ids = _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds);\n      match[foreignField] = trusted({ $in: ids });\n    }\n\n    const _parentPaths = parentPaths(foreignField);\n    for (let i = 0; i < _parentPaths.length - 1; ++i) {\n      const cur = _parentPaths[i];\n      if (match[cur] != null && match[cur].$elemMatch != null) {\n        match[cur].$elemMatch[foreignField.slice(cur.length + 1)] = trusted({ $in: ids });\n        delete match[foreignField];\n        break;\n      }\n    }\n  } else {\n    const $or = [];\n    if (Array.isArray(match.$or)) {\n      match.$and = [{ $or: match.$or }, { $or: $or }];\n      delete match.$or;\n    } else {\n      match.$or = $or;\n    }\n    for (const foreignField of _foreignField) {\n      if (foreignField !== '_id' || !match['_id']) {\n        const foreignSchemaType = model.schema.path(foreignField);\n        ids = _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds);\n        $or.push({ [foreignField]: { $in: ids } });\n      }\n    }\n  }\n\n  return match;\n};\n\n/*!\n * Optionally filter out invalid ids that don't conform to foreign field's schema\n * to avoid cast errors (gh-7706)\n */\n\nfunction _filterInvalidIds(ids, foreignSchemaType, skipInvalidIds) {\n  ids = ids.filter(v => !(v instanceof SkipPopulateValue));\n  if (!skipInvalidIds) {\n    return ids;\n  }\n  return ids.filter(id => {\n    try {\n      foreignSchemaType.cast(id);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  });\n}\n\n/*!\n * Format `mod.match` given that it may be an array that we need to $or if\n * the client has multiple docs with match functions\n */\n\nfunction _formatMatch(match) {\n  if (Array.isArray(match)) {\n    if (match.length > 1) {\n      return { $or: [].concat(match.map(m => Object.assign({}, m))) };\n    }\n    return Object.assign({}, match[0]);\n  }\n  return Object.assign({}, match);\n}","\nfunction getDefaultBulkwriteResult() {\n  return {\n    result: {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    },\n    insertedCount: 0,\n    matchedCount: 0,\n    modifiedCount: 0,\n    deletedCount: 0,\n    upsertedCount: 0,\n    upsertedIds: {},\n    insertedIds: {},\n    n: 0\n  };\n}\n\nmodule.exports = getDefaultBulkwriteResult;","\n\nmodule.exports = function each(arr, cb, done) {\n  if (arr.length === 0) {\n    return done();\n  }\n\n  let remaining = arr.length;\n  let err = null;\n  for (const v of arr) {\n    cb(v, function(_err) {\n      if (err != null) {\n        return;\n      }\n      if (_err != null) {\n        err = _err;\n        return done(err);\n      }\n\n      if (--remaining <= 0) {\n        return done();\n      }\n    });\n  }\n};","\n\nconst MongooseError = require('../../error/index');\nconst SkipPopulateValue = require('./SkipPopulateValue');\nconst get = require('../get');\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\nconst getConstructorName = require('../getConstructorName');\nconst getSchemaTypes = require('./getSchemaTypes');\nconst getVirtual = require('./getVirtual');\nconst lookupLocalFields = require('./lookupLocalFields');\nconst mpath = require('mpath');\nconst modelNamesFromRefPath = require('./modelNamesFromRefPath');\nconst utils = require('../../utils');\n\nconst modelSymbol = require('../symbols').modelSymbol;\nconst populateModelSymbol = require('../symbols').populateModelSymbol;\nconst schemaMixedSymbol = require('../../schema/symbols').schemaMixedSymbol;\n\nmodule.exports = function getModelsMapForPopulate(model, docs, options) {\n  let doc;\n  const len = docs.length;\n  const map = [];\n  const modelNameFromQuery = options.model && options.model.modelName || options.model;\n  let schema;\n  let refPath;\n  let modelNames;\n  const available = {};\n\n  const modelSchema = model.schema;\n\n  // Populating a nested path should always be a no-op re: #9073.\n  // People shouldn't do this, but apparently they do.\n  if (options._localModel != null && options._localModel.schema.nested[options.path]) {\n    return [];\n  }\n\n  const _virtualRes = getVirtual(model.schema, options.path);\n  const virtual = _virtualRes == null ? null : _virtualRes.virtual;\n  if (virtual != null) {\n    return _virtualPopulate(model, docs, options, _virtualRes);\n  }\n\n  let allSchemaTypes = getSchemaTypes(model, modelSchema, null, options.path);\n  allSchemaTypes = Array.isArray(allSchemaTypes) ? allSchemaTypes : [allSchemaTypes].filter(v => v != null);\n\n  if (allSchemaTypes.length <= 0 && options.strictPopulate !== false && options._localModel != null) {\n    return new MongooseError('Cannot populate path `' + (options._fullPath || options.path) +\n      '` because it is not in your schema. Set the `strictPopulate` option ' +\n      'to false to override.');\n  }\n\n  for (let i = 0; i < len; i++) {\n    doc = docs[i];\n    let justOne = null;\n\n    const docSchema = doc != null && doc.$__ != null ? doc.$__schema : modelSchema;\n    schema = getSchemaTypes(model, docSchema, doc, options.path);\n\n    // Special case: populating a path that's a DocumentArray unless\n    // there's an explicit `ref` or `refPath` re: gh-8946\n    if (schema != null &&\n        schema.$isMongooseDocumentArray &&\n        schema.options.ref == null &&\n        schema.options.refPath == null) {\n      continue;\n    }\n    const isUnderneathDocArray = schema && schema.$isUnderneathDocArray;\n    if (isUnderneathDocArray && get(options, 'options.sort') != null) {\n      return new MongooseError('Cannot populate with `sort` on path ' + options.path +\n        ' because it is a subproperty of a document array');\n    }\n\n    modelNames = null;\n    let isRefPath = false;\n    let normalizedRefPath = null;\n    let schemaOptions = null;\n    let modelNamesInOrder = null;\n\n    if (schema != null && schema.instance === 'Embedded' && schema.options.ref) {\n      const data = {\n        localField: options.path + '._id',\n        foreignField: '_id',\n        justOne: true\n      };\n      const res = _getModelNames(doc, schema, modelNameFromQuery, model);\n\n      const unpopulatedValue = mpath.get(options.path, doc);\n      const id = mpath.get('_id', unpopulatedValue);\n      addModelNamesToMap(model, map, available, res.modelNames, options, data, id, doc, schemaOptions, unpopulatedValue);\n      continue;\n    }\n\n    if (Array.isArray(schema)) {\n      const schemasArray = schema;\n      for (const _schema of schemasArray) {\n        let _modelNames;\n        let res;\n        try {\n          res = _getModelNames(doc, _schema, modelNameFromQuery, model);\n          _modelNames = res.modelNames;\n          isRefPath = isRefPath || res.isRefPath;\n          normalizedRefPath = normalizedRefPath || res.refPath;\n          justOne = res.justOne;\n        } catch (error) {\n          return error;\n        }\n\n        if (isRefPath && !res.isRefPath) {\n          continue;\n        }\n        if (!_modelNames) {\n          continue;\n        }\n        modelNames = modelNames || [];\n        for (const modelName of _modelNames) {\n          if (modelNames.indexOf(modelName) === -1) {\n            modelNames.push(modelName);\n          }\n        }\n      }\n    } else {\n      try {\n        const res = _getModelNames(doc, schema, modelNameFromQuery, model);\n        modelNames = res.modelNames;\n        isRefPath = res.isRefPath;\n        normalizedRefPath = normalizedRefPath || res.refPath;\n        justOne = res.justOne;\n        schemaOptions = get(schema, 'options.populate', null);\n        // Dedupe, because `refPath` can return duplicates of the same model name,\n        // and that causes perf issues.\n        if (isRefPath) {\n          modelNamesInOrder = modelNames;\n          modelNames = Array.from(new Set(modelNames));\n        }\n      } catch (error) {\n        return error;\n      }\n\n      if (!modelNames) {\n        continue;\n      }\n    }\n\n    const data = {};\n    const localField = options.path;\n    const foreignField = '_id';\n\n    // `justOne = null` means we don't know from the schema whether the end\n    // result should be an array or a single doc. This can result from\n    // populating a POJO using `Model.populate()`\n    if ('justOne' in options && options.justOne !== void 0) {\n      justOne = options.justOne;\n    } else if (schema && !schema[schemaMixedSymbol]) {\n      // Skip Mixed types because we explicitly don't do casting on those.\n      if (options.path.endsWith('.' + schema.path) || options.path === schema.path) {\n        justOne = Array.isArray(schema) ?\n          schema.every(schema => !schema.$isMongooseArray) :\n          !schema.$isMongooseArray;\n      }\n    }\n\n    if (!modelNames) {\n      continue;\n    }\n\n    data.isVirtual = false;\n    data.justOne = justOne;\n    data.localField = localField;\n    data.foreignField = foreignField;\n\n    // Get local fields\n    const ret = _getLocalFieldValues(doc, localField, model, options, null, schema);\n\n    const id = String(utils.getValue(foreignField, doc));\n    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;\n\n    let match = get(options, 'match', null);\n\n    const hasMatchFunction = typeof match === 'function';\n    if (hasMatchFunction) {\n      match = match.call(doc, doc);\n    }\n    data.match = match;\n    data.hasMatchFunction = hasMatchFunction;\n    data.isRefPath = isRefPath;\n    data.modelNamesInOrder = modelNamesInOrder;\n\n    if (isRefPath) {\n      const embeddedDiscriminatorModelNames = _findRefPathForDiscriminators(doc,\n        modelSchema, data, options, normalizedRefPath, ret);\n\n      modelNames = embeddedDiscriminatorModelNames || modelNames;\n    }\n\n    try {\n      addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc, schemaOptions);\n    } catch (err) {\n      return err;\n    }\n  }\n  return map;\n\n  function _getModelNames(doc, schema, modelNameFromQuery, model) {\n    let modelNames;\n    let isRefPath = false;\n    let justOne = null;\n\n    if (schema && schema.instance === 'Array') {\n      schema = schema.caster;\n    }\n    if (schema && schema.$isSchemaMap) {\n      schema = schema.$__schemaType;\n    }\n\n    const ref = schema && schema.options && schema.options.ref;\n    refPath = schema && schema.options && schema.options.refPath;\n    if (schema != null &&\n        schema[schemaMixedSymbol] &&\n        !ref &&\n        !refPath &&\n        !modelNameFromQuery) {\n      return { modelNames: null };\n    }\n\n    if (modelNameFromQuery) {\n      modelNames = [modelNameFromQuery]; // query options\n    } else if (refPath != null) {\n      if (typeof refPath === 'function') {\n        const subdocPath = options.path.slice(0, options.path.length - schema.path.length - 1);\n        const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n        const subdocsBeingPopulated = Array.isArray(vals) ?\n          utils.array.flatten(vals) :\n          (vals ? [vals] : []);\n\n        modelNames = new Set();\n        for (const subdoc of subdocsBeingPopulated) {\n          refPath = refPath.call(subdoc, subdoc, options.path);\n          modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection).\n            forEach(name => modelNames.add(name));\n        }\n        modelNames = Array.from(modelNames);\n      } else {\n        modelNames = modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection);\n      }\n\n      isRefPath = true;\n    } else {\n      let ref;\n      let refPath;\n      let schemaForCurrentDoc;\n      let discriminatorValue;\n      let modelForCurrentDoc = model;\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (!schema && discriminatorKey && (discriminatorValue = utils.getValue(discriminatorKey, doc))) {\n        // `modelNameForFind` is the discriminator value, so we might need\n        // find the discriminated model name\n        const discriminatorModel = getDiscriminatorByValue(model.discriminators, discriminatorValue) || model;\n        if (discriminatorModel != null) {\n          modelForCurrentDoc = discriminatorModel;\n        } else {\n          try {\n            modelForCurrentDoc = _getModelFromConn(model.db, discriminatorValue);\n          } catch (error) {\n            return error;\n          }\n        }\n\n        schemaForCurrentDoc = modelForCurrentDoc.schema._getSchema(options.path);\n\n        if (schemaForCurrentDoc && schemaForCurrentDoc.caster) {\n          schemaForCurrentDoc = schemaForCurrentDoc.caster;\n        }\n      } else {\n        schemaForCurrentDoc = schema;\n      }\n\n      if (schemaForCurrentDoc != null) {\n        justOne = !schemaForCurrentDoc.$isMongooseArray && !schemaForCurrentDoc._arrayPath;\n      }\n\n      if ((ref = get(schemaForCurrentDoc, 'options.ref')) != null) {\n        if (schemaForCurrentDoc != null &&\n            typeof ref === 'function' &&\n            options.path.endsWith('.' + schemaForCurrentDoc.path)) {\n          // Ensure correct context for ref functions: subdoc, not top-level doc. See gh-8469\n          modelNames = new Set();\n\n          const subdocPath = options.path.slice(0, options.path.length - schemaForCurrentDoc.path.length - 1);\n          const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n          const subdocsBeingPopulated = Array.isArray(vals) ?\n            utils.array.flatten(vals) :\n            (vals ? [vals] : []);\n          for (const subdoc of subdocsBeingPopulated) {\n            modelNames.add(handleRefFunction(ref, subdoc));\n          }\n\n          if (subdocsBeingPopulated.length === 0) {\n            modelNames = [handleRefFunction(ref, doc)];\n          } else {\n            modelNames = Array.from(modelNames);\n          }\n        } else {\n          ref = handleRefFunction(ref, doc);\n          modelNames = [ref];\n        }\n      } else if ((schemaForCurrentDoc = get(schema, 'options.refPath')) != null) {\n        isRefPath = true;\n        if (typeof refPath === 'function') {\n          const subdocPath = options.path.slice(0, options.path.length - schemaForCurrentDoc.path.length - 1);\n          const vals = mpath.get(subdocPath, doc, lookupLocalFields);\n          const subdocsBeingPopulated = Array.isArray(vals) ?\n            utils.array.flatten(vals) :\n            (vals ? [vals] : []);\n\n          modelNames = new Set();\n          for (const subdoc of subdocsBeingPopulated) {\n            refPath = refPath.call(subdoc, subdoc, options.path);\n            modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection).\n              forEach(name => modelNames.add(name));\n          }\n          modelNames = Array.from(modelNames);\n        } else {\n          modelNames = modelNamesFromRefPath(refPath, doc, options.path, modelSchema, options._queryProjection);\n        }\n      }\n    }\n\n    if (!modelNames) {\n      // `Model.populate()` on a POJO with no known local model. Default to using the `Model`\n      if (options._localModel == null) {\n        modelNames = [model.modelName];\n      } else {\n        return { modelNames: modelNames, justOne: justOne, isRefPath: isRefPath, refPath: refPath };\n      }\n    }\n\n    if (!Array.isArray(modelNames)) {\n      modelNames = [modelNames];\n    }\n\n    return { modelNames: modelNames, justOne: justOne, isRefPath: isRefPath, refPath: refPath };\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _virtualPopulate(model, docs, options, _virtualRes) {\n  const map = [];\n  const available = {};\n  const virtual = _virtualRes.virtual;\n\n  for (const doc of docs) {\n    let modelNames = null;\n    const data = {};\n\n    // localField and foreignField\n    let localField;\n    const virtualPrefix = _virtualRes.nestedSchemaPath ?\n      _virtualRes.nestedSchemaPath + '.' : '';\n    if (typeof virtual.options.localField === 'function') {\n      localField = virtualPrefix + virtual.options.localField.call(doc, doc);\n    } else if (Array.isArray(virtual.options.localField)) {\n      localField = virtual.options.localField.map(field => virtualPrefix + field);\n    } else {\n      localField = virtualPrefix + virtual.options.localField;\n    }\n    data.count = virtual.options.count;\n\n    if (virtual.options.skip != null && !options.hasOwnProperty('skip')) {\n      options.skip = virtual.options.skip;\n    }\n    if (virtual.options.limit != null && !options.hasOwnProperty('limit')) {\n      options.limit = virtual.options.limit;\n    }\n    if (virtual.options.perDocumentLimit != null && !options.hasOwnProperty('perDocumentLimit')) {\n      options.perDocumentLimit = virtual.options.perDocumentLimit;\n    }\n    let foreignField = virtual.options.foreignField;\n\n    if (!localField || !foreignField) {\n      return new MongooseError('If you are populating a virtual, you must set the ' +\n        'localField and foreignField options');\n    }\n\n    if (typeof localField === 'function') {\n      localField = localField.call(doc, doc);\n    }\n    if (typeof foreignField === 'function') {\n      foreignField = foreignField.call(doc);\n    }\n\n    data.isRefPath = false;\n\n    // `justOne = null` means we don't know from the schema whether the end\n    // result should be an array or a single doc. This can result from\n    // populating a POJO using `Model.populate()`\n    let justOne = null;\n    if ('justOne' in options && options.justOne !== void 0) {\n      justOne = options.justOne;\n    }\n\n    if (virtual.options.refPath) {\n      modelNames =\n        modelNamesFromRefPath(virtual.options.refPath, doc, options.path);\n      justOne = !!virtual.options.justOne;\n      data.isRefPath = true;\n    } else if (virtual.options.ref) {\n      let normalizedRef;\n      if (typeof virtual.options.ref === 'function' && !virtual.options.ref[modelSymbol]) {\n        normalizedRef = virtual.options.ref.call(doc, doc);\n      } else {\n        normalizedRef = virtual.options.ref;\n      }\n      justOne = !!virtual.options.justOne;\n      // When referencing nested arrays, the ref should be an Array\n      // of modelNames.\n      if (Array.isArray(normalizedRef)) {\n        modelNames = normalizedRef;\n      } else {\n        modelNames = [normalizedRef];\n      }\n    }\n\n    data.isVirtual = true;\n    data.virtual = virtual;\n    data.justOne = justOne;\n\n    // `match`\n    let match = get(options, 'match', null) ||\n      get(data, 'virtual.options.match', null) ||\n      get(data, 'virtual.options.options.match', null);\n\n    let hasMatchFunction = typeof match === 'function';\n    if (hasMatchFunction) {\n      match = match.call(doc, doc);\n    }\n\n    if (Array.isArray(localField) && Array.isArray(foreignField) && localField.length === foreignField.length) {\n      match = Object.assign({}, match);\n      for (let i = 1; i < localField.length; ++i) {\n        match[foreignField[i]] = convertTo_id(mpath.get(localField[i], doc, lookupLocalFields), model.schema);\n        hasMatchFunction = true;\n      }\n\n      localField = localField[0];\n      foreignField = foreignField[0];\n    }\n\n    data.localField = localField;\n    data.foreignField = foreignField;\n    data.match = match;\n    data.hasMatchFunction = hasMatchFunction;\n\n    // Get local fields\n    const ret = _getLocalFieldValues(doc, localField, model, options, virtual);\n\n    try {\n      addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  return map;\n}\n\n/*!\n * ignore\n */\n\nfunction addModelNamesToMap(model, map, available, modelNames, options, data, ret, doc, schemaOptions, unpopulatedValue) {\n  // `PopulateOptions#connection`: if the model is passed as a string, the\n  // connection matters because different connections have different models.\n  const connection = options.connection != null ? options.connection : model.db;\n\n  unpopulatedValue = unpopulatedValue === void 0 ? ret : unpopulatedValue;\n  if (Array.isArray(unpopulatedValue)) {\n    unpopulatedValue = utils.cloneArrays(unpopulatedValue);\n  }\n\n  if (modelNames == null) {\n    return;\n  }\n\n  let k = modelNames.length;\n  while (k--) {\n    const modelName = modelNames[k];\n    if (modelName == null) {\n      continue;\n    }\n\n    let Model;\n    if (options.model && options.model[modelSymbol]) {\n      Model = options.model;\n    } else if (modelName[modelSymbol]) {\n      Model = modelName;\n    } else {\n      try {\n        Model = _getModelFromConn(connection, modelName);\n      } catch (err) {\n        if (ret !== void 0) {\n          throw err;\n        }\n        Model = null;\n      }\n    }\n\n    let ids = ret;\n    const flat = Array.isArray(ret) ? utils.array.flatten(ret) : [];\n\n    const modelNamesForRefPath = data.modelNamesInOrder ? data.modelNamesInOrder : modelNames;\n    if (data.isRefPath && Array.isArray(ret) && flat.length === modelNamesForRefPath.length) {\n      ids = flat.filter((val, i) => modelNamesForRefPath[i] === modelName);\n    }\n\n    const perDocumentLimit = options.perDocumentLimit == null ?\n      get(options, 'options.perDocumentLimit', null) :\n      options.perDocumentLimit;\n\n    if (!available[modelName] || perDocumentLimit != null) {\n      const currentOptions = {\n        model: Model\n      };\n\n      if (data.isVirtual && get(data.virtual, 'options.options')) {\n        currentOptions.options = utils.clone(data.virtual.options.options);\n      } else if (schemaOptions != null) {\n        currentOptions.options = Object.assign({}, schemaOptions);\n      }\n      utils.merge(currentOptions, options);\n\n      // Used internally for checking what model was used to populate this\n      // path.\n      options[populateModelSymbol] = Model;\n\n      available[modelName] = {\n        model: Model,\n        options: currentOptions,\n        match: data.hasMatchFunction ? [data.match] : data.match,\n        docs: [doc],\n        ids: [ids],\n        allIds: [ret],\n        unpopulatedValues: [unpopulatedValue],\n        localField: new Set([data.localField]),\n        foreignField: new Set([data.foreignField]),\n        justOne: data.justOne,\n        isVirtual: data.isVirtual,\n        virtual: data.virtual,\n        count: data.count,\n        [populateModelSymbol]: Model\n      };\n      map.push(available[modelName]);\n    } else {\n      available[modelName].localField.add(data.localField);\n      available[modelName].foreignField.add(data.foreignField);\n      available[modelName].docs.push(doc);\n      available[modelName].ids.push(ids);\n      available[modelName].allIds.push(ret);\n      available[modelName].unpopulatedValues.push(unpopulatedValue);\n      if (data.hasMatchFunction) {\n        available[modelName].match.push(data.match);\n      }\n    }\n  }\n}\n\nfunction _getModelFromConn(conn, modelName) {\n  /* If this connection has a parent from `useDb()`, bubble up to parent's models */\n  if (conn.models[modelName] == null && conn._parent != null) {\n    return _getModelFromConn(conn._parent, modelName);\n  }\n\n  return conn.model(modelName);\n}\n\n/*!\n * ignore\n */\n\nfunction handleRefFunction(ref, doc) {\n  if (typeof ref === 'function' && !ref[modelSymbol]) {\n    return ref.call(doc, doc);\n  }\n  return ref;\n}\n\n/*!\n * ignore\n */\n\nfunction _getLocalFieldValues(doc, localField, model, options, virtual, schema) {\n  // Get Local fields\n  const localFieldPathType = model.schema._getPathType(localField);\n  const localFieldPath = localFieldPathType === 'real' ?\n    model.schema.path(localField) :\n    localFieldPathType.schema;\n  const localFieldGetters = localFieldPath && localFieldPath.getters ?\n    localFieldPath.getters : [];\n\n  localField = localFieldPath != null && localFieldPath.instance === 'Embedded' ? localField + '._id' : localField;\n\n  const _populateOptions = get(options, 'options', {});\n\n  const getters = 'getters' in _populateOptions ?\n    _populateOptions.getters :\n    get(virtual, 'options.getters', false);\n  if (localFieldGetters.length > 0 && getters) {\n    const hydratedDoc = (doc.$__ != null) ? doc : model.hydrate(doc);\n    const localFieldValue = utils.getValue(localField, doc);\n    if (Array.isArray(localFieldValue)) {\n      const localFieldHydratedValue = utils.getValue(localField.split('.').slice(0, -1), hydratedDoc);\n      return localFieldValue.map((localFieldArrVal, localFieldArrIndex) =>\n        localFieldPath.applyGetters(localFieldArrVal, localFieldHydratedValue[localFieldArrIndex]));\n    } else {\n      return localFieldPath.applyGetters(localFieldValue, hydratedDoc);\n    }\n  } else {\n    return convertTo_id(mpath.get(localField, doc, lookupLocalFields), schema);\n  }\n}\n\n/*!\n * Retrieve the _id of `val` if a Document or Array of Documents.\n *\n * @param {Array|Document|Any} val\n * @return {Array|Document|Any}\n */\n\nfunction convertTo_id(val, schema) {\n  if (val != null && val.$__ != null) {\n    return val._id;\n  }\n  if (val != null && val._id != null && (schema == null || !schema.$isSchemaMap)) {\n    return val._id;\n  }\n\n  if (Array.isArray(val)) {\n    const rawVal = val.__array != null ? val.__array : val;\n    for (let i = 0; i < rawVal.length; ++i) {\n      if (rawVal[i] != null && rawVal[i].$__ != null) {\n        rawVal[i] = rawVal[i]._id;\n      }\n    }\n    if (val.isMongooseArray && val.$schema()) {\n      return val.$schema()._castForPopulate(val, val.$parent());\n    }\n\n    return [].concat(val);\n  }\n\n  // `populate('map')` may be an object if populating on a doc that hasn't\n  // been hydrated yet\n  if (getConstructorName(val) === 'Object' &&\n      // The intent here is we should only flatten the object if we expect\n      // to get a Map in the end. Avoid doing this for mixed types.\n      (schema == null || schema[schemaMixedSymbol] == null)) {\n    const ret = [];\n    for (const key of Object.keys(val)) {\n      ret.push(val[key]);\n    }\n    return ret;\n  }\n  // If doc has already been hydrated, e.g. `doc.populate('map')`\n  // then `val` will already be a map\n  if (val instanceof Map) {\n    return Array.from(val.values());\n  }\n\n  return val;\n}\n\n/*!\n * ignore\n */\n\nfunction _findRefPathForDiscriminators(doc, modelSchema, data, options, normalizedRefPath, ret) {\n  // Re: gh-8452. Embedded discriminators may not have `refPath`, so clear\n  // out embedded discriminator docs that don't have a `refPath` on the\n  // populated path.\n  if (!data.isRefPath || normalizedRefPath == null) {\n    return;\n  }\n\n  const pieces = normalizedRefPath.split('.');\n  let cur = '';\n  let modelNames = void 0;\n  for (let i = 0; i < pieces.length; ++i) {\n    const piece = pieces[i];\n    cur = cur + (cur.length === 0 ? '' : '.') + piece;\n    const schematype = modelSchema.path(cur);\n    if (schematype != null &&\n        schematype.$isMongooseArray &&\n        schematype.caster.discriminators != null &&\n        Object.keys(schematype.caster.discriminators).length > 0) {\n      const subdocs = utils.getValue(cur, doc);\n      const remnant = options.path.substr(cur.length + 1);\n      const discriminatorKey = schematype.caster.schema.options.discriminatorKey;\n      modelNames = [];\n      for (const subdoc of subdocs) {\n        const discriminatorName = utils.getValue(discriminatorKey, subdoc);\n        const discriminator = schematype.caster.discriminators[discriminatorName];\n        const discriminatorSchema = discriminator && discriminator.schema;\n        if (discriminatorSchema == null) {\n          continue;\n        }\n        const _path = discriminatorSchema.path(remnant);\n        if (_path == null || _path.options.refPath == null) {\n          const docValue = utils.getValue(data.localField.substr(cur.length + 1), subdoc);\n          ret.forEach((v, i) => {\n            if (v === docValue) {\n              ret[i] = SkipPopulateValue(v);\n            }\n          });\n          continue;\n        }\n        const modelName = utils.getValue(pieces.slice(i + 1).join('.'), subdoc);\n        modelNames.push(modelName);\n      }\n    }\n  }\n\n  return modelNames;\n}","\n\n/*!\n * ignore\n */\n\nconst Mixed = require('../../schema/mixed');\nconst get = require('../get');\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\nconst leanPopulateMap = require('./leanPopulateMap');\nconst mpath = require('mpath');\n\nconst populateModelSymbol = require('../symbols').populateModelSymbol;\n\n/*!\n * Given a model and its schema, find all possible schema types for `path`,\n * including searching through discriminators. If `doc` is specified, will\n * use the doc's values for discriminator keys when searching, otherwise\n * will search all discriminators.\n *\n * @param {Schema} schema\n * @param {Object} doc POJO\n * @param {string} path\n */\n\nmodule.exports = function getSchemaTypes(model, schema, doc, path) {\n  const pathschema = schema.path(path);\n  const topLevelDoc = doc;\n  if (pathschema) {\n    return pathschema;\n  }\n\n  const discriminatorKey = schema.discriminatorMapping &&\n    schema.discriminatorMapping.key;\n  if (discriminatorKey && model != null) {\n    if (doc != null && doc[discriminatorKey] != null) {\n      const discriminator = getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      schema = discriminator ? discriminator.schema : schema;\n    } else if (model.discriminators != null) {\n      return Object.keys(model.discriminators).reduce((arr, name) => {\n        const disc = model.discriminators[name];\n        return arr.concat(getSchemaTypes(disc, disc.schema, null, path));\n      }, []);\n    }\n  }\n\n  function search(parts, schema, subdoc, nestedPath) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema == null) {\n        continue;\n      }\n\n      if (foundschema.caster) {\n        // array of Mixed?\n        if (foundschema.caster instanceof Mixed) {\n          return foundschema.caster;\n        }\n\n        let schemas = null;\n        if (foundschema.schema != null && foundschema.schema.discriminators != null) {\n          const discriminators = foundschema.schema.discriminators;\n          const discriminatorKeyPath = trypath + '.' +\n            foundschema.schema.options.discriminatorKey;\n          const keys = subdoc ? mpath.get(discriminatorKeyPath, subdoc) || [] : [];\n          schemas = Object.keys(discriminators).\n            reduce(function(cur, discriminator) {\n              const tiedValue = discriminators[discriminator].discriminatorMapping.value;\n              if (doc == null || keys.indexOf(discriminator) !== -1 || keys.indexOf(tiedValue) !== -1) {\n                cur.push(discriminators[discriminator]);\n              }\n              return cur;\n            }, []);\n        }\n\n        // Now that we found the array, we need to check if there\n        // are remaining document paths to look up for casting.\n        // Also we need to handle array.$.path since schema.path\n        // doesn't work for that.\n        // If there is no foundschema.schema we are dealing with\n        // a path like array.$\n        if (p !== parts.length && foundschema.schema) {\n          let ret;\n          if (parts[p] === '$') {\n            if (p + 1 === parts.length) {\n              // comments.$\n              return foundschema;\n            }\n            // comments.$.comments.$.title\n            ret = search(\n              parts.slice(p + 1),\n              schema,\n              subdoc ? mpath.get(trypath, subdoc) : null,\n              nestedPath.concat(parts.slice(0, p))\n            );\n            if (ret) {\n              ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                !foundschema.schema.$isSingleNested;\n            }\n            return ret;\n          }\n\n          if (schemas != null && schemas.length > 0) {\n            ret = [];\n            for (const schema of schemas) {\n              const _ret = search(\n                parts.slice(p),\n                schema,\n                subdoc ? mpath.get(trypath, subdoc) : null,\n                nestedPath.concat(parts.slice(0, p))\n              );\n              if (_ret != null) {\n                _ret.$isUnderneathDocArray = _ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n                if (_ret.$isUnderneathDocArray) {\n                  ret.$isUnderneathDocArray = true;\n                }\n                ret.push(_ret);\n              }\n            }\n            return ret;\n          } else {\n            ret = search(\n              parts.slice(p),\n              foundschema.schema,\n              subdoc ? mpath.get(trypath, subdoc) : null,\n              nestedPath.concat(parts.slice(0, p))\n            );\n\n            if (ret) {\n              ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                !foundschema.schema.$isSingleNested;\n            }\n            return ret;\n          }\n        } else if (p !== parts.length &&\n            foundschema.$isMongooseArray &&\n            foundschema.casterConstructor.$isMongooseArray) {\n          // Nested arrays. Drill down to the bottom of the nested array.\n          let type = foundschema;\n          while (type.$isMongooseArray && !type.$isMongooseDocumentArray) {\n            type = type.casterConstructor;\n          }\n\n          const ret = search(\n            parts.slice(p),\n            type.schema,\n            null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n          if (ret != null) {\n            return ret;\n          }\n\n          if (type.schema.discriminators) {\n            const discriminatorPaths = [];\n            for (const discriminatorName of Object.keys(type.schema.discriminators)) {\n              const _schema = type.schema.discriminators[discriminatorName] || type.schema;\n              const ret = search(parts.slice(p), _schema, null, nestedPath.concat(parts.slice(0, p)));\n              if (ret != null) {\n                discriminatorPaths.push(ret);\n              }\n            }\n            if (discriminatorPaths.length > 0) {\n              return discriminatorPaths;\n            }\n          }\n        }\n      }\n\n      const fullPath = nestedPath.concat([trypath]).join('.');\n      if (topLevelDoc != null && topLevelDoc.$__ && topLevelDoc.$populated(fullPath) && p < parts.length) {\n        const model = doc.$__.populated[fullPath].options[populateModelSymbol];\n        if (model != null) {\n          const ret = search(\n            parts.slice(p),\n            model.schema,\n            subdoc ? mpath.get(trypath, subdoc) : null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n\n          if (ret) {\n            ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n              !model.schema.$isSingleNested;\n          }\n          return ret;\n        }\n      }\n\n      const _val = get(topLevelDoc, trypath);\n      if (_val != null) {\n        const model = Array.isArray(_val) && _val.length > 0 ?\n          leanPopulateMap.get(_val[0]) :\n          leanPopulateMap.get(_val);\n        // Populated using lean, `leanPopulateMap` value is the foreign model\n        const schema = model != null ? model.schema : null;\n        if (schema != null) {\n          const ret = search(\n            parts.slice(p),\n            schema,\n            subdoc ? mpath.get(trypath, subdoc) : null,\n            nestedPath.concat(parts.slice(0, p))\n          );\n\n          if (ret != null) {\n            ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n              !schema.$isSingleNested;\n            return ret;\n          }\n        }\n      }\n      return foundschema;\n    }\n  }\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$') {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, schema, doc, []);\n};\n","\n\nconst MongooseError = require('../../error/mongooseError');\nconst isPathExcluded = require('../projection/isPathExcluded');\nconst lookupLocalFields = require('./lookupLocalFields');\nconst mpath = require('mpath');\nconst util = require('util');\nconst utils = require('../../utils');\n\nmodule.exports = function modelNamesFromRefPath(refPath, doc, populatedPath, modelSchema, queryProjection) {\n  if (refPath == null) {\n    return [];\n  }\n\n  if (typeof refPath === 'string' && queryProjection != null && isPathExcluded(queryProjection, refPath)) {\n    throw new MongooseError('refPath `' + refPath + '` must not be excluded in projection, got ' +\n      util.inspect(queryProjection));\n  }\n\n  // If populated path has numerics, the end `refPath` should too. For example,\n  // if populating `a.0.b` instead of `a.b` and `b` has `refPath = a.c`, we\n  // should return `a.0.c` for the refPath.\n  const hasNumericProp = /(\\.\\d+$|\\.\\d+\\.)/g;\n\n  if (hasNumericProp.test(populatedPath)) {\n    const chunks = populatedPath.split(hasNumericProp);\n\n    if (chunks[chunks.length - 1] === '') {\n      throw new Error('Can\\'t populate individual element in an array');\n    }\n\n    let _refPath = '';\n    let _remaining = refPath;\n    // 2nd, 4th, etc. will be numeric props. For example: `[ 'a', '.0.', 'b' ]`\n    for (let i = 0; i < chunks.length; i += 2) {\n      const chunk = chunks[i];\n      if (_remaining.startsWith(chunk + '.')) {\n        _refPath += _remaining.substr(0, chunk.length) + chunks[i + 1];\n        _remaining = _remaining.substr(chunk.length + 1);\n      } else if (i === chunks.length - 1) {\n        _refPath += _remaining;\n        _remaining = '';\n        break;\n      } else {\n        throw new Error('Could not normalize ref path, chunk ' + chunk + ' not in populated path');\n      }\n    }\n\n    const refValue = mpath.get(_refPath, doc, lookupLocalFields);\n    let modelNames = Array.isArray(refValue) ? refValue : [refValue];\n    modelNames = utils.array.flatten(modelNames);\n    return modelNames;\n  }\n\n  const refValue = mpath.get(refPath, doc, lookupLocalFields);\n\n  let modelNames;\n  if (modelSchema != null && modelSchema.virtuals.hasOwnProperty(refPath)) {\n    modelNames = [modelSchema.virtuals[refPath].applyGetters(void 0, doc)];\n  } else {\n    modelNames = Array.isArray(refValue) ? refValue : [refValue];\n  }\n\n  modelNames = utils.array.flatten(modelNames);\n\n  return modelNames;\n};","\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * Determines if `path` is excluded by `projection`\n *\n * @param {Object} projection\n * @param {string} path\n * @return {Boolean}\n */\n\nmodule.exports = function isPathExcluded(projection, path) {\n  if (path === '_id') {\n    return projection._id === 0;\n  }\n\n  const paths = Object.keys(projection);\n  let type = null;\n\n  for (const _path of paths) {\n    if (isDefiningProjection(projection[_path])) {\n      type = projection[path] === 1 ? 'inclusive' : 'exclusive';\n      break;\n    }\n  }\n\n  if (type === 'inclusive') {\n    return projection[path] !== 1;\n  }\n  if (type === 'exclusive') {\n    return projection[path] === 0;\n  }\n  return false;\n};\n","\n\nconst get = require('../get');\n\nmodule.exports = function isDefaultIdIndex(index) {\n  if (Array.isArray(index)) {\n    // Mongoose syntax\n    const keys = Object.keys(index[0]);\n    return keys.length === 1 && keys[0] === '_id' && index[0]._id !== 'hashed';\n  }\n\n  if (typeof index !== 'object') {\n    return false;\n  }\n\n  const key = get(index, 'key', {});\n  return Object.keys(key).length === 1 && key.hasOwnProperty('_id');\n};","\n\nconst get = require('../get');\nconst utils = require('../../utils');\n/**\n * Given a Mongoose index definition (key + options objects) and a MongoDB server\n * index definition, determine if the two indexes are equal.\n *\n * @param {Object} key the Mongoose index spec\n * @param {Object} options the Mongoose index definition's options\n * @param {Object} dbIndex the index in MongoDB as returned by `listIndexes()`\n * @api private\n */\n\nmodule.exports = function isIndexEqual(key, options, dbIndex) {\n  // Special case: text indexes have a special format in the db. For example,\n  // `{ name: 'text' }` becomes:\n  // {\n  //   v: 2,\n  //   key: { _fts: 'text', _ftsx: 1 },\n  //   name: 'name_text',\n  //   ns: 'test.tests',\n  //   background: true,\n  //   weights: { name: 1 },\n  //   default_language: 'english',\n  //   language_override: 'language',\n  //   textIndexVersion: 3\n  // }\n  if (dbIndex.textIndexVersion != null) {\n    delete dbIndex.key._fts;\n    delete dbIndex.key._ftsx;\n    const weights = { ...dbIndex.weights, ...dbIndex.key };\n    if (Object.keys(weights).length !== Object.keys(key).length) {\n      return false;\n    }\n    for (const prop of Object.keys(weights)) {\n      if (!(prop in key)) {\n        return false;\n      }\n      const weight = weights[prop];\n      if (weight !== get(options, 'weights.' + prop) && !(weight === 1 && get(options, 'weights.' + prop) == null)) {\n        return false;\n      }\n    }\n\n    if (options['default_language'] !== dbIndex['default_language']) {\n      return dbIndex['default_language'] === 'english' && options['default_language'] == null;\n    }\n\n    return true;\n  }\n\n  const optionKeys = [\n    'unique',\n    'partialFilterExpression',\n    'sparse',\n    'expireAfterSeconds',\n    'collation'\n  ];\n  for (const key of optionKeys) {\n    if (!(key in options) && !(key in dbIndex)) {\n      continue;\n    }\n    if (key === 'collation') {\n      if (options[key] == null || dbIndex[key] == null) {\n        return options[key] == null && dbIndex[key] == null;\n      }\n      const definedKeys = Object.keys(options.collation);\n      const schemaCollation = options.collation;\n      const dbCollation = dbIndex.collation;\n      for (const opt of definedKeys) {\n        if (get(schemaCollation, opt) !== get(dbCollation, opt)) {\n          return false;\n        }\n      }\n    } else if (!utils.deepEqual(options[key], dbIndex[key])) {\n      return false;\n    }\n  }\n\n  const schemaIndexKeys = Object.keys(key);\n  const dbIndexKeys = Object.keys(dbIndex.key);\n  if (schemaIndexKeys.length !== dbIndexKeys.length) {\n    return false;\n  }\n  for (let i = 0; i < schemaIndexKeys.length; ++i) {\n    if (schemaIndexKeys[i] !== dbIndexKeys[i]) {\n      return false;\n    }\n    if (!utils.deepEqual(key[schemaIndexKeys[i]], dbIndex.key[dbIndexKeys[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","\n\n/*!\n * ignore\n */\n\nmodule.exports = function isPathSelectedInclusive(fields, path) {\n  const chunks = path.split('.');\n  let cur = '';\n  let j;\n  let keys;\n  let numKeys;\n  for (let i = 0; i < chunks.length; ++i) {\n    cur += cur.length ? '.' : '' + chunks[i];\n    if (fields[cur]) {\n      keys = Object.keys(fields);\n      numKeys = keys.length;\n      for (j = 0; j < numKeys; ++j) {\n        if (keys[i].indexOf(cur + '.') === 0 && keys[i].indexOf(path) !== 0) {\n          continue;\n        }\n      }\n      return true;\n    }\n  }\n\n  return false;\n};\n","\n\nmodule.exports = parallelLimit;\n\n/*!\n * ignore\n */\n\nfunction parallelLimit(fns, limit, callback) {\n  let numInProgress = 0;\n  let numFinished = 0;\n  let error = null;\n\n  if (limit <= 0) {\n    throw new Error('Limit must be positive');\n  }\n\n  if (fns.length === 0) {\n    return callback(null, []);\n  }\n\n  for (let i = 0; i < fns.length && i < limit; ++i) {\n    _start();\n  }\n\n  function _start() {\n    fns[numFinished + numInProgress](_done(numFinished + numInProgress));\n    ++numInProgress;\n  }\n\n  const results = [];\n\n  function _done(index) {\n    return (err, res) => {\n      --numInProgress;\n      ++numFinished;\n\n      if (error != null) {\n        return;\n      }\n      if (err != null) {\n        error = err;\n        return callback(error);\n      }\n\n      results[index] = res;\n\n      if (numFinished === fns.length) {\n        return callback(null, results);\n      } else if (numFinished + numInProgress < fns.length) {\n        _start();\n      }\n    };\n  }\n}\n","\n\nconst get = require('../get');\nconst mpath = require('mpath');\nconst parseProjection = require('../projection/parseProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function removeDeselectedForeignField(foreignFields, options, docs) {\n  const projection = parseProjection(get(options, 'select', null), true) ||\n    parseProjection(get(options, 'options.select', null), true);\n\n  if (projection == null) {\n    return;\n  }\n  for (const foreignField of foreignFields) {\n    if (!projection.hasOwnProperty('-' + foreignField)) {\n      continue;\n    }\n\n    for (const val of docs) {\n      if (val.$__ != null) {\n        mpath.unset(foreignField, val._doc);\n      } else {\n        mpath.unset(foreignField, val);\n      }\n    }\n  }\n};","\n\nmodule.exports = pluralize;\n\n/**\n * Pluralization rules.\n */\n\nexports.pluralization = [\n  [/(m)an$/gi, '$1en'],\n  [/(pe)rson$/gi, '$1ople'],\n  [/(child)$/gi, '$1ren'],\n  [/^(ox)$/gi, '$1en'],\n  [/(ax|test)is$/gi, '$1es'],\n  [/(octop|vir)us$/gi, '$1i'],\n  [/(alias|status)$/gi, '$1es'],\n  [/(bu)s$/gi, '$1ses'],\n  [/(buffal|tomat|potat)o$/gi, '$1oes'],\n  [/([ti])um$/gi, '$1a'],\n  [/sis$/gi, 'ses'],\n  [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'],\n  [/(hive)$/gi, '$1s'],\n  [/([^aeiouy]|qu)y$/gi, '$1ies'],\n  [/(x|ch|ss|sh)$/gi, '$1es'],\n  [/(matr|vert|ind)ix|ex$/gi, '$1ices'],\n  [/([m|l])ouse$/gi, '$1ice'],\n  [/(kn|w|l)ife$/gi, '$1ives'],\n  [/(quiz)$/gi, '$1zes'],\n  [/^goose$/i, 'geese'],\n  [/s$/gi, 's'],\n  [/([^a-z])$/, '$1'],\n  [/$/gi, 's']\n];\nconst rules = exports.pluralization;\n\n/**\n * Uncountable words.\n *\n * These words are applied while processing the argument to `toCollectionName`.\n * @api public\n */\n\nexports.uncountables = [\n  'advice',\n  'energy',\n  'excretion',\n  'digestion',\n  'cooperation',\n  'health',\n  'justice',\n  'labour',\n  'machinery',\n  'equipment',\n  'information',\n  'pollution',\n  'sewage',\n  'paper',\n  'money',\n  'species',\n  'series',\n  'rain',\n  'rice',\n  'fish',\n  'sheep',\n  'moose',\n  'deer',\n  'news',\n  'expertise',\n  'status',\n  'media'\n];\nconst uncountables = exports.uncountables;\n\n/*!\n * Pluralize function.\n *\n * @author TJ Holowaychuk (extracted from _ext.js_)\n * @param {String} string to pluralize\n * @api private\n */\n\nfunction pluralize(str) {\n  let found;\n  str = str.toLowerCase();\n  if (!~uncountables.indexOf(str)) {\n    found = rules.filter(function(rule) {\n      return str.match(rule[0]);\n    });\n    if (found[0]) {\n      return str.replace(found[0][0], found[0][1]);\n    }\n  }\n  return str;\n}","\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  // `this.$__.validating` tracks whether there are multiple validations running\n  // in parallel. We need to clear `this.$__.validating` before post hooks for gh-8597\n  const unshift = true;\n  schema.s.hooks.post('validate', false, function() {\n    if (this.$isSubdocument) {\n      return;\n    }\n\n    this.$__.validating = null;\n  }, unshift);\n\n  schema.s.hooks.post('validate', false, function(error, res, next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    this.$__.validating = null;\n    next();\n  }, unshift);\n};\n","\n\nconst each = require('../helpers/each');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.s.hooks.pre('remove', false, function(next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    const _this = this;\n    const subdocs = this.$getAllSubdocs();\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__remove(cb);\n    }, function(error) {\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('remove:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n};\n","\n\nconst each = require('../helpers/each');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.s.hooks.pre('save', false, function(next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    const _this = this;\n    const subdocs = this.$getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__schema.s.hooks.execPre('save', subdoc, function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n\n  schema.s.hooks.post('save', function(doc, next) {\n    if (this.$isSubdocument) {\n      next();\n      return;\n    }\n\n    const _this = this;\n    const subdocs = this.$getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__schema.s.hooks.execPost('save', subdoc, [subdoc], function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n};\n","\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst sessionNewDocuments = require('../helpers/symbols').sessionNewDocuments;\n\nmodule.exports = function trackTransaction(schema) {\n  schema.pre('save', function() {\n    const session = this.$session();\n    if (session == null) {\n      return;\n    }\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\n      return;\n    }\n\n    if (!session[sessionNewDocuments].has(this)) {\n      const initialState = {};\n      if (this.isNew) {\n        initialState.isNew = true;\n      }\n      if (this.$__schema.options.versionKey) {\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\n      }\n\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.states.modify));\n      initialState.atomics = _getAtomics(this);\n\n      session[sessionNewDocuments].set(this, initialState);\n    } else {\n      const state = session[sessionNewDocuments].get(this);\n\n      for (const path of Object.keys(this.$__.activePaths.states.modify)) {\n        state.modifiedPaths.add(path);\n      }\n      state.atomics = _getAtomics(this, state.atomics);\n    }\n  });\n};\n\nfunction _getAtomics(doc, previous) {\n  const pathToAtomics = new Map();\n  previous = previous || new Map();\n\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\n\n  for (const path of pathsToCheck) {\n    const val = doc.$__getValue(path);\n    if (val != null &&\n        val instanceof Array &&\n        val.isMongooseDocumentArray &&\n        val.length &&\n        val[arrayAtomicsSymbol] != null &&\n        Object.keys(val[arrayAtomicsSymbol]).length > 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  const dirty = doc.$__dirty();\n  for (const dirt of dirty) {\n    const path = dirt.path;\n\n    const val = dirt.value;\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length > 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  return pathToAtomics;\n}\n\nfunction mergeAtomics(destination, source) {\n  destination = destination || {};\n\n  if (source.$pullAll != null) {\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\n  }\n  if (source.$push != null) {\n    destination.$push = destination.$push || {};\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\n  }\n  if (source.$addToSet != null) {\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\n  }\n  if (source.$set != null) {\n    destination.$set = Object.assign(destination.$set || {}, source.$set);\n  }\n\n  return destination;\n}","\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.pre('save', false, function validateBeforeSave(next, options) {\n    const _this = this;\n    // Nested docs have their own presave\n    if (this.$isSubdocument) {\n      return next();\n    }\n\n    const hasValidateBeforeSaveOption = options &&\n        (typeof options === 'object') &&\n        ('validateBeforeSave' in options);\n\n    let shouldValidate;\n    if (hasValidateBeforeSaveOption) {\n      shouldValidate = !!options.validateBeforeSave;\n    } else {\n      shouldValidate = this.$__schema.options.validateBeforeSave;\n    }\n\n    // Validate\n    if (shouldValidate) {\n      const hasValidateModifiedOnlyOption = options &&\n          (typeof options === 'object') &&\n          ('validateModifiedOnly' in options);\n      const validateOptions = hasValidateModifiedOnlyOption ?\n        { validateModifiedOnly: options.validateModifiedOnly } :\n        null;\n      this.$validate(validateOptions, function(error) {\n        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          _this.$op = 'save';\n          next(error);\n        });\n      });\n    } else {\n      next();\n    }\n  }, null, unshift);\n};\n","\n\nconst objectIdSymbol = require('../helpers/symbols').objectIdSymbol;\nconst utils = require('../utils');\n\n/*!\n * ignore\n */\n\nmodule.exports = function shardingPlugin(schema) {\n  schema.post('init', function() {\n    storeShard.call(this);\n    return this;\n  });\n  schema.pre('save', function(next) {\n    applyWhere.call(this);\n    next();\n  });\n  schema.pre('remove', function(next) {\n    applyWhere.call(this);\n    next();\n  });\n  schema.post('save', function() {\n    storeShard.call(this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction applyWhere() {\n  let paths;\n  let len;\n\n  if (this.$__.shardval) {\n    paths = Object.keys(this.$__.shardval);\n    len = paths.length;\n\n    this.$where = this.$where || {};\n    for (let i = 0; i < len; ++i) {\n      this.$where[paths[i]] = this.$__.shardval[paths[i]];\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports.storeShard = storeShard;\n\n/*!\n * ignore\n */\n\nfunction storeShard() {\n  // backwards compat\n  const key = this.$__schema.options.shardKey || this.$__schema.options.shardkey;\n  if (!utils.isPOJO(key)) {\n    return;\n  }\n\n  const orig = this.$__.shardval = {};\n  const paths = Object.keys(key);\n  const len = paths.length;\n  let val;\n\n  for (let i = 0; i < len; ++i) {\n    val = this.$__getValue(paths[i]);\n    if (val == null) {\n      orig[paths[i]] = val;\n    } else if (utils.isMongooseObject(val)) {\n      orig[paths[i]] = val.toObject({ depopulate: true, _isNested: true });\n    } else if (val instanceof Date || val[objectIdSymbol]) {\n      orig[paths[i]] = val;\n    } else if (typeof val.valueOf === 'function') {\n      orig[paths[i]] = val.valueOf();\n    } else {\n      orig[paths[i]] = val;\n    }\n  }\n}\n","\n\nconst utils = require('../utils');\n\nif (typeof jest !== 'undefined' && typeof window !== 'undefined') {\n  utils.warn('Mongoose: looks like you\\'re trying to test a Mongoose app ' +\n    'with Jest\\'s default jsdom test environment. Please make sure you read ' +\n    'Mongoose\\'s docs on configuring Jest to test Node.js apps: ' +\n    'http://mongoosejs.com/docs/jest.html');\n}\n\nif (typeof jest !== 'undefined' && process.nextTick.toString().indexOf('nextTick') === -1) {\n  utils.warn('Mongoose: looks like you\\'re trying to test a Mongoose app ' +\n    'with Jest\\'s mock timers enabled. Please make sure you read ' +\n    'Mongoose\\'s docs on configuring Jest to test Node.js apps: ' +\n    'http://mongoosejs.com/docs/jest.html');\n}","\n\n/* eslint-env browser */\n\n/*!\n * Module dependencies.\n */\nconst Document = require('./document.js');\nconst BrowserDocument = require('./browserDocument.js');\n\nlet isBrowser = false;\n\n/**\n * Returns the Document constructor for the current context\n *\n * @api private\n */\nmodule.exports = function() {\n  if (isBrowser) {\n    return BrowserDocument;\n  }\n  return Document;\n};\n\n/*!\n * ignore\n */\nmodule.exports.setBrowser = function(flag) {\n  isBrowser = flag;\n};\n","/*!\n * Module dependencies.\n */\n\n\n\nconst NodeJSDocument = require('./document');\nconst EventEmitter = require('events').EventEmitter;\nconst MongooseError = require('./error/index');\nconst Schema = require('./schema');\nconst ObjectId = require('./types/objectid');\nconst ValidationError = MongooseError.ValidationError;\nconst applyHooks = require('./helpers/model/applyHooks');\nconst isObject = require('./helpers/isObject');\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, schema, fields, skipId, skipInit) {\n  if (!(this instanceof Document)) {\n    return new Document(obj, schema, fields, skipId, skipInit);\n  }\n\n  if (isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n\n  // When creating EmbeddedDocument, it already has the schema and he doesn't need the _id\n  schema = this.schema || schema;\n\n  // Generate ObjectId if it is missing, but it requires a scheme\n  if (!this.schema && schema.options._id) {\n    obj = obj || {};\n\n    if (obj._id === undefined) {\n      obj._id = new ObjectId();\n    }\n  }\n\n  if (!schema) {\n    throw new MongooseError.MissingSchemaError();\n  }\n\n  this.$__setSchema(schema);\n\n  NodeJSDocument.call(this, obj, fields, skipId, skipInit);\n\n  applyHooks(this, schema, { decorateDoc: true });\n\n  // apply methods\n  for (const m in schema.methods) {\n    this[m] = schema.methods[m];\n  }\n  // apply statics\n  for (const s in schema.statics) {\n    this[s] = schema.statics[s];\n  }\n}\n\n/*!\n * Inherit from the NodeJS document\n */\n\nDocument.prototype = Object.create(NodeJSDocument.prototype);\nDocument.prototype.constructor = Document;\n\n/*!\n * ignore\n */\n\nDocument.events = new EventEmitter();\n\n/*!\n * Browser doc exposes the event emitter API\n */\n\nDocument.$emitter = new EventEmitter();\n\n['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n  'removeAllListeners', 'addListener'].forEach(function(emitterFn) {\n  Document[emitterFn] = function() {\n    return Document.$emitter[emitterFn].apply(Document.$emitter, arguments);\n  };\n});\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"]}