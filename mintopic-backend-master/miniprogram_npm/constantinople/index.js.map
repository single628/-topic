{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar acorn = require('acorn');\nvar walk = require('acorn/dist/walk');\n\nvar lastSRC = '(null)';\nvar lastRes = true;\nvar lastConstants = undefined;\n\nvar STATEMENT_WHITE_LIST = {\n  'EmptyStatement': true,\n  'ExpressionStatement': true,\n};\nvar EXPRESSION_WHITE_LIST = {\n  'ParenthesizedExpression': true,\n  'ArrayExpression': true,\n  'ObjectExpression': true,\n  'SequenceExpression': true,\n  'TemplateLiteral': true,\n  'UnaryExpression': true,\n  'BinaryExpression': true,\n  'LogicalExpression': true,\n  'ConditionalExpression': true,\n  'Identifier': true,\n  'Literal': true,\n  'ComprehensionExpression': true,\n  'TaggedTemplateExpression': true,\n  'MemberExpression': true,\n  'CallExpression': true,\n  'NewExpression': true,\n};\nmodule.exports = isConstant;\nfunction isConstant(src, constants) {\n  src = '(' + src + ')';\n  if (lastSRC === src && lastConstants === constants) return lastRes;\n  lastSRC = src;\n  lastConstants = constants;\n  if (!isExpression(src)) return lastRes = false;\n  var ast;\n  try {\n    ast = acorn.parse(src, {\n      ecmaVersion: 6,\n      allowReturnOutsideFunction: true,\n      allowImportExportEverywhere: true,\n      allowHashBang: true\n    });\n  } catch (ex) {\n    return lastRes = false;\n  }\n  var isConstant = true;\n  walk.simple(ast, {\n    Statement: function (node) {\n      if (isConstant) {\n        if (STATEMENT_WHITE_LIST[node.type] !== true) {\n          isConstant = false;\n        }\n      }\n    },\n    Expression: function (node) {\n      if (isConstant) {\n        if (EXPRESSION_WHITE_LIST[node.type] !== true) {\n          isConstant = false;\n        }\n      }\n    },\n    MemberExpression: function (node) {\n      if (isConstant) {\n        if (node.computed) isConstant = false;\n        else if (node.property.name[0] === '_') isConstant = false;\n      }\n    },\n    Identifier: function (node) {\n      if (isConstant) {\n        if (!constants || !(node.name in constants)) {\n          isConstant = false;\n        }\n      }\n    },\n  });\n  return lastRes = isConstant;\n}\nisConstant.isConstant = isConstant;\n\nisConstant.toConstant = toConstant;\nfunction toConstant(src, constants) {\n  if (!isConstant(src, constants)) throw new Error(JSON.stringify(src) + ' is not constant.');\n  return Function(Object.keys(constants || {}).join(','), 'return (' + src + ')').apply(null, Object.keys(constants || {}).map(function (key) {\n    return constants[key];\n  }));\n}\n\nfunction isExpression(src) {\n  try {\n    eval('throw \"STOP\"; (function () { return (' + src + '); })()');\n    return false;\n  }\n  catch (err) {\n    return err === 'STOP';\n  }\n}\n"]}