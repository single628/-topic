{"version":3,"sources":["node.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var path = require(\"path\");\nvar fs = require(\"fs\");\nvar vm = require(\"vm\");\nvar sys = require(\"util\");\n\nvar UglifyJS = vm.createContext({\n    sys           : sys,\n    console       : console,\n    MOZ_SourceMap : require(\"source-map\")\n});\n\nfunction load_global(file) {\n    file = path.resolve(path.dirname(module.filename), file);\n    try {\n        var code = fs.readFileSync(file, \"utf8\");\n        return vm.runInContext(code, UglifyJS, file);\n    } catch(ex) {\n        // XXX: in case of a syntax error, the message is kinda\n        // useless. (no location information).\n        sys.debug(\"ERROR in file: \" + file + \" / \" + ex);\n        process.exit(1);\n    }\n};\n\nvar FILES = exports.FILES = [\n    \"../lib/utils.js\",\n    \"../lib/ast.js\",\n    \"../lib/parse.js\",\n    \"../lib/transform.js\",\n    \"../lib/scope.js\",\n    \"../lib/output.js\",\n    \"../lib/compress.js\",\n    \"../lib/sourcemap.js\",\n    \"../lib/mozilla-ast.js\"\n].map(function(file){\n    return path.join(path.dirname(fs.realpathSync(__filename)), file);\n});\n\nFILES.forEach(load_global);\n\nUglifyJS.AST_Node.warn_function = function(txt) {\n    sys.error(\"WARN: \" + txt);\n};\n\n// XXX: perhaps we shouldn't export everything but heck, I'm lazy.\nfor (var i in UglifyJS) {\n    if (UglifyJS.hasOwnProperty(i)) {\n        exports[i] = UglifyJS[i];\n    }\n}\n\nexports.minify = function(files, options) {\n    options = UglifyJS.defaults(options, {\n        outSourceMap : null,\n        sourceRoot   : null,\n        inSourceMap  : null,\n        fromString   : false,\n        warnings     : false,\n        mangle       : {},\n        output       : null,\n        compress     : {}\n    });\n    if (typeof files == \"string\")\n        files = [ files ];\n\n    // 1. parse\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = options.fromString\n            ? file\n            : fs.readFileSync(file, \"utf8\");\n        toplevel = UglifyJS.parse(code, {\n            filename: options.fromString ? \"?\" : file,\n            toplevel: toplevel\n        });\n    });\n\n    // 2. compress\n    if (options.compress) {\n        var compress = { warnings: options.warnings };\n        UglifyJS.merge(compress, options.compress);\n        toplevel.figure_out_scope();\n        var sq = UglifyJS.Compressor(compress);\n        toplevel = toplevel.transform(sq);\n    }\n\n    // 3. mangle\n    if (options.mangle) {\n        toplevel.figure_out_scope();\n        toplevel.compute_char_frequency();\n        toplevel.mangle_names(options.mangle);\n    }\n\n    // 4. output\n    var map = null;\n    var inMap = null;\n    if (options.inSourceMap) {\n        inMap = fs.readFileSync(options.inSourceMap, \"utf8\");\n    }\n    if (options.outSourceMap) map = UglifyJS.SourceMap({\n        file: options.outSourceMap,\n        orig: inMap,\n        root: options.sourceRoot\n    });\n    var output = { source_map: map };\n    if (options.output) {\n        UglifyJS.merge(output, options.output);\n    }\n    var stream = UglifyJS.OutputStream(output);\n    toplevel.print(stream);\n    return {\n        code : stream + \"\",\n        map  : map + \"\"\n    };\n};\n\n// exports.describe_ast = function() {\n//     function doitem(ctor) {\n//         var sub = {};\n//         ctor.SUBCLASSES.forEach(function(ctor){\n//             sub[ctor.TYPE] = doitem(ctor);\n//         });\n//         var ret = {};\n//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;\n//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;\n//         return ret;\n//     }\n//     return doitem(UglifyJS.AST_Node).sub;\n// }\n\nexports.describe_ast = function() {\n    var out = UglifyJS.OutputStream({ beautify: true });\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop){\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function(){\n                props.forEach(function(prop, i){\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function(){\n                ctor.SUBCLASSES.forEach(function(ctor, i){\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    };\n    doitem(UglifyJS.AST_Node);\n    return out + \"\";\n};\n"]}