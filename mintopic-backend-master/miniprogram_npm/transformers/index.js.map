{"version":3,"sources":["transformers.js","shared.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var dirname = require('path').dirname;\r\nvar Transformer = require('./shared');\r\n\r\n/**\r\n * minifiers must be first in order to be incorporated inside instances of respective output formats\r\n */\r\nvar uglifyJS = require('uglify-js');\r\nexports.uglify = exports.uglifyJS = exports['uglify-js'] = new Transformer({\r\n  name: 'uglify-js',\r\n  engines: ['.'],\r\n  outputFormat: 'js',\r\n  isMinifier: true,\r\n  sync: function (str, options) {\r\n    options.fromString = true;\r\n    return this.cache(options) || this.cache(options, uglifyJS.minify(str, options).code);\r\n  }\r\n});\r\nvar uglifyCSS = require('css');\r\nexports.uglifyCSS = exports['uglify-css'] = new Transformer({\r\n  name: 'uglify-css',\r\n  engines: ['.'],\r\n  outputFormat: 'css',\r\n  isMinifier: true,\r\n  sync: function (str, options) {\r\n    options.compress = options.compress != false && options.beautify != true;\r\n    return this.cache(options) || this.cache(options, uglifyCSS.stringify(uglifyCSS.parse(str), options));\r\n  }\r\n});\r\n\r\nexports.uglifyJSON = exports['uglify-json'] = new Transformer({\r\n  name: 'uglify-json',\r\n  engines: ['.'],\r\n  outputFormat: 'json',\r\n  isMinifier: true,\r\n  sync: function (str, options) {\r\n    return JSON.stringify(JSON.parse(str), null, options.beautify);\r\n  }\r\n});\r\n\r\n\r\n/**\r\n * Syncronous Templating Languages\r\n */\r\n\r\nfunction sync(str, options) {\r\n  var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n  return tmpl(options);\r\n}\r\n\r\nexports.swig = new Transformer({\r\n  name: 'swig',\r\n  engines: ['swig'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.atpl = new Transformer({\r\n  name: 'atpl',\r\n  engines: ['atpl'],\r\n  outputFormat: 'xml',\r\n  sync: function sync(str, options) {\r\n    var tmpl = this.cache(options);\r\n    if (!tmpl) {\r\n      var cInfo = {cache: options.cache, filename: options.filename};\r\n      if (options.filename) {\r\n        delete options.filename; //atpl can't handle absolute windows file paths properly\r\n      }\r\n      tmpl = this.cache(cInfo, this.engine.compile(str, options));\r\n    }\r\n    return tmpl(options);\r\n  }\r\n});\r\n\r\nexports.dot = new Transformer({\r\n  name: 'dot',\r\n  engines: ['dot'],\r\n  outputFormat: 'xml',\r\n  sync: function sync(str, options) {\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.template(str));\r\n    return tmpl(options);\r\n  }\r\n});\r\n\r\nexports.liquor = new Transformer({\r\n  name: 'liquor',\r\n  engines: ['liquor'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.ejs = new Transformer({\r\n  name: 'ejs',\r\n  engines: ['ejs'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.eco = new Transformer({\r\n  name: 'eco',\r\n  engines: ['eco'],\r\n  outputFormat: 'xml',\r\n  sync: sync//N.B. eco's internal this.cache isn't quite right but this bypasses it\r\n});\r\n\r\nexports.jqtpl = new Transformer({\r\n  name: 'jqtpl',\r\n  engines: ['jqtpl'],\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var engine = this.engine;\r\n    var key = (options.cache && options.filename) ? options.filename : '@';\r\n    engine.compile(str, key);\r\n    var res = this.engine.render(key, options);\r\n    if (!(options.cache && options.filename)) {\r\n      delete engine.cache[key];\r\n    }\r\n    this.cache(options, true); // caching handled internally\r\n    return res;\r\n  }\r\n});\r\n\r\nexports.haml = new Transformer({\r\n  name: 'haml',\r\n  engines: ['hamljs'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports['haml-coffee'] = new Transformer({\r\n  name: 'haml-coffee',\r\n  engines: ['haml-coffee'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.whiskers = new Transformer({\r\n  name: 'whiskers',\r\n  engines: ['whiskers'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.hogan = new Transformer({\r\n  name: 'hogan',\r\n  engines: ['hogan.js'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n    return tmpl.render(options, options.partials);\r\n  }\r\n});\r\n\r\nexports.handlebars = new Transformer({\r\n  name: 'handlebars',\r\n  engines: ['handlebars'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    for (var partial in options.partials) {\r\n      this.engine.registerPartial(partial, options.partials[partial]);\r\n    }\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n    return tmpl(options);\r\n  }\r\n});\r\n\r\nexports.underscore = new Transformer({\r\n  name: 'underscore',\r\n  engines: ['underscore'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.template(str));\r\n    return tmpl(options);\r\n  }\r\n});\r\n\r\nexports.walrus = new Transformer({\r\n  name: 'walrus',\r\n  engines: ['walrus'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.parse(str));\r\n    return tmpl.compile(options);\r\n  }\r\n});\r\n\r\nexports.mustache = new Transformer({\r\n  name: 'mustache',\r\n  engines: ['mustache'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str));\r\n    return tmpl(options, options.partials);\r\n  }\r\n});\r\n\r\nexports.templayed = new Transformer({\r\n  name: 'templayed',\r\n  engines: ['templayed'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine(str));\r\n    return tmpl(options);\r\n  }\r\n});\r\n\r\nexports.plates = new Transformer({\r\n  name: 'plates',\r\n  engines: ['plates'],\r\n  outputFormat: 'xml',\r\n  sync: function(str, options){\r\n    str = this.cache(options) || this.cache(options, str);\r\n    return this.engine.bind(str, options, options.map);\r\n  }\r\n});\r\n\r\nexports.mote = new Transformer({\r\n  name: 'mote',\r\n  engines: ['mote'],\r\n  outputFormat: 'xml',\r\n  sync: sync\r\n});\r\n\r\nexports.toffee = new Transformer({\r\n  name: 'toffee',\r\n  engines: ['toffee'],\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var View = this.engine.view;\r\n    var v = this.cache(options) || this.cache(options, new View(str, options));\r\n    var res = v.run(options, require('vm').createContext({}));\r\n    if (res[0]) throw res[0];\r\n    else return res[1];\r\n  }\r\n});\r\n\r\nexports.coffeekup = exports.coffeecup = new Transformer({\r\n  name: 'coffeecup',\r\n  engines: ['coffeecup', 'coffeekup'],\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var compiled = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n    return compiled(options);\r\n  }\r\n});\r\n\r\n/**\r\n * Asyncronous Templating Languages\r\n */\r\n\r\nexports.just = new Transformer({\r\n  name: 'just',\r\n  engines: ['just'],\r\n  outputFormat: 'xml',\r\n  sudoSync: true,\r\n  async: function (str, options, cb) {\r\n    var JUST = this.engine;\r\n    var tmpl = this.cache(options) || this.cache(options, new JUST({ root: { page: str }}));\r\n    tmpl.render('page', options, cb);\r\n  }\r\n});\r\n\r\nexports.ect = new Transformer({\r\n  name: 'ect',\r\n  engines: ['ect'],\r\n  outputFormat: 'xml',\r\n  sudoSync: true, // Always runs syncronously\r\n  async: function (str, options, cb) {\r\n    var ECT = this.engine;\r\n    var tmpl = this.cache(options) || this.cache(options, new ECT({ root: { page: str }}));\r\n    tmpl.render('page', options, cb);\r\n  }\r\n});\r\n\r\nexports.jade = new Transformer({\r\n  name: 'jade',\r\n  engines: ['jade', 'then-jade'],\r\n  outputFormat: 'xml',\r\n  sudoSync: 'The jade file FILENAME could not be rendered syncronously.  N.B. then-jade does not support syncronous rendering.',\r\n  async: function (str, options, cb) {\r\n    this.cache(options, true);//jade handles this.cache internally\r\n    this.engine.render(str, options, cb);\r\n  }\r\n})\r\n\r\nexports.dust = new Transformer({\r\n  name: 'dust',\r\n  engines: ['dust', 'dustjs-linkedin'],\r\n  outputFormat: 'xml',\r\n  sudoSync: false,\r\n  async: function (str, options, cb) {\r\n    var ext = 'dust'\r\n      , views = '.';\r\n\r\n    if (options) {\r\n      if (options.ext) ext = options.ext;\r\n      if (options.views) views = options.views;\r\n      if (options.settings && options.settings.views) views = options.settings.views;\r\n    }\r\n\r\n    this.engine.onLoad = function(path, callback){\r\n      if ('' == extname(path)) path += '.' + ext;\r\n      if ('/' !== path[0]) path = views + '/' + path;\r\n      read(path, options, callback);\r\n    };\r\n\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compileFn(str));\r\n    if (options && !options.cache) this.engine.cache = {};//invalidate dust's internal cache\r\n    tmpl(options, cb);\r\n  }\r\n});\r\n\r\nexports.jazz = new Transformer({\r\n  name: 'jazz',\r\n  engines: ['jazz'],\r\n  outputFormat: 'xml',\r\n  sudoSync: true, // except when an async function is passed to locals\r\n  async: function (str, options, cb) {\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n    tmpl.eval(options, function(str){\r\n      cb(null, str);\r\n    });\r\n  }\r\n});\r\n\r\nexports.qejs = new Transformer({\r\n  name: 'qejs',\r\n  engines: ['qejs'],\r\n  outputFormat: 'xml',\r\n  sudoSync: false,\r\n  async: function (str, options, cb) {\r\n    var tmpl = this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n    tmpl(options).done(function (result) {\r\n        cb(null, result);\r\n    }, function (err) {\r\n        cb(err);\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * Stylsheet Languages\r\n */\r\n\r\nexports.less = new Transformer({\r\n  name: 'less',\r\n  engines: ['less'],\r\n  outputFormat: 'css',\r\n  sudoSync: 'The less file FILENAME could not be rendered syncronously.  This is usually because the file contains `@import url` statements.',\r\n  async: function (str, options, cb) {\r\n    var self = this;\r\n    if (self.cache(options)) return cb(null, self.cache(options));\r\n    if (options.filename) {\r\n      options.paths = options.paths || [dirname(options.filename)];\r\n    }\r\n    //If this.cache is enabled, compress by default\r\n    if (options.compress !== true && options.compress !== false) {\r\n      options.compress = options.cache || false;\r\n    }\r\n    if (options.sudoSync) {\r\n      options.syncImport = true;\r\n    }\r\n    var parser = new(this.engine.Parser)(options);\r\n    parser.parse(str, function (err, tree) {\r\n      try {\r\n        if (err) throw err;\r\n        var res = tree.toCSS(options);\r\n        self.cache(options, res);\r\n        cb(null, res);\r\n      } catch (ex) {\r\n        if (ex.constructor.name === 'LessError' && typeof ex === 'object') {\r\n          ex.filename = ex.filename || '\"Unkown Source\"';\r\n          var err = new Error(self.engine.formatError(ex, options).replace(/^[^:]+:/, ''), ex.filename, ex.line);\r\n          err.name = ex.type;\r\n          ex = err;\r\n        }\r\n        return cb(ex);\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nexports.styl = exports.stylus = new Transformer({\r\n  name: 'stylus',\r\n  engines: ['stylus'],\r\n  outputFormat: 'css',\r\n  sudoSync: true,// always runs syncronously\r\n  async: function (str, options, cb) {\r\n    var self = this;\r\n    if (self.cache(options)) return cb(null, self.cache(options));\r\n    if (options.filename) {\r\n      options.paths = options.paths || [dirname(options.filename)];\r\n    }\r\n    //If this.cache is enabled, compress by default\r\n    if (options.compress !== true && options.compress !== false) {\r\n      options.compress = options.cache || false;\r\n    }\r\n    this.engine.render(str, options, function (err, res) {\r\n      if (err) return cb(err);\r\n      self.cache(options, res);\r\n      cb(null, res);\r\n    });\r\n  }\r\n})\r\n\r\nexports.sass = new Transformer({\r\n  name: 'sass',\r\n  engines: ['sass'],\r\n  outputFormat: 'css',\r\n  sync: function (str, options) {\r\n    try {\r\n      return this.cache(options) || this.cache(options, this.engine.render(str));\r\n    } catch (ex) {\r\n      if (options.filename) ex.message += ' in ' + options.filename;\r\n      throw ex;\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Miscelaneous\r\n */\r\n\r\nexports.md = exports.markdown = new Transformer({\r\n  name: 'markdown',\r\n  engines: ['marked', 'supermarked', 'markdown-js', 'markdown'],\r\n  outputFormat: 'html',\r\n  sync: function (str, options) {\r\n    var arg = options;\r\n    if (this.engineName === 'markdown') arg = options.dialect; //even if undefined\r\n    return this.cache(options) || this.cache(options, this.engine.parse(str, arg));\r\n  }\r\n});\r\n\r\n\r\nexports.coffee = exports['coffee-script'] = exports.coffeescript = exports.coffeeScript = new Transformer({\r\n  name: 'coffee-script',\r\n  engines: ['coffee-script'],\r\n  outputFormat: 'js',\r\n  sync: function (str, options) {\r\n    return this.cache(options) || this.cache(options, this.engine.compile(str, options));\r\n  }\r\n});\r\n\r\nexports.cson = new Transformer({\r\n  name: 'cson',\r\n  engines: ['cson'],\r\n  outputFormat: 'json',\r\n  sync: function (str, options) {\r\n    //todo: remove once https://github.com/rstacruz/js2coffee/pull/174 accepted & released\r\n    if (global.Narcissus) delete global.Narcissus; //prevent global leak\r\n    return this.cache(options) || this.cache(options, JSON.stringify(this.engine.parseSync(str)));\r\n  }\r\n});\r\n\r\nexports.cdata = new Transformer({\r\n  name: 'cdata',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var escaped = str.replace(/\\]\\]>/g, \"]]]]><![CDATA[>\");\r\n    return this.cache(options) || this.cache(options, '<![CDATA[' + escaped + ']]>');\r\n  }\r\n});\r\n\r\nexports[\"cdata-js\"] = new Transformer({\r\n  name: 'cdata-js',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var escaped = str.replace(/\\]\\]>/g, \"]]]]><![CDATA[>\");\r\n    return this.cache(options) || this.cache(options, '//<![CDATA[\\n' + escaped + '\\n//]]>');\r\n  }\r\n});\r\n\r\nexports[\"cdata-css\"] = new Transformer({\r\n  name: 'cdata-css',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    var escaped = str.replace(/\\]\\]>/g, \"]]]]><![CDATA[>\");\r\n    return this.cache(options) || this.cache(options, '/*<![CDATA[*/\\n' + escaped + '\\n/*]]>*/');\r\n  }\r\n});\r\n\r\nexports.verbatim = new Transformer({\r\n  name: 'verbatim',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'xml',\r\n  sync: function (str, options) {\r\n    return this.cache(options) || this.cache(options, str);\r\n  }\r\n});\r\n\r\nexports.component = exports['component-js'] = new Transformer({\r\n  name: 'component-js',\r\n  engines: ['component-builder'],\r\n  outputFormat: 'js',\r\n  async: function (str, options, cb) {\r\n    if (this.cache(options)) return this.cache(options);\r\n    var self = this;\r\n    var builder = new this.engine(dirname(options.filename));\r\n    if (options.development) {\r\n      builder.development();\r\n    }\r\n    if (options.sourceURLs === true || (options.sourceURLs !== false && options.development)) {\r\n      builder.addSourceURLs();\r\n    }\r\n    var path = require('path');\r\n    builder.paths = (options.paths || ['components']).map(function (p) {\r\n      if (path.resolve(p) === p) {\r\n        return p;\r\n      } else {\r\n        return path.join(dirname(options.filename), p);\r\n      }\r\n    });\r\n    builder.build(function (err, obj) {\r\n      if (err) return cb(err);\r\n      else return cb(null, self.cache(options, obj.require + obj.js));\r\n    });\r\n  }\r\n});\r\n\r\nexports['component-css'] = new Transformer({\r\n  name: 'component-css',\r\n  engines: ['component-builder'],\r\n  outputFormat: 'css',\r\n  async: function (str, options, cb) {\r\n    if (this.cache(options)) return this.cache(options);\r\n    var self = this;\r\n    var builder = new this.engine(dirname(options.filename));\r\n    if (options.development) {\r\n      builder.development();\r\n    }\r\n    if (options.sourceURLs === true || (options.sourceURLs !== false && options.development)) {\r\n      builder.addSourceURLs();\r\n    }\r\n    var path = require('path');\r\n    builder.paths = (options.paths || ['components']).map(function (p) {\r\n      if (path.resolve(p) === p) {\r\n        return p;\r\n      } else {\r\n        return path.join(dirname(options.filename), p);\r\n      }\r\n    });\r\n    builder.build(function (err, obj) {\r\n      if (err) return cb(err);\r\n      else return cb(null, self.cache(options, obj.css));\r\n    });\r\n  }\r\n});\r\n\r\nexports['html2jade'] = new Transformer({\r\n  name: 'html2jade',\r\n  engines: ['html2jade'],\r\n  outputFormat: 'jade',\r\n  async: function (str, options, cb) {\r\n    return this.cache(options) || this.cache(options, this.engine.convertHtml(str, options, cb));\r\n  }\r\n});\r\n\r\nexports['highlight'] = new Transformer({\r\n  name: 'highlight',\r\n  engines: ['highlight.js'],\r\n  outputFormat: 'xml',\r\n  sync: function (str, options, cb) {\r\n    if (this.cache(options)) return this.cache(options);\r\n    if (options.lang) {\r\n      try {\r\n        return this.cache(options, this.engine.highlight(options.lang, str).value);\r\n      } catch (ex) {}\r\n    }\r\n    if (options.auto || !options.lang) {\r\n      try {\r\n        return this.cache(options, this.engine.highlightAuto(str).value);\r\n      } catch (ex) {}\r\n    }\r\n    return this.cache(options, str);\r\n  }\r\n});\r\n\r\n\r\n/**\r\n * Marker transformers (they don't actually apply a transformation, but let you declare the 'outputFormat')\r\n */\r\n\r\nexports.css = new Transformer({\r\n  name: 'css',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'css',\r\n  sync: function (str, options) {\r\n    return this.cache(options) || this.cache(options, str);\r\n  }\r\n});\r\n\r\nexports.js = new Transformer({\r\n  name: 'js',\r\n  engines: ['.'],// `.` means \"no dependency\"\r\n  outputFormat: 'js',\r\n  sync: function (str, options) {\r\n    return this.cache(options) || this.cache(options, str);\r\n  }\r\n});\r\n\r\n\r\n","var Promise = require('promise');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar normalize = path.normalize;\r\n\r\n\r\nPromise.prototype.nodeify = function (cb) {\r\n  if (typeof cb === 'function') {\r\n    this.then(function (res) { process.nextTick(function () { cb(null, res); }); },\r\n              function (err) { process.nextTick(function () { cb(err); }); });\r\n    return undefined;\r\n  } else {\r\n    return this;\r\n  }\r\n}\r\n\r\nvar minifiers = {};\r\n\r\nmodule.exports = Transformer;\r\nfunction Transformer(obj) {\r\n  this.name = obj.name;\r\n  this.engines = obj.engines;\r\n  this.isBinary = obj.isBinary || false;\r\n  this.isMinifier = obj.isMinifier || false;\r\n  this.outputFormat = obj.outputFormat;\r\n  this._cache = {};\r\n  if (typeof obj.async === 'function') {\r\n    this._renderAsync = obj.async;\r\n    this.sudoSync = obj.sudoSync || false;\r\n  }\r\n  if (typeof obj.sync === 'function') {\r\n    this._renderSync = obj.sync;\r\n    this.sync = true;\r\n  } else {\r\n    this.sync = obj.sudoSync || false;\r\n  }\r\n\r\n  if (this.isMinifier)\r\n    minifiers[this.outputFormat] = this;\r\n  else {\r\n    var minifier = minifiers[this.outputFormat];\r\n    if (minifier) {\r\n      this.minify = function(str, options) {\r\n        if (options && options.minify)\r\n          return minifier.renderSync(str, typeof options.minify === 'object' && options.minify || {});\r\n        return str;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nTransformer.prototype.cache = function (options, data) {\r\n  if (options.cache && options.filename) {\r\n    if (data) return this.cache[options.filename] = data;\r\n    else return this.cache[options.filename];\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\nTransformer.prototype.loadModule = function () {\r\n  if (this.engine) return this.engine;\r\n  for (var i = 0; i < this.engines.length; i++) {\r\n    try {\r\n      var res = this.engines[i] === '.' ? null : (this.engine = require(this.engines[i]));\r\n      this.engineName = this.engines[i];\r\n      return res;\r\n    } catch (ex) {\r\n      if (this.engines.length === 1) {\r\n        throw ex;\r\n      }\r\n    }\r\n  }\r\n  throw new Error('In order to apply the transform ' + this.name + ' you must install one of ' + this.engines.map(function (e) { return '\"' + e + '\"'; }).join());\r\n};\r\nTransformer.prototype.minify = function(str, options) {\r\n  return str;\r\n}\r\nTransformer.prototype.renderSync = function (str, options) {\r\n  options = options || {};\r\n  options = clone(options);\r\n  this.loadModule();\r\n  if (this._renderSync) {\r\n    return this.minify(this._renderSync((this.isBinary ? str : fixString(str)), options), options);\r\n  } else if (this.sudoSync) {\r\n    options.sudoSync = true;\r\n    var res, err;\r\n    this._renderAsync((this.isBinary ? str : fixString(str)), options, function (e, val) {\r\n      if (e) err = e;\r\n      else res = val;\r\n    });\r\n    if (err) throw err;\r\n    else if (res != undefined) return this.minify(res, options);\r\n    else if (typeof this.sudoSync === 'string') throw new Error(this.sudoSync.replace(/FILENAME/g, options.filename || ''));\r\n    else throw new Error('There was a problem transforming ' + (options.filename || '') + ' syncronously using ' + this.name);\r\n  } else {\r\n    throw new Error(this.name + ' does not support transforming syncronously.');\r\n  }\r\n};\r\nTransformer.prototype.render = function (str, options, cb) {\r\n  options = options || {};\r\n  var self = this;\r\n  return new Promise(function (resolve, reject) {\r\n    self.loadModule();\r\n    if (self._renderAsync) {\r\n      self._renderAsync((self.isBinary ? str : fixString(str)), clone(options), function (err, val) {\r\n        if (err) reject(err);\r\n        else resolve(self.minify(val, options));\r\n      })\r\n    } else {\r\n      resolve(self.renderSync(str, options));\r\n    }\r\n  })\r\n  .nodeify(cb);\r\n};\r\nTransformer.prototype.renderFile = function (path, options, cb) {\r\n  options = options || {};\r\n  var self = this;\r\n  return new Promise(function (resolve, reject) {\r\n    options.filename = (path = normalize(path));\r\n    if (self._cache[path])\r\n      resolve(null);\r\n    else\r\n      fs.readFile(path, function (err, data) {\r\n        if (err) reject(err);\r\n        else resolve(data);\r\n      })\r\n  })\r\n  .then(function (str) {\r\n    return self.render(str, options);\r\n  })\r\n  .nodeify(cb);\r\n};\r\nTransformer.prototype.renderFileSync = function (path, options) {\r\n  options = options || {};\r\n  options.filename = (path = normalize(path));\r\n  return this.renderSync((this._cache[path] ? null : fs.readFileSync(path)), options);\r\n};\r\nfunction fixString(str) {\r\n  if (str == null) return str;\r\n  //convert buffer to string\r\n  str = str.toString();\r\n  // Strip UTF-8 BOM if it exists\r\n  str = (0xFEFF == str.charCodeAt(0) \r\n    ? str.substring(1)\r\n    : str);\r\n  //remove `\\r` added by windows\r\n  return str.replace(/\\r/g, '');\r\n}\r\n\r\nfunction clone(obj) {\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(clone);\r\n  } else if (obj && typeof obj === 'object') {\r\n    var res = {};\r\n    for (var key in obj) {\r\n      res[key] = clone(obj[key]);\r\n    }\r\n    return res;\r\n  } else {\r\n    return obj;\r\n  }\r\n}\r\n"]}